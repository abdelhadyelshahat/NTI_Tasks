
R503_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001fa  00800060  000049a6  00004a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080025a  0080025a  00004c34  2**0
                  ALLOC
  3 .stab         00004404  00000000  00000000  00004c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b4  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000a74c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a8db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000da21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000eb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ede6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 36       	cpi	r26, 0x63	; 99
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <main>
      8a:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 24 	jmp	0x4934	; 0x4934 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e5       	ldi	r26, 0x52	; 82
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 24 	jmp	0x496c	; 0x496c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 24 	jmp	0x4934	; 0x4934 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e5       	ldi	r24, 0x52	; 82
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 24 	jmp	0x496c	; 0x496c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e5       	ldi	r22, 0x52	; 82
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 24 	jmp	0x497c	; 0x497c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 24 	jmp	0x4984	; 0x4984 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 24 	jmp	0x4954	; 0x4954 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c6 24 	jmp	0x498c	; 0x498c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GIE_voidGIEEnable>:
/*MCAl includes*/
#include "GIE_interface.h"


void GIE_voidGIEEnable (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(SREG_REG,SREG_REG_L_BIT);
     ca6:	af e5       	ldi	r26, 0x5F	; 95
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e5       	ldi	r30, 0x5F	; 95
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
	
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <GIE_voidGIEDisable>:

void GIE_voidGIEDisable (void)
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,SREG_REG_L_BIT);
     cc2:	af e5       	ldi	r26, 0x5F	; 95
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	ef e5       	ldi	r30, 0x5F	; 95
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	8c 93       	st	X, r24
	
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <M_DIO_void_DIOInit>:
 *  Description : This Function Initialize the DIO Pins [ I/P (Pull-up or floating ) - O/P (High or Low) ]
 * ----------------------------------------------------------------------------------------------
 */

void M_DIO_void_DIOInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	/* Macros for initial Direction of PORTA */
  DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,
     cde:	ea e3       	ldi	r30, 0x3A	; 58
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	80 83       	st	Z, r24
		  	  	  	  	 DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
						 DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,
						 DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);
  /* Macros for initial Direction of PORTB */
  DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,
     ce6:	e7 e3       	ldi	r30, 0x37	; 55
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	80 83       	st	Z, r24
		  	  	  	  	 DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
						 DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,
						 DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);
  /* Macros for initial Direction of PORTC */
  DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,
     cee:	e4 e3       	ldi	r30, 0x34	; 52
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	87 ef       	ldi	r24, 0xF7	; 247
     cf4:	80 83       	st	Z, r24
		  	  	  	  	 DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
						 DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,
						 DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);
  /* Macros for initial Direction of PORTD */
  DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,
     cf6:	e1 e3       	ldi	r30, 0x31	; 49
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	80 83       	st	Z, r24
		  	  	  	  	 DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
						 DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,
						 DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

  /* Macros for initial values of PORTA */
  DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,
     cfe:	eb e3       	ldi	r30, 0x3B	; 59
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	10 82       	st	Z, r1
		  	  	  	  	  DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
						  DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,
						  DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
  /* Macros for initial values of PORTB */
  DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,
     d04:	e8 e3       	ldi	r30, 0x38	; 56
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	10 82       	st	Z, r1
  		  	  	  	  	  DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
  						  DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,
  						  DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
    /* Macros for initial values of PORTC */
   DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,
     d0a:	e5 e3       	ldi	r30, 0x35	; 53
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	88 e0       	ldi	r24, 0x08	; 8
     d10:	80 83       	st	Z, r24
    		  	  	  	   DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
    					   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,
    					   DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
      /* Macros for initial values of PORTD */
    DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,
     d12:	e2 e3       	ldi	r30, 0x32	; 50
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	10 82       	st	Z, r1
      		  	  	  	  	DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
      						DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,
      						DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);

}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <M_DIO_u8_SetPinDirection>:
 /* Return type :(u8 variable)        Error State  (STD_TYPES_NOK, STD_TYPES_OK)
 *  Description : This Function Sets the Direction of a specific pin (I/P - O/P)
 * ----------------------------------------------------------------------------------------------
 */
u8 M_DIO_u8_SetPinDirection(u8 Copy_u8PortNumber , u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	28 97       	sbiw	r28, 0x08	; 8
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	8a 83       	std	Y+2, r24	; 0x02
     d34:	6b 83       	std	Y+3, r22	; 0x03
     d36:	4c 83       	std	Y+4, r20	; 0x04
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
     d38:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number and Pin Number are in the valid range )*/
	if ((Copy_u8PortNumber <= DIO_u8_PORTD) && (Copy_u8PinNumber <= DIO_u8_PIN7))
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <M_DIO_u8_SetPinDirection+0x24>
     d40:	f2 c0       	rjmp	.+484    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	88 30       	cpi	r24, 0x08	; 8
     d46:	08 f0       	brcs	.+2      	; 0xd4a <M_DIO_u8_SetPinDirection+0x2c>
     d48:	ee c0       	rjmp	.+476    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
	{
		Local_u8ErrorState = STD_TYPES_OK;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	89 83       	std	Y+1, r24	; 0x01

		if (Copy_u8Direction == DIO_u8_PIN_OUTPUT_DIRECTION) /* check the direction */
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	88 23       	and	r24, r24
     d52:	09 f0       	breq	.+2      	; 0xd56 <M_DIO_u8_SetPinDirection+0x38>
     d54:	6f c0       	rjmp	.+222    	; 0xe34 <M_DIO_u8_SetPinDirection+0x116>
		{
			switch (Copy_u8PortNumber) /* check the port Number */
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	38 87       	std	Y+8, r19	; 0x08
     d5e:	2f 83       	std	Y+7, r18	; 0x07
     d60:	8f 81       	ldd	r24, Y+7	; 0x07
     d62:	98 85       	ldd	r25, Y+8	; 0x08
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	91 05       	cpc	r25, r1
     d68:	49 f1       	breq	.+82     	; 0xdbc <M_DIO_u8_SetPinDirection+0x9e>
     d6a:	2f 81       	ldd	r18, Y+7	; 0x07
     d6c:	38 85       	ldd	r19, Y+8	; 0x08
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	2c f4       	brge	.+10     	; 0xd7e <M_DIO_u8_SetPinDirection+0x60>
     d74:	8f 81       	ldd	r24, Y+7	; 0x07
     d76:	98 85       	ldd	r25, Y+8	; 0x08
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	61 f0       	breq	.+24     	; 0xd94 <M_DIO_u8_SetPinDirection+0x76>
     d7c:	d4 c0       	rjmp	.+424    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
     d7e:	2f 81       	ldd	r18, Y+7	; 0x07
     d80:	38 85       	ldd	r19, Y+8	; 0x08
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	71 f1       	breq	.+92     	; 0xde4 <M_DIO_u8_SetPinDirection+0xc6>
     d88:	8f 81       	ldd	r24, Y+7	; 0x07
     d8a:	98 85       	ldd	r25, Y+8	; 0x08
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	91 05       	cpc	r25, r1
     d90:	e9 f1       	breq	.+122    	; 0xe0c <M_DIO_u8_SetPinDirection+0xee>
     d92:	c9 c0       	rjmp	.+402    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			{
			case DIO_u8_PORTA : SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber) ; break;
     d94:	aa e3       	ldi	r26, 0x3A	; 58
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	ea e3       	ldi	r30, 0x3A	; 58
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <M_DIO_u8_SetPinDirection+0x94>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <M_DIO_u8_SetPinDirection+0x90>
     db6:	84 2b       	or	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	b5 c0       	rjmp	.+362    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTB : SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber) ; break;
     dbc:	a7 e3       	ldi	r26, 0x37	; 55
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e7 e3       	ldi	r30, 0x37	; 55
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <M_DIO_u8_SetPinDirection+0xbc>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <M_DIO_u8_SetPinDirection+0xb8>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	a1 c0       	rjmp	.+322    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTC : SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber) ; break;
     de4:	a4 e3       	ldi	r26, 0x34	; 52
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e3       	ldi	r30, 0x34	; 52
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <M_DIO_u8_SetPinDirection+0xe4>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <M_DIO_u8_SetPinDirection+0xe0>
     e06:	84 2b       	or	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	8d c0       	rjmp	.+282    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTD : SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber) ; break;
     e0c:	a1 e3       	ldi	r26, 0x31	; 49
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e1 e3       	ldi	r30, 0x31	; 49
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <M_DIO_u8_SetPinDirection+0x10c>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <M_DIO_u8_SetPinDirection+0x108>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	79 c0       	rjmp	.+242    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			}
		}

		else if (Copy_u8Direction == DIO_u8_PIN_INPUT_DIRECTION) /* check the direction */
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	09 f0       	breq	.+2      	; 0xe3c <M_DIO_u8_SetPinDirection+0x11e>
     e3a:	74 c0       	rjmp	.+232    	; 0xf24 <M_DIO_u8_SetPinDirection+0x206>
		{
			switch (Copy_u8PortNumber) /* check the port Number */
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	3e 83       	std	Y+6, r19	; 0x06
     e44:	2d 83       	std	Y+5, r18	; 0x05
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	91 05       	cpc	r25, r1
     e4e:	59 f1       	breq	.+86     	; 0xea6 <M_DIO_u8_SetPinDirection+0x188>
     e50:	2d 81       	ldd	r18, Y+5	; 0x05
     e52:	3e 81       	ldd	r19, Y+6	; 0x06
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	2c f4       	brge	.+10     	; 0xe64 <M_DIO_u8_SetPinDirection+0x146>
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	69 f0       	breq	.+26     	; 0xe7c <M_DIO_u8_SetPinDirection+0x15e>
     e62:	61 c0       	rjmp	.+194    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
     e64:	2d 81       	ldd	r18, Y+5	; 0x05
     e66:	3e 81       	ldd	r19, Y+6	; 0x06
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	89 f1       	breq	.+98     	; 0xed0 <M_DIO_u8_SetPinDirection+0x1b2>
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	91 05       	cpc	r25, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <M_DIO_u8_SetPinDirection+0x15c>
     e78:	40 c0       	rjmp	.+128    	; 0xefa <M_DIO_u8_SetPinDirection+0x1dc>
     e7a:	55 c0       	rjmp	.+170    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			{
			case DIO_u8_PORTA : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber) ; break;
     e7c:	aa e3       	ldi	r26, 0x3A	; 58
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ea e3       	ldi	r30, 0x3A	; 58
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <M_DIO_u8_SetPinDirection+0x17c>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <M_DIO_u8_SetPinDirection+0x178>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	40 c0       	rjmp	.+128    	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTB : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber) ; break;
     ea6:	a7 e3       	ldi	r26, 0x37	; 55
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e7 e3       	ldi	r30, 0x37	; 55
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <M_DIO_u8_SetPinDirection+0x1a6>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <M_DIO_u8_SetPinDirection+0x1a2>
     ec8:	80 95       	com	r24
     eca:	84 23       	and	r24, r20
     ecc:	8c 93       	st	X, r24
     ece:	2b c0       	rjmp	.+86     	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTC : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber) ; break;
     ed0:	a4 e3       	ldi	r26, 0x34	; 52
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e4 e3       	ldi	r30, 0x34	; 52
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <M_DIO_u8_SetPinDirection+0x1d0>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <M_DIO_u8_SetPinDirection+0x1cc>
     ef2:	80 95       	com	r24
     ef4:	84 23       	and	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTD : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber) ; break;
     efa:	a1 e3       	ldi	r26, 0x31	; 49
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e1 e3       	ldi	r30, 0x31	; 49
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <M_DIO_u8_SetPinDirection+0x1fa>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <M_DIO_u8_SetPinDirection+0x1f6>
     f1c:	80 95       	com	r24
     f1e:	84 23       	and	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <M_DIO_u8_SetPinDirection+0x208>
			}
		}
		else /* Invalid Direction option */
		{
			 Local_u8ErrorState = STD_TYPES_NOK ;
     f24:	19 82       	std	Y+1, r1	; 0x01
		}

	}


	return Local_u8ErrorState;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
}
     f28:	28 96       	adiw	r28, 0x08	; 8
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <M_DIO_u8_SetPinValue>:
 *  Description : This Function Sets the value of a specific pin (HIGH - LOW)
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_SetPinValue (u8 Copy_u8PortNumber , u8 Copy_u8PinNumber, u8 Copy_u8Value)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	28 97       	sbiw	r28, 0x08	; 8
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	6b 83       	std	Y+3, r22	; 0x03
     f52:	4c 83       	std	Y+4, r20	; 0x04
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
     f54:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number and Pin Number are in the valid range )*/
	if ((Copy_u8PortNumber <= DIO_u8_PORTD) && (Copy_u8PinNumber <= DIO_u8_PIN7))
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	84 30       	cpi	r24, 0x04	; 4
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <M_DIO_u8_SetPinValue+0x24>
     f5c:	f2 c0       	rjmp	.+484    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	88 30       	cpi	r24, 0x08	; 8
     f62:	08 f0       	brcs	.+2      	; 0xf66 <M_DIO_u8_SetPinValue+0x2c>
     f64:	ee c0       	rjmp	.+476    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
	{

		Local_u8ErrorState = STD_TYPES_OK;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	89 83       	std	Y+1, r24	; 0x01

		if (Copy_u8Value == DIO_u8_PIN_VALUE_HIGH) /* check the direction */
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <M_DIO_u8_SetPinValue+0x38>
     f70:	6f c0       	rjmp	.+222    	; 0x1050 <M_DIO_u8_SetPinValue+0x116>
		{
			switch (Copy_u8PortNumber) /* check the port Number */
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	38 87       	std	Y+8, r19	; 0x08
     f7a:	2f 83       	std	Y+7, r18	; 0x07
     f7c:	8f 81       	ldd	r24, Y+7	; 0x07
     f7e:	98 85       	ldd	r25, Y+8	; 0x08
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	91 05       	cpc	r25, r1
     f84:	49 f1       	breq	.+82     	; 0xfd8 <M_DIO_u8_SetPinValue+0x9e>
     f86:	2f 81       	ldd	r18, Y+7	; 0x07
     f88:	38 85       	ldd	r19, Y+8	; 0x08
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	2c f4       	brge	.+10     	; 0xf9a <M_DIO_u8_SetPinValue+0x60>
     f90:	8f 81       	ldd	r24, Y+7	; 0x07
     f92:	98 85       	ldd	r25, Y+8	; 0x08
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	61 f0       	breq	.+24     	; 0xfb0 <M_DIO_u8_SetPinValue+0x76>
     f98:	d4 c0       	rjmp	.+424    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
     f9a:	2f 81       	ldd	r18, Y+7	; 0x07
     f9c:	38 85       	ldd	r19, Y+8	; 0x08
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	71 f1       	breq	.+92     	; 0x1000 <M_DIO_u8_SetPinValue+0xc6>
     fa4:	8f 81       	ldd	r24, Y+7	; 0x07
     fa6:	98 85       	ldd	r25, Y+8	; 0x08
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	e9 f1       	breq	.+122    	; 0x1028 <M_DIO_u8_SetPinValue+0xee>
     fae:	c9 c0       	rjmp	.+402    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			{
			case DIO_u8_PORTA : SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber) ; break;
     fb0:	ab e3       	ldi	r26, 0x3B	; 59
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	eb e3       	ldi	r30, 0x3B	; 59
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <M_DIO_u8_SetPinValue+0x94>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <M_DIO_u8_SetPinValue+0x90>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	b5 c0       	rjmp	.+362    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTB : SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber) ; break;
     fd8:	a8 e3       	ldi	r26, 0x38	; 56
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e8 e3       	ldi	r30, 0x38	; 56
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <M_DIO_u8_SetPinValue+0xbc>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <M_DIO_u8_SetPinValue+0xb8>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	a1 c0       	rjmp	.+322    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTC : SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber) ; break;
    1000:	a5 e3       	ldi	r26, 0x35	; 53
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e3       	ldi	r30, 0x35	; 53
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <M_DIO_u8_SetPinValue+0xe4>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <M_DIO_u8_SetPinValue+0xe0>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	8d c0       	rjmp	.+282    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTD : SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber) ; break;
    1028:	a2 e3       	ldi	r26, 0x32	; 50
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e2 e3       	ldi	r30, 0x32	; 50
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <M_DIO_u8_SetPinValue+0x10c>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <M_DIO_u8_SetPinValue+0x108>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	79 c0       	rjmp	.+242    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			}
		}

		else if (Copy_u8Value == DIO_u8_PIN_VALUE_LOW) /* check the direction */
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	88 23       	and	r24, r24
    1054:	09 f0       	breq	.+2      	; 0x1058 <M_DIO_u8_SetPinValue+0x11e>
    1056:	74 c0       	rjmp	.+232    	; 0x1140 <M_DIO_u8_SetPinValue+0x206>
		{
			switch (Copy_u8PortNumber) /* check the port Number */
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3e 83       	std	Y+6, r19	; 0x06
    1060:	2d 83       	std	Y+5, r18	; 0x05
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	91 05       	cpc	r25, r1
    106a:	59 f1       	breq	.+86     	; 0x10c2 <M_DIO_u8_SetPinValue+0x188>
    106c:	2d 81       	ldd	r18, Y+5	; 0x05
    106e:	3e 81       	ldd	r19, Y+6	; 0x06
    1070:	22 30       	cpi	r18, 0x02	; 2
    1072:	31 05       	cpc	r19, r1
    1074:	2c f4       	brge	.+10     	; 0x1080 <M_DIO_u8_SetPinValue+0x146>
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	69 f0       	breq	.+26     	; 0x1098 <M_DIO_u8_SetPinValue+0x15e>
    107e:	61 c0       	rjmp	.+194    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
    1080:	2d 81       	ldd	r18, Y+5	; 0x05
    1082:	3e 81       	ldd	r19, Y+6	; 0x06
    1084:	22 30       	cpi	r18, 0x02	; 2
    1086:	31 05       	cpc	r19, r1
    1088:	89 f1       	breq	.+98     	; 0x10ec <M_DIO_u8_SetPinValue+0x1b2>
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	09 f4       	brne	.+2      	; 0x1096 <M_DIO_u8_SetPinValue+0x15c>
    1094:	40 c0       	rjmp	.+128    	; 0x1116 <M_DIO_u8_SetPinValue+0x1dc>
    1096:	55 c0       	rjmp	.+170    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			{
			case DIO_u8_PORTA : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber) ; break;
    1098:	ab e3       	ldi	r26, 0x3B	; 59
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	eb e3       	ldi	r30, 0x3B	; 59
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <M_DIO_u8_SetPinValue+0x17c>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <M_DIO_u8_SetPinValue+0x178>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	40 c0       	rjmp	.+128    	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTB : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber) ; break;
    10c2:	a8 e3       	ldi	r26, 0x38	; 56
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e3       	ldi	r30, 0x38	; 56
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <M_DIO_u8_SetPinValue+0x1a6>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <M_DIO_u8_SetPinValue+0x1a2>
    10e4:	80 95       	com	r24
    10e6:	84 23       	and	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	2b c0       	rjmp	.+86     	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTC : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber) ; break;
    10ec:	a5 e3       	ldi	r26, 0x35	; 53
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e3       	ldi	r30, 0x35	; 53
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <M_DIO_u8_SetPinValue+0x1d0>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <M_DIO_u8_SetPinValue+0x1cc>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	16 c0       	rjmp	.+44     	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTD : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber) ; break;
    1116:	a2 e3       	ldi	r26, 0x32	; 50
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e2 e3       	ldi	r30, 0x32	; 50
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <M_DIO_u8_SetPinValue+0x1fa>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <M_DIO_u8_SetPinValue+0x1f6>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <M_DIO_u8_SetPinValue+0x208>
			}
		}
		else /* Invalid Direction option */
		{
			Local_u8ErrorState = STD_TYPES_NOK ;
    1140:	19 82       	std	Y+1, r1	; 0x01
		}

	}

	return Local_u8ErrorState;
    1142:	89 81       	ldd	r24, Y+1	; 0x01
}
    1144:	28 96       	adiw	r28, 0x08	; 8
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <M_DIO_u8_GetPinValue>:
 *  Description : This Function Gets the value of a specific pin (HIGH - LOW)
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_GetPinValue (u8 Copy_u8PortNumber,u8 Copy_u8PinNumber, u8 * Copy_Pu8PinValue)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	27 97       	sbiw	r28, 0x07	; 7
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	8a 83       	std	Y+2, r24	; 0x02
    116c:	6b 83       	std	Y+3, r22	; 0x03
    116e:	5d 83       	std	Y+5, r21	; 0x05
    1170:	4c 83       	std	Y+4, r20	; 0x04
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
    1172:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number and Pin Number are in the valid range && if the user pass a Pointer)*/
	if ((Copy_u8PortNumber <= DIO_u8_PORTD) && (Copy_u8PinNumber <= DIO_u8_PIN7) && (Copy_Pu8PinValue != NULL))
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	84 30       	cpi	r24, 0x04	; 4
    1178:	08 f0       	brcs	.+2      	; 0x117c <M_DIO_u8_GetPinValue+0x26>
    117a:	7b c0       	rjmp	.+246    	; 0x1272 <M_DIO_u8_GetPinValue+0x11c>
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 30       	cpi	r24, 0x08	; 8
    1180:	08 f0       	brcs	.+2      	; 0x1184 <M_DIO_u8_GetPinValue+0x2e>
    1182:	77 c0       	rjmp	.+238    	; 0x1272 <M_DIO_u8_GetPinValue+0x11c>
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	9d 81       	ldd	r25, Y+5	; 0x05
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	09 f4       	brne	.+2      	; 0x118e <M_DIO_u8_GetPinValue+0x38>
    118c:	72 c0       	rjmp	.+228    	; 0x1272 <M_DIO_u8_GetPinValue+0x11c>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	89 83       	std	Y+1, r24	; 0x01

		switch (Copy_u8PortNumber)/* check the port Number */
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3f 83       	std	Y+7, r19	; 0x07
    119a:	2e 83       	std	Y+6, r18	; 0x06
    119c:	4e 81       	ldd	r20, Y+6	; 0x06
    119e:	5f 81       	ldd	r21, Y+7	; 0x07
    11a0:	41 30       	cpi	r20, 0x01	; 1
    11a2:	51 05       	cpc	r21, r1
    11a4:	59 f1       	breq	.+86     	; 0x11fc <M_DIO_u8_GetPinValue+0xa6>
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	82 30       	cpi	r24, 0x02	; 2
    11ac:	91 05       	cpc	r25, r1
    11ae:	34 f4       	brge	.+12     	; 0x11bc <M_DIO_u8_GetPinValue+0x66>
    11b0:	2e 81       	ldd	r18, Y+6	; 0x06
    11b2:	3f 81       	ldd	r19, Y+7	; 0x07
    11b4:	21 15       	cp	r18, r1
    11b6:	31 05       	cpc	r19, r1
    11b8:	69 f0       	breq	.+26     	; 0x11d4 <M_DIO_u8_GetPinValue+0x7e>
    11ba:	5b c0       	rjmp	.+182    	; 0x1272 <M_DIO_u8_GetPinValue+0x11c>
    11bc:	4e 81       	ldd	r20, Y+6	; 0x06
    11be:	5f 81       	ldd	r21, Y+7	; 0x07
    11c0:	42 30       	cpi	r20, 0x02	; 2
    11c2:	51 05       	cpc	r21, r1
    11c4:	79 f1       	breq	.+94     	; 0x1224 <M_DIO_u8_GetPinValue+0xce>
    11c6:	8e 81       	ldd	r24, Y+6	; 0x06
    11c8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <M_DIO_u8_GetPinValue+0x7c>
    11d0:	3d c0       	rjmp	.+122    	; 0x124c <M_DIO_u8_GetPinValue+0xf6>
    11d2:	4f c0       	rjmp	.+158    	; 0x1272 <M_DIO_u8_GetPinValue+0x11c>
		{
			case DIO_u8_PORTA : *Copy_Pu8PinValue =GET_BIT(DIO_u8_PINA_REG,Copy_u8PinNumber);break; /* update the variable with Pin value*/
    11d4:	e9 e3       	ldi	r30, 0x39	; 57
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <M_DIO_u8_GetPinValue+0x96>
    11e8:	55 95       	asr	r21
    11ea:	47 95       	ror	r20
    11ec:	8a 95       	dec	r24
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <M_DIO_u8_GetPinValue+0x92>
    11f0:	ca 01       	movw	r24, r20
    11f2:	81 70       	andi	r24, 0x01	; 1
    11f4:	ec 81       	ldd	r30, Y+4	; 0x04
    11f6:	fd 81       	ldd	r31, Y+5	; 0x05
    11f8:	80 83       	st	Z, r24
    11fa:	3b c0       	rjmp	.+118    	; 0x1272 <M_DIO_u8_GetPinValue+0x11c>
			case DIO_u8_PORTB : *Copy_Pu8PinValue =GET_BIT(DIO_u8_PINB_REG,Copy_u8PinNumber);break;  /* update the variable with Pin value*/
    11fc:	e6 e3       	ldi	r30, 0x36	; 54
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <M_DIO_u8_GetPinValue+0xbe>
    1210:	55 95       	asr	r21
    1212:	47 95       	ror	r20
    1214:	8a 95       	dec	r24
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <M_DIO_u8_GetPinValue+0xba>
    1218:	ca 01       	movw	r24, r20
    121a:	81 70       	andi	r24, 0x01	; 1
    121c:	ec 81       	ldd	r30, Y+4	; 0x04
    121e:	fd 81       	ldd	r31, Y+5	; 0x05
    1220:	80 83       	st	Z, r24
    1222:	27 c0       	rjmp	.+78     	; 0x1272 <M_DIO_u8_GetPinValue+0x11c>
			case DIO_u8_PORTC : *Copy_Pu8PinValue =GET_BIT(DIO_u8_PINC_REG,Copy_u8PinNumber);break; /* update the variable with Pin value*/
    1224:	e3 e3       	ldi	r30, 0x33	; 51
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a9 01       	movw	r20, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <M_DIO_u8_GetPinValue+0xe6>
    1238:	55 95       	asr	r21
    123a:	47 95       	ror	r20
    123c:	8a 95       	dec	r24
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <M_DIO_u8_GetPinValue+0xe2>
    1240:	ca 01       	movw	r24, r20
    1242:	81 70       	andi	r24, 0x01	; 1
    1244:	ec 81       	ldd	r30, Y+4	; 0x04
    1246:	fd 81       	ldd	r31, Y+5	; 0x05
    1248:	80 83       	st	Z, r24
    124a:	13 c0       	rjmp	.+38     	; 0x1272 <M_DIO_u8_GetPinValue+0x11c>
			case DIO_u8_PORTD : *Copy_Pu8PinValue =GET_BIT(DIO_u8_PIND_REG,Copy_u8PinNumber);break; /* update the variable with Pin value*/
    124c:	e0 e3       	ldi	r30, 0x30	; 48
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <M_DIO_u8_GetPinValue+0x10e>
    1260:	55 95       	asr	r21
    1262:	47 95       	ror	r20
    1264:	8a 95       	dec	r24
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <M_DIO_u8_GetPinValue+0x10a>
    1268:	ca 01       	movw	r24, r20
    126a:	81 70       	andi	r24, 0x01	; 1
    126c:	ec 81       	ldd	r30, Y+4	; 0x04
    126e:	fd 81       	ldd	r31, Y+5	; 0x05
    1270:	80 83       	st	Z, r24
		}

	}

	return Local_u8ErrorState ;
    1272:	89 81       	ldd	r24, Y+1	; 0x01

}
    1274:	27 96       	adiw	r28, 0x07	; 7
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <M_DIO_u8_TogglePinValue>:
 *  Description : This Function Toggles the value of a specific Pin
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_TogglePinValue (u8 Copy_u8PortNumber,u8 Copy_u8PinNumber)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <M_DIO_u8_TogglePinValue+0x6>
    128c:	00 d0       	rcall	.+0      	; 0x128e <M_DIO_u8_TogglePinValue+0x8>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	6b 83       	std	Y+3, r22	; 0x03
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
    1298:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number and Pin Number are in the valid range) */
	if (Copy_u8PortNumber <= DIO_u8_PORTD && Copy_u8PinNumber <= DIO_u8_PIN7)
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <M_DIO_u8_TogglePinValue+0x1c>
    12a0:	74 c0       	rjmp	.+232    	; 0x138a <M_DIO_u8_TogglePinValue+0x104>
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 30       	cpi	r24, 0x08	; 8
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <M_DIO_u8_TogglePinValue+0x24>
    12a8:	70 c0       	rjmp	.+224    	; 0x138a <M_DIO_u8_TogglePinValue+0x104>
	{
		Local_u8ErrorState = STD_TYPES_OK ;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	89 83       	std	Y+1, r24	; 0x01

		switch (Copy_u8PortNumber ) /* check the port Number */
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3d 83       	std	Y+5, r19	; 0x05
    12b6:	2c 83       	std	Y+4, r18	; 0x04
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	49 f1       	breq	.+82     	; 0x1314 <M_DIO_u8_TogglePinValue+0x8e>
    12c2:	2c 81       	ldd	r18, Y+4	; 0x04
    12c4:	3d 81       	ldd	r19, Y+5	; 0x05
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <M_DIO_u8_TogglePinValue+0x50>
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	9d 81       	ldd	r25, Y+5	; 0x05
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 f0       	breq	.+24     	; 0x12ec <M_DIO_u8_TogglePinValue+0x66>
    12d4:	5a c0       	rjmp	.+180    	; 0x138a <M_DIO_u8_TogglePinValue+0x104>
    12d6:	2c 81       	ldd	r18, Y+4	; 0x04
    12d8:	3d 81       	ldd	r19, Y+5	; 0x05
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	71 f1       	breq	.+92     	; 0x133c <M_DIO_u8_TogglePinValue+0xb6>
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	9d 81       	ldd	r25, Y+5	; 0x05
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	e9 f1       	breq	.+122    	; 0x1364 <M_DIO_u8_TogglePinValue+0xde>
    12ea:	4f c0       	rjmp	.+158    	; 0x138a <M_DIO_u8_TogglePinValue+0x104>
		{
		case DIO_u8_PORTA : TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break;
    12ec:	ab e3       	ldi	r26, 0x3B	; 59
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	eb e3       	ldi	r30, 0x3B	; 59
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <M_DIO_u8_TogglePinValue+0x84>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <M_DIO_u8_TogglePinValue+0x80>
    130e:	84 27       	eor	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	3b c0       	rjmp	.+118    	; 0x138a <M_DIO_u8_TogglePinValue+0x104>
		case DIO_u8_PORTB : TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break;
    1314:	a8 e3       	ldi	r26, 0x38	; 56
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e8 e3       	ldi	r30, 0x38	; 56
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <M_DIO_u8_TogglePinValue+0xac>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <M_DIO_u8_TogglePinValue+0xa8>
    1336:	84 27       	eor	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	27 c0       	rjmp	.+78     	; 0x138a <M_DIO_u8_TogglePinValue+0x104>
		case DIO_u8_PORTC : TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break;
    133c:	a5 e3       	ldi	r26, 0x35	; 53
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e5 e3       	ldi	r30, 0x35	; 53
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <M_DIO_u8_TogglePinValue+0xd4>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <M_DIO_u8_TogglePinValue+0xd0>
    135e:	84 27       	eor	r24, r20
    1360:	8c 93       	st	X, r24
    1362:	13 c0       	rjmp	.+38     	; 0x138a <M_DIO_u8_TogglePinValue+0x104>
		case DIO_u8_PORTD : TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break;
    1364:	a2 e3       	ldi	r26, 0x32	; 50
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e2 e3       	ldi	r30, 0x32	; 50
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <M_DIO_u8_TogglePinValue+0xfc>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <M_DIO_u8_TogglePinValue+0xf8>
    1386:	84 27       	eor	r24, r20
    1388:	8c 93       	st	X, r24
		}


	}
	return Local_u8ErrorState;
    138a:	89 81       	ldd	r24, Y+1	; 0x01

}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <M_DIO_u8_SetPortDirection>:
 *  Description : This Function Sets the Direction of a specific PORT (O/P - I/P)
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_SetPortDirection (u8 Copy_u8PortNumber , u8 Copy_u8PortDirection )
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <M_DIO_u8_SetPortDirection+0x6>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <M_DIO_u8_SetPortDirection+0x8>
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	6b 83       	std	Y+3, r22	; 0x03
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    13ae:	19 82       	std	Y+1, r1	; 0x01
	/* Input validation ( check if the port Number is in the valid range */
	if (Copy_u8PortNumber <= DIO_u8_PORTD )
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	84 30       	cpi	r24, 0x04	; 4
    13b4:	a0 f5       	brcc	.+104    	; 0x141e <M_DIO_u8_SetPortDirection+0x82>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01

		switch (Copy_u8PortNumber) /* check the port Number */
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3d 83       	std	Y+5, r19	; 0x05
    13c2:	2c 83       	std	Y+4, r18	; 0x04
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <M_DIO_u8_SetPortDirection+0x66>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <M_DIO_u8_SetPortDirection+0x46>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	61 f0       	breq	.+24     	; 0x13f8 <M_DIO_u8_SetPortDirection+0x5c>
    13e0:	1e c0       	rjmp	.+60     	; 0x141e <M_DIO_u8_SetPortDirection+0x82>
    13e2:	2c 81       	ldd	r18, Y+4	; 0x04
    13e4:	3d 81       	ldd	r19, Y+5	; 0x05
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <M_DIO_u8_SetPortDirection+0x70>
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	81 f0       	breq	.+32     	; 0x1416 <M_DIO_u8_SetPortDirection+0x7a>
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <M_DIO_u8_SetPortDirection+0x82>
		{
			case DIO_u8_PORTA : DIO_u8_DDRA_REG = Copy_u8PortDirection ; break;
    13f8:	ea e3       	ldi	r30, 0x3A	; 58
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	80 83       	st	Z, r24
    1400:	0e c0       	rjmp	.+28     	; 0x141e <M_DIO_u8_SetPortDirection+0x82>
			case DIO_u8_PORTB : DIO_u8_DDRB_REG = Copy_u8PortDirection ; break;
    1402:	e7 e3       	ldi	r30, 0x37	; 55
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	80 83       	st	Z, r24
    140a:	09 c0       	rjmp	.+18     	; 0x141e <M_DIO_u8_SetPortDirection+0x82>
			case DIO_u8_PORTC : DIO_u8_DDRC_REG = Copy_u8PortDirection ; break;
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	80 83       	st	Z, r24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <M_DIO_u8_SetPortDirection+0x82>
			case DIO_u8_PORTD : DIO_u8_DDRD_REG = Copy_u8PortDirection ; break;
    1416:	e1 e3       	ldi	r30, 0x31	; 49
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	80 83       	st	Z, r24
		}

	}
	return Local_u8ErrorState;
    141e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <M_DIO_u8_SetPortValue>:
 *  Description : This Function Sets the Value of a specific PORT (HIGH - LOW)
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_SetPortValue (u8 Copy_u8PortNumber , u8 Copy_u8PortValue )
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <M_DIO_u8_SetPortValue+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <M_DIO_u8_SetPortValue+0x8>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	6b 83       	std	Y+3, r22	; 0x03
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1442:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number is in the valid range */
	if (Copy_u8PortNumber <= DIO_u8_PORTD )
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	84 30       	cpi	r24, 0x04	; 4
    1448:	a0 f5       	brcc	.+104    	; 0x14b2 <M_DIO_u8_SetPortValue+0x82>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01

			switch (Copy_u8PortNumber)  /* check the port Number */
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3d 83       	std	Y+5, r19	; 0x05
    1456:	2c 83       	std	Y+4, r18	; 0x04
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	d1 f0       	breq	.+52     	; 0x1496 <M_DIO_u8_SetPortValue+0x66>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	2c f4       	brge	.+10     	; 0x1476 <M_DIO_u8_SetPortValue+0x46>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	61 f0       	breq	.+24     	; 0x148c <M_DIO_u8_SetPortValue+0x5c>
    1474:	1e c0       	rjmp	.+60     	; 0x14b2 <M_DIO_u8_SetPortValue+0x82>
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	81 f0       	breq	.+32     	; 0x14a0 <M_DIO_u8_SetPortValue+0x70>
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	91 05       	cpc	r25, r1
    1488:	81 f0       	breq	.+32     	; 0x14aa <M_DIO_u8_SetPortValue+0x7a>
    148a:	13 c0       	rjmp	.+38     	; 0x14b2 <M_DIO_u8_SetPortValue+0x82>
			{
				case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_u8PortValue ; break;
    148c:	eb e3       	ldi	r30, 0x3B	; 59
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	80 83       	st	Z, r24
    1494:	0e c0       	rjmp	.+28     	; 0x14b2 <M_DIO_u8_SetPortValue+0x82>
				case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_u8PortValue ; break;
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	80 83       	st	Z, r24
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <M_DIO_u8_SetPortValue+0x82>
				case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_u8PortValue ; break;
    14a0:	e5 e3       	ldi	r30, 0x35	; 53
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	80 83       	st	Z, r24
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <M_DIO_u8_SetPortValue+0x82>
				case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_u8PortValue ; break;
    14aa:	e2 e3       	ldi	r30, 0x32	; 50
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8b 81       	ldd	r24, Y+3	; 0x03
    14b0:	80 83       	st	Z, r24
			}

	}
	return Local_u8ErrorState;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01


}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <M_DIO_u8_ActivePullupResistor>:
 *  Description : This Function Enables and Disables  the internal Pull-up Resistor on a specific pin
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_ActivePullupResistor (u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber , u8 Copy_u8State)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	28 97       	sbiw	r28, 0x08	; 8
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	8a 83       	std	Y+2, r24	; 0x02
    14da:	6b 83       	std	Y+3, r22	; 0x03
    14dc:	4c 83       	std	Y+4, r20	; 0x04
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
    14de:	19 82       	std	Y+1, r1	; 0x01
	/* Input validation ( check if the port Number and Pin Number are in the valid range) */
	if (Copy_u8PortNumber <  DIO_u8_PORTD && Copy_u8PinNumber < DIO_u8_PIN7 )
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <M_DIO_u8_ActivePullupResistor+0x24>
    14e6:	41 c1       	rjmp	.+642    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	87 30       	cpi	r24, 0x07	; 7
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <M_DIO_u8_ActivePullupResistor+0x2c>
    14ee:	3d c1       	rjmp	.+634    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
	{
		Local_u8ErrorState = STD_TYPES_OK ;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	89 83       	std	Y+1, r24	; 0x01
		/* check the state of the Pull-up*/
		if (Copy_u8State == DIO_u8_PULLUP_RES_EN )
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	09 f0       	breq	.+2      	; 0x14fc <M_DIO_u8_ActivePullupResistor+0x38>
    14fa:	be c0       	rjmp	.+380    	; 0x1678 <M_DIO_u8_ActivePullupResistor+0x1b4>
		{
			switch (Copy_u8PortNumber) /* check the port Number*/
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	38 87       	std	Y+8, r19	; 0x08
    1504:	2f 83       	std	Y+7, r18	; 0x07
    1506:	8f 81       	ldd	r24, Y+7	; 0x07
    1508:	98 85       	ldd	r25, Y+8	; 0x08
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	91 05       	cpc	r25, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <M_DIO_u8_ActivePullupResistor+0x4e>
    1510:	3e c0       	rjmp	.+124    	; 0x158e <M_DIO_u8_ActivePullupResistor+0xca>
    1512:	2f 81       	ldd	r18, Y+7	; 0x07
    1514:	38 85       	ldd	r19, Y+8	; 0x08
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <M_DIO_u8_ActivePullupResistor+0x62>
    151c:	8f 81       	ldd	r24, Y+7	; 0x07
    151e:	98 85       	ldd	r25, Y+8	; 0x08
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	71 f0       	breq	.+28     	; 0x1540 <M_DIO_u8_ActivePullupResistor+0x7c>
    1524:	22 c1       	rjmp	.+580    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
    1526:	2f 81       	ldd	r18, Y+7	; 0x07
    1528:	38 85       	ldd	r19, Y+8	; 0x08
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <M_DIO_u8_ActivePullupResistor+0x6e>
    1530:	55 c0       	rjmp	.+170    	; 0x15dc <M_DIO_u8_ActivePullupResistor+0x118>
    1532:	8f 81       	ldd	r24, Y+7	; 0x07
    1534:	98 85       	ldd	r25, Y+8	; 0x08
    1536:	83 30       	cpi	r24, 0x03	; 3
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <M_DIO_u8_ActivePullupResistor+0x7a>
    153c:	76 c0       	rjmp	.+236    	; 0x162a <M_DIO_u8_ActivePullupResistor+0x166>
    153e:	15 c1       	rjmp	.+554    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
			{
			case DIO_u8_PORTA :
				CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber);  /*  set the direction of the pin to input */
    1540:	aa e3       	ldi	r26, 0x3A	; 58
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <M_DIO_u8_ActivePullupResistor+0x98>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	2a 95       	dec	r18
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <M_DIO_u8_ActivePullupResistor+0x94>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); /*  Active the pull-up resistor       */
    1566:	ab e3       	ldi	r26, 0x3B	; 59
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <M_DIO_u8_ActivePullupResistor+0xc0>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <M_DIO_u8_ActivePullupResistor+0xbc>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	ee c0       	rjmp	.+476    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
				break;
			case DIO_u8_PORTB :
				CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber);    /*  set the direction of the pin to input */
    158e:	a7 e3       	ldi	r26, 0x37	; 55
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e7 e3       	ldi	r30, 0x37	; 55
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <M_DIO_u8_ActivePullupResistor+0xe6>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	2a 95       	dec	r18
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <M_DIO_u8_ActivePullupResistor+0xe2>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber);   /*  Active the pull-up resistor       */
    15b4:	a8 e3       	ldi	r26, 0x38	; 56
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e8 e3       	ldi	r30, 0x38	; 56
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <M_DIO_u8_ActivePullupResistor+0x10e>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <M_DIO_u8_ActivePullupResistor+0x10a>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	c7 c0       	rjmp	.+398    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
				break;

			case DIO_u8_PORTC :
				CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber);    /*  set the direction of the pin to input */
    15dc:	a4 e3       	ldi	r26, 0x34	; 52
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e4 e3       	ldi	r30, 0x34	; 52
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <M_DIO_u8_ActivePullupResistor+0x134>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	2a 95       	dec	r18
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <M_DIO_u8_ActivePullupResistor+0x130>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber);   /*  Active the pull-up resistor       */
    1602:	a5 e3       	ldi	r26, 0x35	; 53
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e5 e3       	ldi	r30, 0x35	; 53
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <M_DIO_u8_ActivePullupResistor+0x15c>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <M_DIO_u8_ActivePullupResistor+0x158>
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	a0 c0       	rjmp	.+320    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
				break;

			case DIO_u8_PORTD :
				CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber);   /*  set the direction of the pin  to input */
    162a:	a1 e3       	ldi	r26, 0x31	; 49
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e1 e3       	ldi	r30, 0x31	; 49
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <M_DIO_u8_ActivePullupResistor+0x182>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	2a 95       	dec	r18
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <M_DIO_u8_ActivePullupResistor+0x17e>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber);  /*  Active the pull-up resistor       */
    1650:	a2 e3       	ldi	r26, 0x32	; 50
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e2 e3       	ldi	r30, 0x32	; 50
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <M_DIO_u8_ActivePullupResistor+0x1aa>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <M_DIO_u8_ActivePullupResistor+0x1a6>
    1672:	84 2b       	or	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	79 c0       	rjmp	.+242    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
				break;
			}
		}
		else if (Copy_u8State == DIO_u8_PULLUP_RES_DIS ) /* check the state of the Pull-up Resistor */
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	88 23       	and	r24, r24
    167c:	09 f0       	breq	.+2      	; 0x1680 <M_DIO_u8_ActivePullupResistor+0x1bc>
    167e:	74 c0       	rjmp	.+232    	; 0x1768 <M_DIO_u8_ActivePullupResistor+0x2a4>
		{
			switch (Copy_u8PortNumber)
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3e 83       	std	Y+6, r19	; 0x06
    1688:	2d 83       	std	Y+5, r18	; 0x05
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	91 05       	cpc	r25, r1
    1692:	59 f1       	breq	.+86     	; 0x16ea <M_DIO_u8_ActivePullupResistor+0x226>
    1694:	2d 81       	ldd	r18, Y+5	; 0x05
    1696:	3e 81       	ldd	r19, Y+6	; 0x06
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	2c f4       	brge	.+10     	; 0x16a8 <M_DIO_u8_ActivePullupResistor+0x1e4>
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	69 f0       	breq	.+26     	; 0x16c0 <M_DIO_u8_ActivePullupResistor+0x1fc>
    16a6:	61 c0       	rjmp	.+194    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
    16a8:	2d 81       	ldd	r18, Y+5	; 0x05
    16aa:	3e 81       	ldd	r19, Y+6	; 0x06
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	89 f1       	breq	.+98     	; 0x1714 <M_DIO_u8_ActivePullupResistor+0x250>
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <M_DIO_u8_ActivePullupResistor+0x1fa>
    16bc:	40 c0       	rjmp	.+128    	; 0x173e <M_DIO_u8_ActivePullupResistor+0x27a>
    16be:	55 c0       	rjmp	.+170    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
			{
			case DIO_u8_PORTA : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break; /*Disable the pull-up Resistor*/
    16c0:	ab e3       	ldi	r26, 0x3B	; 59
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	eb e3       	ldi	r30, 0x3B	; 59
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <M_DIO_u8_ActivePullupResistor+0x21a>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <M_DIO_u8_ActivePullupResistor+0x216>
    16e2:	80 95       	com	r24
    16e4:	84 23       	and	r24, r20
    16e6:	8c 93       	st	X, r24
    16e8:	40 c0       	rjmp	.+128    	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
			case DIO_u8_PORTB :	CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break; /*Disable the pull-up Resistor*/
    16ea:	a8 e3       	ldi	r26, 0x38	; 56
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <M_DIO_u8_ActivePullupResistor+0x244>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <M_DIO_u8_ActivePullupResistor+0x240>
    170c:	80 95       	com	r24
    170e:	84 23       	and	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	2b c0       	rjmp	.+86     	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
			case DIO_u8_PORTC :	CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break; /*Disable the pull-up Resistor*/
    1714:	a5 e3       	ldi	r26, 0x35	; 53
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <M_DIO_u8_ActivePullupResistor+0x26e>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <M_DIO_u8_ActivePullupResistor+0x26a>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	16 c0       	rjmp	.+44     	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
			case DIO_u8_PORTD :	CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break; /*Disable the pull-up Resistor*/
    173e:	a2 e3       	ldi	r26, 0x32	; 50
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e2 e3       	ldi	r30, 0x32	; 50
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <M_DIO_u8_ActivePullupResistor+0x298>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <M_DIO_u8_ActivePullupResistor+0x294>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	01 c0       	rjmp	.+2      	; 0x176a <M_DIO_u8_ActivePullupResistor+0x2a6>
			}

		}
		else { Local_u8ErrorState = STD_TYPES_NOK ;	}
    1768:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState ;
    176a:	89 81       	ldd	r24, Y+1	; 0x01
}
    176c:	28 96       	adiw	r28, 0x08	; 8
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <M_UART_void_UARTInit>:
 * Brief   	  : This Function initialize the UART peripheral depend on the UART_config.h file
 * Parameters : void
 * return     : void
 */
void M_UART_void_UARTInit (void)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <M_UART_void_UARTInit+0x6>
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
	/* variable to update the UCSRA register */
	u8 Local_u8UCSRAUpdate = 0;
    178a:	1b 82       	std	Y+3, r1	; 0x03
	/**********  1- Set the Baud Rate Value  ************/

	/* calculate the Baud rate using the equation */
	u16 Local_u16BaudRateValue = (u16)((F_CPU_SYS / (UART_BAUD_RATE_VALUE * 16 )) - 1 );
    178c:	80 e1       	ldi	r24, 0x10	; 16
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01

	/* Assign the UBBRH first with the most weight bits*/
	UART_u8_UBRRH_REG = (u8) (Local_u16BaudRateValue >> 8 ) ;
    1794:	e0 e4       	ldi	r30, 0x40	; 64
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	9a 81       	ldd	r25, Y+2	; 0x02
    179c:	89 2f       	mov	r24, r25
    179e:	99 27       	eor	r25, r25
    17a0:	80 83       	st	Z, r24

	/* Assign the UBBRL */
	UART_u8_UBRRL_REG = (u8) Local_u16BaudRateValue ;
    17a2:	e9 e2       	ldi	r30, 0x29	; 41
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	80 83       	st	Z, r24

	/******* 2- Double Speed option ************/
#if UART_u8_U2X_OPTION == UART_u8_U2X_DISABLE
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_U2X);
    17aa:	ab e2       	ldi	r26, 0x2B	; 43
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb e2       	ldi	r30, 0x2B	; 43
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8d 7f       	andi	r24, 0xFD	; 253
    17b6:	8c 93       	st	X, r24
#if UART_u8_RXCIE_OPTION == UART_INT_EN

	SET_BIT(UART_u8_UCSRB_REG,UCSRB_RXCIE);

#elif UART_u8_RXCIE_OPTION == UART_INT_DIS
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_RXCIE);
    17b8:	aa e2       	ldi	r26, 0x2A	; 42
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ea e2       	ldi	r30, 0x2A	; 42
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	8c 93       	st	X, r24
	/************** TX complete INT EN ********************/
#if UART_u8_TXCIE_OPTION == UART_INT_EN

	SET_BIT(UART_u8_UCSRB_REG,UCSRB_TXCIE);
#elif UART_u8_RXCIE_OPTION == UART_INT_DIS
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_TXCIE);
    17c6:	aa e2       	ldi	r26, 0x2A	; 42
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	ea e2       	ldi	r30, 0x2A	; 42
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8f 7b       	andi	r24, 0xBF	; 191
    17d2:	8c 93       	st	X, r24
	/************** UDRE ( UDR register is empty ) INT EN ********************/
#if UART_u8_UDRIE_OPTION == UART_INT_EN

	SET_BIT(UART_u8_UCSRB_REG,UART_u8_TX_EN);
#elif UART_u8_RXCIE_OPTION == UART_INT_DIS
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_UDRIE);
    17d4:	aa e2       	ldi	r26, 0x2A	; 42
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ea e2       	ldi	r30, 0x2A	; 42
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8f 7d       	andi	r24, 0xDF	; 223
    17e0:	8c 93       	st	X, r24
#endif

	/*************** 4- Select the mode ***************/
#if UART_u8_MODE_OPTION == UART_u8_ASYNCHRONOUS
	CLR_BIT(Local_u8UCSRAUpdate,UCSRC_UMSEL_BIT);
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	8f 7b       	andi	r24, 0xBF	; 191
    17e6:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRAUpdate,UCSRC_UMSEL_BIT);
#endif

	/********************** 5- Select parity options  */
#if UART_u8_PARITY_OPTION == DISABLED_PARITY_MODE
	CLR_BIT(Local_u8UCSRAUpdate,UCSRC_UPM1_BIT);
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	8f 7d       	andi	r24, 0xDF	; 223
    17ec:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRAUpdate,UCSRC_UPM0_BIT);
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	8f 7e       	andi	r24, 0xEF	; 239
    17f2:	8b 83       	std	Y+3, r24	; 0x03
#endif


	/************** 6- Select stop bits options ***********/
#if UART_STOP_BIT_OPTIONS == UART_u8_ONE_STOP_BIT
	CLR_BIT(Local_u8UCSRAUpdate,UCSRC_USBS_BIT);
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	87 7f       	andi	r24, 0xF7	; 247
    17f8:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRAUpdate,UCSRC_UCSZ1_BIT);
#elif UART_u8_CHARACTER_SIZE_OPTION  == UART_DATA_7_BITS
	SET_BIT(Local_u8UCSRAUpdate,UCSRC_UCSZ1_BIT);
	CLR_BIT(Local_u8UCSRAUpdate,UCSRC_UCSZ0_BIT);
#elif UART_u8_CHARACTER_SIZE_OPTION  == UART_DATA_8_BITS
	SET_BIT(Local_u8UCSRAUpdate,UCSRC_UCSZ0_BIT);
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	82 60       	ori	r24, 0x02	; 2
    17fe:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRAUpdate,UCSRC_UCSZ1_BIT);
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	84 60       	ori	r24, 0x04	; 4
    1804:	8b 83       	std	Y+3, r24	; 0x03
#endif

	/************************* 8 - Write on UCSRC register ******************/
	/* SET the URSEL Bit */
	SET_BIT(Local_u8UCSRAUpdate,UCSRC_URSEL_BIT);
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	80 68       	ori	r24, 0x80	; 128
    180a:	8b 83       	std	Y+3, r24	; 0x03

	/* Write in the register */
	UART_u8_UCSRC_REG = Local_u8UCSRAUpdate;
    180c:	e0 e4       	ldi	r30, 0x40	; 64
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	80 83       	st	Z, r24

	/************************ 9- Enable the TX ******************************/
#if UART_u8_TX_OPTION == UART_u8_TX_EN
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
    1814:	aa e2       	ldi	r26, 0x2A	; 42
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ea e2       	ldi	r30, 0x2A	; 42
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	88 60       	ori	r24, 0x08	; 8
    1820:	8c 93       	st	X, r24
#elif UART_u8_TX_OPTION == UART_u8_TX_DIS
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
#endif
	/************************ 9- Enable the RX ******************************/
#if UART_u8_RX_OPTION == UART_u8_RX_EN
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
    1822:	aa e2       	ldi	r26, 0x2A	; 42
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	ea e2       	ldi	r30, 0x2A	; 42
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 61       	ori	r24, 0x10	; 16
    182e:	8c 93       	st	X, r24
#elif UART_u8_TX_OPTION == UART_u8_RX_DIS
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
#endif
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <M_UART_u8_UARTSendCharacter>:
 * Parameters : Copy_u8Character (the character wanted to send)
 * return     : function error State
 */

u8 M_UART_u8_UARTSendCharacter (u8 Copy_u8Character)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	00 d0       	rcall	.+0      	; 0x1842 <M_UART_u8_UARTSendCharacter+0x6>
    1842:	0f 92       	push	r0
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8TimeOutCounter= 0;
    184e:	19 82       	std	Y+1, r1	; 0x01
	if (UART_u8_UARTState == IDLE)
    1850:	80 91 5a 02 	lds	r24, 0x025A
    1854:	88 23       	and	r24, r24
    1856:	d1 f4       	brne	.+52     	; 0x188c <M_UART_u8_UARTSendCharacter+0x50>
	{
		UART_u8_UARTState = BUSY;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	80 93 5a 02 	sts	0x025A, r24

		 while ((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE) == 0) && (Local_u8TimeOutCounter <= UART_TIME_OUT ))
    185e:	eb e2       	ldi	r30, 0x2B	; 43
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	82 95       	swap	r24
    1866:	86 95       	lsr	r24
    1868:	87 70       	andi	r24, 0x07	; 7
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	81 70       	andi	r24, 0x01	; 1
    1870:	90 70       	andi	r25, 0x00	; 0
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	21 f4       	brne	.+8      	; 0x187e <M_UART_u8_UARTSendCharacter+0x42>
		 {
			 	 Local_u8TimeOutCounter++;
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	f0 cf       	rjmp	.-32     	; 0x185e <M_UART_u8_UARTSendCharacter+0x22>
		 }

		 if (Local_u8TimeOutCounter <= UART_TIME_OUT)
		 {
			 UART_u8_UDR_REG= Copy_u8Character;
    187e:	ec e2       	ldi	r30, 0x2C	; 44
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	80 83       	st	Z, r24
		 else
		 {
			 Local_u8ErrorState = TIME_OUT_ERROR;
		 }

		 UART_u8_UARTState = IDLE;
    1886:	10 92 5a 02 	sts	0x025A, r1
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <M_UART_u8_UARTSendCharacter+0x54>
	}
	else
	{
		Local_u8ErrorState = FUNCTION_BUSY;
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_u8ErrorState;
    1890:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <M_UART_u8_Recievecharacter>:
 * Parameters : Copy_Pu8Character
 * return     : function error State
 */

u8  M_UART_u8_Recievecharacter(u8 * Copy_Pu8Character)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <M_UART_u8_Recievecharacter+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <M_UART_u8_Recievecharacter+0x8>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	9c 83       	std	Y+4, r25	; 0x04
    18ac:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8TimeOutCounter= 0;
    18b2:	19 82       	std	Y+1, r1	; 0x01
	if (UART_u8_UARTState == IDLE)
    18b4:	80 91 5a 02 	lds	r24, 0x025A
    18b8:	88 23       	and	r24, r24
    18ba:	a9 f4       	brne	.+42     	; 0x18e6 <M_UART_u8_Recievecharacter+0x48>
	{
		UART_u8_UARTState = BUSY;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	80 93 5a 02 	sts	0x025A, r24

		while (GET_BIT(UART_u8_UCSRA_REG,UCSRA_RXC) == 0 && (Local_u8TimeOutCounter <= UART_TIME_OUT ))
    18c2:	eb e2       	ldi	r30, 0x2B	; 43
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	88 23       	and	r24, r24
    18ca:	24 f0       	brlt	.+8      	; 0x18d4 <M_UART_u8_Recievecharacter+0x36>
		{
			Local_u8TimeOutCounter++;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	f7 cf       	rjmp	.-18     	; 0x18c2 <M_UART_u8_Recievecharacter+0x24>
		}

		 if (Local_u8TimeOutCounter <= UART_TIME_OUT)
		 {
			 *Copy_Pu8Character = UART_u8_UDR_REG;
    18d4:	ec e2       	ldi	r30, 0x2C	; 44
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	eb 81       	ldd	r30, Y+3	; 0x03
    18dc:	fc 81       	ldd	r31, Y+4	; 0x04
    18de:	80 83       	st	Z, r24
		 else
		 {
			 Local_u8ErrorState = TIME_OUT_ERROR;
		 }

		 UART_u8_UARTState = IDLE;
    18e0:	10 92 5a 02 	sts	0x025A, r1
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <M_UART_u8_Recievecharacter+0x4c>


	}
	else
	{
		Local_u8ErrorState = FUNCTION_BUSY;
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	8a 83       	std	Y+2, r24	; 0x02
	}
	return Local_u8ErrorState;
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <M_UART_u8_SendStringSynch>:
 * Parameters : Copy_Pu8String
 * return     : function error State
 */

u8 M_UART_u8_SendStringSynch(u8 * Copy_Pu8String)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <M_UART_u8_SendStringSynch+0x6>
    1900:	00 d0       	rcall	.+0      	; 0x1902 <M_UART_u8_SendStringSynch+0x8>
    1902:	0f 92       	push	r0
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK ;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StringIterrator =0 ;
    1910:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_Pu8String != NULL)
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	9c 81       	ldd	r25, Y+4	; 0x04
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	09 f1       	breq	.+66     	; 0x195c <M_UART_u8_SendStringSynch+0x62>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <M_UART_u8_SendStringSynch+0x4a>
	{

			while (Copy_Pu8String[Local_u8StringIterrator] != '\0')
			{
				if (M_UART_u8_UARTSendCharacter(Copy_Pu8String[Local_u8StringIterrator]) == STD_TYPES_OK)
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	fc 01       	movw	r30, r24
    1928:	e2 0f       	add	r30, r18
    192a:	f3 1f       	adc	r31, r19
    192c:	80 81       	ld	r24, Z
    192e:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	21 f4       	brne	.+8      	; 0x193e <M_UART_u8_SendStringSynch+0x44>
				{
					Local_u8StringIterrator++;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	8f 5f       	subi	r24, 0xFF	; 255
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <M_UART_u8_SendStringSynch+0x4a>
				}
				else
				{
					return Local_u8ErrorState;
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	8d 83       	std	Y+5, r24	; 0x05
    1942:	0f c0       	rjmp	.+30     	; 0x1962 <M_UART_u8_SendStringSynch+0x68>
	u8 Local_u8StringIterrator =0 ;

	if (Copy_Pu8String != NULL)
	{

			while (Copy_Pu8String[Local_u8StringIterrator] != '\0')
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	fc 01       	movw	r30, r24
    1950:	e2 0f       	add	r30, r18
    1952:	f3 1f       	adc	r31, r19
    1954:	80 81       	ld	r24, Z
    1956:	88 23       	and	r24, r24
    1958:	09 f7       	brne	.-62     	; 0x191c <M_UART_u8_SendStringSynch+0x22>
    195a:	01 c0       	rjmp	.+2      	; 0x195e <M_UART_u8_SendStringSynch+0x64>

			}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    195c:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <M_UART_u8SendStringAsynch>:
 * Parameters : Copy_Pu8String , AppCallBackFunction
 * return     : function error State
 */

u8 M_UART_u8SendStringAsynch(u8 * Copy_Pu8String , void (* AppCallBackFunction) (void))
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <M_UART_u8SendStringAsynch+0x6>
    197a:	00 d0       	rcall	.+0      	; 0x197c <M_UART_u8SendStringAsynch+0x8>
    197c:	0f 92       	push	r0
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	9b 83       	std	Y+3, r25	; 0x03
    1984:	8a 83       	std	Y+2, r24	; 0x02
    1986:	7d 83       	std	Y+5, r23	; 0x05
    1988:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	89 83       	std	Y+1, r24	; 0x01

	if (UART_u8_UARTState == IDLE)
    198e:	80 91 5a 02 	lds	r24, 0x025A
    1992:	88 23       	and	r24, r24
    1994:	a9 f5       	brne	.+106    	; 0x1a00 <M_UART_u8SendStringAsynch+0x8c>
	{

		if ((Copy_Pu8String != NULL) && (AppCallBackFunction != NULL))
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	9b 81       	ldd	r25, Y+3	; 0x03
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	79 f1       	breq	.+94     	; 0x19fc <M_UART_u8SendStringAsynch+0x88>
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	9d 81       	ldd	r25, Y+5	; 0x05
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	59 f1       	breq	.+86     	; 0x19fc <M_UART_u8SendStringAsynch+0x88>
		{
			/* UART is Busy*/
			UART_u8_UARTState = BUSY;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	80 93 5a 02 	sts	0x025A, r24

			/* Assign the string to the string buffer */
			UART_Pu8sendStringBuffer = Copy_Pu8String ;
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	9b 81       	ldd	r25, Y+3	; 0x03
    19b0:	90 93 5c 02 	sts	0x025C, r25
    19b4:	80 93 5b 02 	sts	0x025B, r24


			/* Assign the call back function */
			UART_PvoidCallBackFunction = AppCallBackFunction ;
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	90 93 61 02 	sts	0x0261, r25
    19c0:	80 93 60 02 	sts	0x0260, r24


			/* send the first Bit */
			UART_u8_UDR_REG = UART_Pu8sendStringBuffer[UART_u8StringIterrator];
    19c4:	ac e2       	ldi	r26, 0x2C	; 44
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	20 91 5b 02 	lds	r18, 0x025B
    19cc:	30 91 5c 02 	lds	r19, 0x025C
    19d0:	80 91 5f 02 	lds	r24, 0x025F
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	f9 01       	movw	r30, r18
    19da:	e8 0f       	add	r30, r24
    19dc:	f9 1f       	adc	r31, r25
    19de:	80 81       	ld	r24, Z
    19e0:	8c 93       	st	X, r24
			UART_u8StringIterrator ++;
    19e2:	80 91 5f 02 	lds	r24, 0x025F
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	80 93 5f 02 	sts	0x025F, r24

			/* Enable the Transmit complete interrupt  */
			SET_BIT(UART_u8_UCSRB_REG,UCSRB_TXCIE);
    19ec:	aa e2       	ldi	r26, 0x2A	; 42
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ea e2       	ldi	r30, 0x2A	; 42
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 64       	ori	r24, 0x40	; 64
    19f8:	8c 93       	st	X, r24
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <M_UART_u8SendStringAsynch+0x90>

		}
		else
		{
			Local_u8ErrorState =STD_TYPES_NOK;
    19fc:	19 82       	std	Y+1, r1	; 0x01
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <M_UART_u8SendStringAsynch+0x90>
		}
	}
	else
	{
		Local_u8ErrorState = FUNCTION_BUSY ;
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <M_UART_u8RecieveBufferSynch>:
 * 				=> Copy_u8StringIterator
 * return     : function error State
 */

u8 M_UART_u8RecieveBufferSynch (u8 * Copy_Pu8String , u8 Copy_u8StringIterator)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <M_UART_u8RecieveBufferSynch+0x6>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <M_UART_u8RecieveBufferSynch+0x8>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <M_UART_u8RecieveBufferSynch+0xa>
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StringIterator =0;
    1a2e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_Pu8String != NULL)
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	c1 f0       	breq	.+48     	; 0x1a68 <M_UART_u8RecieveBufferSynch+0x52>
    1a38:	12 c0       	rjmp	.+36     	; 0x1a5e <M_UART_u8RecieveBufferSynch+0x48>
	{

		while (Local_u8StringIterator < Copy_u8StringIterator)
		{
			if (M_UART_u8_Recievecharacter(&Copy_Pu8String[Local_u8StringIterator]) == STD_TYPES_OK)
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	82 0f       	add	r24, r18
    1a46:	93 1f       	adc	r25, r19
    1a48:	0e 94 4f 0c 	call	0x189e	; 0x189e <M_UART_u8_Recievecharacter>
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	21 f4       	brne	.+8      	; 0x1a58 <M_UART_u8RecieveBufferSynch+0x42>
			{
				Local_u8StringIterator++;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	8f 5f       	subi	r24, 0xFF	; 255
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	03 c0       	rjmp	.+6      	; 0x1a5e <M_UART_u8RecieveBufferSynch+0x48>
			}
			else
			{
				return Local_u8ErrorState;
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	8e 83       	std	Y+6, r24	; 0x06
    1a5c:	08 c0       	rjmp	.+16     	; 0x1a6e <M_UART_u8RecieveBufferSynch+0x58>
	u8 Local_u8StringIterator =0;

	if (Copy_Pu8String != NULL)
	{

		while (Local_u8StringIterator < Copy_u8StringIterator)
    1a5e:	99 81       	ldd	r25, Y+1	; 0x01
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	98 17       	cp	r25, r24
    1a64:	50 f3       	brcs	.-44     	; 0x1a3a <M_UART_u8RecieveBufferSynch+0x24>
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <M_UART_u8RecieveBufferSynch+0x54>


	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1a68:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	8e 83       	std	Y+6, r24	; 0x06
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06



}
    1a70:	26 96       	adiw	r28, 0x06	; 6
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <M_UART_u8RecieveBufferASynch>:
 * 				=>AppCallBackFunction
 * return     : function error State
 */

u8 M_UART_u8RecieveBufferASynch (u8 * Copy_Pu8String , u8 Copy_u8StringSize , void (* AppCallBackFunction) (void))
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <M_UART_u8RecieveBufferASynch+0x6>
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <M_UART_u8RecieveBufferASynch+0x8>
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <M_UART_u8RecieveBufferASynch+0xa>
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	9b 83       	std	Y+3, r25	; 0x03
    1a92:	8a 83       	std	Y+2, r24	; 0x02
    1a94:	6c 83       	std	Y+4, r22	; 0x04
    1a96:	5e 83       	std	Y+6, r21	; 0x06
    1a98:	4d 83       	std	Y+5, r20	; 0x05
	u8 Loca_u8ErrorState = STD_TYPES_OK;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	89 83       	std	Y+1, r24	; 0x01

	if (UART_u8_UARTState == IDLE)
    1a9e:	80 91 5a 02 	lds	r24, 0x025A
    1aa2:	88 23       	and	r24, r24
    1aa4:	31 f5       	brne	.+76     	; 0x1af2 <M_UART_u8RecieveBufferASynch+0x70>
	{
		if ( (Copy_Pu8String != NULL ) && (AppCallBackFunction != NULL ))
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	01 f1       	breq	.+64     	; 0x1aee <M_UART_u8RecieveBufferASynch+0x6c>
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	e1 f0       	breq	.+56     	; 0x1aee <M_UART_u8RecieveBufferASynch+0x6c>
		{
			/* UART is Busy */
			UART_u8_UARTState = BUSY;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 5a 02 	sts	0x025A, r24

			/*Assign the Received pointer  */
			UART_Pu8sendReceiveBuffer = Copy_Pu8String;
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	90 93 5e 02 	sts	0x025E, r25
    1ac4:	80 93 5d 02 	sts	0x025D, r24

			/* Assign the Call back function */
			UART_PvoidCallBackFunction = AppCallBackFunction ;
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	90 93 61 02 	sts	0x0261, r25
    1ad0:	80 93 60 02 	sts	0x0260, r24

			/* Assign the buffer Size */
			UART_u8BufferSize = Copy_u8StringSize ;
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	80 93 62 02 	sts	0x0262, r24

			/* set the index of the first element */
			UART_u8StringIterrator = 0 ;
    1ada:	10 92 5f 02 	sts	0x025F, r1

			/* Enable the RX completer interrupt */
			SET_BIT(UART_u8_UCSRB_REG,UCSRB_RXCIE);
    1ade:	aa e2       	ldi	r26, 0x2A	; 42
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	ea e2       	ldi	r30, 0x2A	; 42
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 68       	ori	r24, 0x80	; 128
    1aea:	8c 93       	st	X, r24
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <M_UART_u8RecieveBufferASynch+0x74>

		}
		else
		{
			Loca_u8ErrorState = STD_TYPES_NOK;
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <M_UART_u8RecieveBufferASynch+0x74>

	}

	else
	{
		Loca_u8ErrorState = FUNCTION_BUSY ;
    1af2:	83 e0       	ldi	r24, 0x03	; 3
    1af4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loca_u8ErrorState;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01

}
    1af8:	26 96       	adiw	r28, 0x06	; 6
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <__vector_15>:


/* ISR of TX complete */
void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    1b0a:	1f 92       	push	r1
    1b0c:	0f 92       	push	r0
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	0f 92       	push	r0
    1b12:	11 24       	eor	r1, r1
    1b14:	2f 93       	push	r18
    1b16:	3f 93       	push	r19
    1b18:	4f 93       	push	r20
    1b1a:	5f 93       	push	r21
    1b1c:	6f 93       	push	r22
    1b1e:	7f 93       	push	r23
    1b20:	8f 93       	push	r24
    1b22:	9f 93       	push	r25
    1b24:	af 93       	push	r26
    1b26:	bf 93       	push	r27
    1b28:	ef 93       	push	r30
    1b2a:	ff 93       	push	r31
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62

	if ( (UART_Pu8sendStringBuffer[UART_u8StringIterrator]) != '\0')
    1b34:	20 91 5b 02 	lds	r18, 0x025B
    1b38:	30 91 5c 02 	lds	r19, 0x025C
    1b3c:	80 91 5f 02 	lds	r24, 0x025F
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	f9 01       	movw	r30, r18
    1b46:	e8 0f       	add	r30, r24
    1b48:	f9 1f       	adc	r31, r25
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 23       	and	r24, r24
    1b4e:	a9 f0       	breq	.+42     	; 0x1b7a <__vector_15+0x70>
	{
		UART_u8_UDR_REG = UART_Pu8sendStringBuffer[UART_u8StringIterrator];
    1b50:	ac e2       	ldi	r26, 0x2C	; 44
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	20 91 5b 02 	lds	r18, 0x025B
    1b58:	30 91 5c 02 	lds	r19, 0x025C
    1b5c:	80 91 5f 02 	lds	r24, 0x025F
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	f9 01       	movw	r30, r18
    1b66:	e8 0f       	add	r30, r24
    1b68:	f9 1f       	adc	r31, r25
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8c 93       	st	X, r24
		UART_u8StringIterrator++;
    1b6e:	80 91 5f 02 	lds	r24, 0x025F
    1b72:	8f 5f       	subi	r24, 0xFF	; 255
    1b74:	80 93 5f 02 	sts	0x025F, r24
    1b78:	10 c0       	rjmp	.+32     	; 0x1b9a <__vector_15+0x90>
	}
	else
	{

		/* Assign the String Iterator to zero*/
		UART_u8StringIterrator = 0;
    1b7a:	10 92 5f 02 	sts	0x025F, r1

		/* Back the state to IDLE*/
		UART_u8_UARTState  = IDLE;
    1b7e:	10 92 5a 02 	sts	0x025A, r1

		/* Call the application function */
		UART_PvoidCallBackFunction();
    1b82:	e0 91 60 02 	lds	r30, 0x0260
    1b86:	f0 91 61 02 	lds	r31, 0x0261
    1b8a:	09 95       	icall

		/* Disable the TX complete interrupt */
		CLR_BIT(UART_u8_UCSRB_REG,UCSRB_TXCIE);
    1b8c:	aa e2       	ldi	r26, 0x2A	; 42
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	ea e2       	ldi	r30, 0x2A	; 42
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8f 7b       	andi	r24, 0xBF	; 191
    1b98:	8c 93       	st	X, r24
	}

}
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <__vector_13>:

/* ISR of RX complete */
void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	2f 93       	push	r18
    1bcc:	3f 93       	push	r19
    1bce:	4f 93       	push	r20
    1bd0:	5f 93       	push	r21
    1bd2:	6f 93       	push	r22
    1bd4:	7f 93       	push	r23
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	af 93       	push	r26
    1bdc:	bf 93       	push	r27
    1bde:	ef 93       	push	r30
    1be0:	ff 93       	push	r31
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	/* receive the Next character  */
	 UART_Pu8sendReceiveBuffer[UART_u8StringIterrator]= UART_u8_UDR_REG;
    1bea:	20 91 5d 02 	lds	r18, 0x025D
    1bee:	30 91 5e 02 	lds	r19, 0x025E
    1bf2:	80 91 5f 02 	lds	r24, 0x025F
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	d9 01       	movw	r26, r18
    1bfc:	a8 0f       	add	r26, r24
    1bfe:	b9 1f       	adc	r27, r25
    1c00:	ec e2       	ldi	r30, 0x2C	; 44
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8c 93       	st	X, r24

	 /* increment the string iterator */
	 UART_u8StringIterrator++;
    1c08:	80 91 5f 02 	lds	r24, 0x025F
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	80 93 5f 02 	sts	0x025F, r24

	 /* check if buffer size */
	 if (UART_u8StringIterrator >= UART_u8BufferSize)
    1c12:	90 91 5f 02 	lds	r25, 0x025F
    1c16:	80 91 62 02 	lds	r24, 0x0262
    1c1a:	98 17       	cp	r25, r24
    1c1c:	80 f0       	brcs	.+32     	; 0x1c3e <__vector_13+0x7e>
	 {
			/* UART is Available */
			UART_u8_UARTState = IDLE;
    1c1e:	10 92 5a 02 	sts	0x025A, r1

			/* Assign the string iterator with zero for the next operations */
			UART_u8StringIterrator = 0 ;
    1c22:	10 92 5f 02 	sts	0x025F, r1

			/* Call the Application function */
			UART_PvoidCallBackFunction();
    1c26:	e0 91 60 02 	lds	r30, 0x0260
    1c2a:	f0 91 61 02 	lds	r31, 0x0261
    1c2e:	09 95       	icall

			/* Disable the RX complete interrupt */
			CLR_BIT(UART_u8_UCSRB_REG,UCSRB_RXCIE);
    1c30:	aa e2       	ldi	r26, 0x2A	; 42
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	ea e2       	ldi	r30, 0x2A	; 42
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8f 77       	andi	r24, 0x7F	; 127
    1c3c:	8c 93       	st	X, r24
	 }

}
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <H_LCD_void_LCD_Init>:
 *  Description : This Function Initialize the LCD Pins [ 4 bits mode - 8 bits mode ]
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_LCD_Init (void)
{
    1c64:	0f 93       	push	r16
    1c66:	1f 93       	push	r17
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	c4 55       	subi	r28, 0x54	; 84
    1c72:	d0 40       	sbci	r29, 0x00	; 0
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ef 5a       	subi	r30, 0xAF	; 175
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a8 e4       	ldi	r26, 0x48	; 72
    1c8a:	b2 e4       	ldi	r27, 0x42	; 66
    1c8c:	80 83       	st	Z, r24
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	a2 83       	std	Z+2, r26	; 0x02
    1c92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	8e 01       	movw	r16, r28
    1c96:	03 5b       	subi	r16, 0xB3	; 179
    1c98:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ef 5a       	subi	r30, 0xAF	; 175
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a e7       	ldi	r20, 0x7A	; 122
    1cae:	55 e4       	ldi	r21, 0x45	; 69
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	f8 01       	movw	r30, r16
    1cba:	80 83       	st	Z, r24
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	a2 83       	std	Z+2, r26	; 0x02
    1cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e3 5b       	subi	r30, 0xB3	; 179
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	82 81       	ldd	r24, Z+2	; 0x02
    1cce:	93 81       	ldd	r25, Z+3	; 0x03
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e8       	ldi	r20, 0x80	; 128
    1cd6:	5f e3       	ldi	r21, 0x3F	; 63
    1cd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cdc:	88 23       	and	r24, r24
    1cde:	44 f4       	brge	.+16     	; 0x1cf0 <H_LCD_void_LCD_Init+0x8c>
		__ticks = 1;
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e5 5b       	subi	r30, 0xB5	; 181
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	64 c0       	rjmp	.+200    	; 0x1db8 <H_LCD_void_LCD_Init+0x154>
	else if (__tmp > 65535)
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e3 5b       	subi	r30, 0xB3	; 179
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	3f ef       	ldi	r19, 0xFF	; 255
    1d02:	4f e7       	ldi	r20, 0x7F	; 127
    1d04:	57 e4       	ldi	r21, 0x47	; 71
    1d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	0c f0       	brlt	.+2      	; 0x1d10 <H_LCD_void_LCD_Init+0xac>
    1d0e:	43 c0       	rjmp	.+134    	; 0x1d96 <H_LCD_void_LCD_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d10:	fe 01       	movw	r30, r28
    1d12:	ef 5a       	subi	r30, 0xAF	; 175
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	93 81       	ldd	r25, Z+3	; 0x03
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8e 01       	movw	r16, r28
    1d30:	05 5b       	subi	r16, 0xB5	; 181
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	f8 01       	movw	r30, r16
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	80 83       	st	Z, r24
    1d46:	1f c0       	rjmp	.+62     	; 0x1d86 <H_LCD_void_LCD_Init+0x122>
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e7 5b       	subi	r30, 0xB7	; 183
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 e9       	ldi	r24, 0x90	; 144
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d56:	fe 01       	movw	r30, r28
    1d58:	e7 5b       	subi	r30, 0xB7	; 183
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <H_LCD_void_LCD_Init+0xfc>
    1d64:	fe 01       	movw	r30, r28
    1d66:	e7 5b       	subi	r30, 0xB7	; 183
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	de 01       	movw	r26, r28
    1d70:	a5 5b       	subi	r26, 0xB5	; 181
    1d72:	bf 4f       	sbci	r27, 0xFF	; 255
    1d74:	fe 01       	movw	r30, r28
    1d76:	e5 5b       	subi	r30, 0xB5	; 181
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	80 81       	ld	r24, Z
    1d7c:	91 81       	ldd	r25, Z+1	; 0x01
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	11 96       	adiw	r26, 0x01	; 1
    1d82:	9c 93       	st	X, r25
    1d84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d86:	fe 01       	movw	r30, r28
    1d88:	e5 5b       	subi	r30, 0xB5	; 181
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	91 81       	ldd	r25, Z+1	; 0x01
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	d1 f6       	brne	.-76     	; 0x1d48 <H_LCD_void_LCD_Init+0xe4>
    1d94:	27 c0       	rjmp	.+78     	; 0x1de4 <H_LCD_void_LCD_Init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	8e 01       	movw	r16, r28
    1d98:	05 5b       	subi	r16, 0xB5	; 181
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e3 5b       	subi	r30, 0xB3	; 179
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	f8 01       	movw	r30, r16
    1db4:	91 83       	std	Z+1, r25	; 0x01
    1db6:	80 83       	st	Z, r24
    1db8:	de 01       	movw	r26, r28
    1dba:	a9 5b       	subi	r26, 0xB9	; 185
    1dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e5 5b       	subi	r30, 0xB5	; 181
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	8d 93       	st	X+, r24
    1dca:	9c 93       	st	X, r25
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e9 5b       	subi	r30, 0xB9	; 185
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	f1 f7       	brne	.-4      	; 0x1dd6 <H_LCD_void_LCD_Init+0x172>
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e9 5b       	subi	r30, 0xB9	; 185
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	91 83       	std	Z+1, r25	; 0x01
    1de2:	80 83       	st	Z, r24
	/* In 8 bits mode the PINs must be in the same port*/
	M_DIO_u8_SetPortDirection(LCD_u8_Data_PORT,DIO_u8_PORT_DIRECTION_OUTPUT);

#elif LCD_u8_MODE == LCD_u8_4_BIT_MODE                 /* check the MODE of the LCD */
	/* In 4 bits mode the pins can be from any port */
	M_DIO_u8_SetPinDirection(LCD_u8_D7_PORT,LCD_u8_D7_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	64 e0       	ldi	r22, 0x04	; 4
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 8f 06 	call	0xd1e	; 0xd1e <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_D6_PORT,LCD_u8_D6_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	62 e0       	ldi	r22, 0x02	; 2
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_D5_PORT,LCD_u8_D5_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 8f 06 	call	0xd1e	; 0xd1e <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_D4_PORT,LCD_u8_D4_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 8f 06 	call	0xd1e	; 0xd1e <M_DIO_u8_SetPinDirection>

#endif
	/* 2-  Set the direction of LCD control Pins*/
	M_DIO_u8_SetPinDirection(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	63 e0       	ldi	r22, 0x03	; 3
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 8f 06 	call	0xd1e	; 0xd1e <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	62 e0       	ldi	r22, 0x02	; 2
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 8f 06 	call	0xd1e	; 0xd1e <M_DIO_u8_SetPinDirection>

	/* 3- LCD initialization sequence */
	H_LCD_void_SendCommand(LCD_u8_LCD_HOME_CMD);  				 /* 3i- Function set Send command */
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <H_LCD_void_SendCommand>
    1e30:	fe 01       	movw	r30, r28
    1e32:	ed 5b       	subi	r30, 0xBD	; 189
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a0 ef       	ldi	r26, 0xF0	; 240
    1e3c:	b1 e4       	ldi	r27, 0x41	; 65
    1e3e:	80 83       	st	Z, r24
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	a2 83       	std	Z+2, r26	; 0x02
    1e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e46:	8e 01       	movw	r16, r28
    1e48:	01 5c       	subi	r16, 0xC1	; 193
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ed 5b       	subi	r30, 0xBD	; 189
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a e7       	ldi	r20, 0x7A	; 122
    1e60:	55 e4       	ldi	r21, 0x45	; 69
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e74:	fe 01       	movw	r30, r28
    1e76:	ff 96       	adiw	r30, 0x3f	; 63
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <H_LCD_void_LCD_Init+0x236>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e af       	std	Y+62, r25	; 0x3e
    1e96:	8d af       	std	Y+61, r24	; 0x3d
    1e98:	46 c0       	rjmp	.+140    	; 0x1f26 <H_LCD_void_LCD_Init+0x2c2>
	else if (__tmp > 65535)
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ff 96       	adiw	r30, 0x3f	; 63
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	64 f5       	brge	.+88     	; 0x1f0e <H_LCD_void_LCD_Init+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ed 5b       	subi	r30, 0xBD	; 189
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e af       	std	Y+62, r25	; 0x3e
    1ee2:	8d af       	std	Y+61, r24	; 0x3d
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <H_LCD_void_LCD_Init+0x2a0>
    1ee6:	80 e9       	ldi	r24, 0x90	; 144
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	9c af       	std	Y+60, r25	; 0x3c
    1eec:	8b af       	std	Y+59, r24	; 0x3b
    1eee:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ef0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <H_LCD_void_LCD_Init+0x28e>
    1ef6:	9c af       	std	Y+60, r25	; 0x3c
    1ef8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1efc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	9e af       	std	Y+62, r25	; 0x3e
    1f02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f04:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f06:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <H_LCD_void_LCD_Init+0x282>
    1f0c:	16 c0       	rjmp	.+44     	; 0x1f3a <H_LCD_void_LCD_Init+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ff 96       	adiw	r30, 0x3f	; 63
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e af       	std	Y+62, r25	; 0x3e
    1f24:	8d af       	std	Y+61, r24	; 0x3d
    1f26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f2a:	9a af       	std	Y+58, r25	; 0x3a
    1f2c:	89 af       	std	Y+57, r24	; 0x39
    1f2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f30:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <H_LCD_void_LCD_Init+0x2ce>
    1f36:	9a af       	std	Y+58, r25	; 0x3a
    1f38:	89 af       	std	Y+57, r24	; 0x39


#if LCD_u8_Mode == LCD_u8_8_BIT_MODE				              /* 3ii- choose the command mode */
	H_LCD_void_SendCommand(LCD_u8_EIGHT_BITS_CMD);
#elif LCD_u8_MODE == LCD_u8_4_BIT_MODE
	H_LCD_void_SendCommand(LCD_u8_FOUR_BITS_CMD);
    1f3a:	88 e2       	ldi	r24, 0x28	; 40
    1f3c:	0e 94 7d 11 	call	0x22fa	; 0x22fa <H_LCD_void_SendCommand>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e8       	ldi	r26, 0x80	; 128
    1f46:	bf e3       	ldi	r27, 0x3F	; 63
    1f48:	8d ab       	std	Y+53, r24	; 0x35
    1f4a:	9e ab       	std	Y+54, r25	; 0x36
    1f4c:	af ab       	std	Y+55, r26	; 0x37
    1f4e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	6d a9       	ldd	r22, Y+53	; 0x35
    1f52:	7e a9       	ldd	r23, Y+54	; 0x36
    1f54:	8f a9       	ldd	r24, Y+55	; 0x37
    1f56:	98 ad       	ldd	r25, Y+56	; 0x38
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a e7       	ldi	r20, 0x7A	; 122
    1f5e:	55 e4       	ldi	r21, 0x45	; 69
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	89 ab       	std	Y+49, r24	; 0x31
    1f6a:	9a ab       	std	Y+50, r25	; 0x32
    1f6c:	ab ab       	std	Y+51, r26	; 0x33
    1f6e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f70:	69 a9       	ldd	r22, Y+49	; 0x31
    1f72:	7a a9       	ldd	r23, Y+50	; 0x32
    1f74:	8b a9       	ldd	r24, Y+51	; 0x33
    1f76:	9c a9       	ldd	r25, Y+52	; 0x34
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <H_LCD_void_LCD_Init+0x32e>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	98 ab       	std	Y+48, r25	; 0x30
    1f8e:	8f a7       	std	Y+47, r24	; 0x2f
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <H_LCD_void_LCD_Init+0x3ac>
	else if (__tmp > 65535)
    1f92:	69 a9       	ldd	r22, Y+49	; 0x31
    1f94:	7a a9       	ldd	r23, Y+50	; 0x32
    1f96:	8b a9       	ldd	r24, Y+51	; 0x33
    1f98:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <H_LCD_void_LCD_Init+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	6d a9       	ldd	r22, Y+53	; 0x35
    1fac:	7e a9       	ldd	r23, Y+54	; 0x36
    1fae:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	98 ab       	std	Y+48, r25	; 0x30
    1fd0:	8f a7       	std	Y+47, r24	; 0x2f
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <H_LCD_void_LCD_Init+0x38e>
    1fd4:	80 e9       	ldi	r24, 0x90	; 144
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	9e a7       	std	Y+46, r25	; 0x2e
    1fda:	8d a7       	std	Y+45, r24	; 0x2d
    1fdc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fde:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <H_LCD_void_LCD_Init+0x37c>
    1fe4:	9e a7       	std	Y+46, r25	; 0x2e
    1fe6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fea:	98 a9       	ldd	r25, Y+48	; 0x30
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	98 ab       	std	Y+48, r25	; 0x30
    1ff0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <H_LCD_void_LCD_Init+0x370>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <H_LCD_void_LCD_Init+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffe:	7a a9       	ldd	r23, Y+50	; 0x32
    2000:	8b a9       	ldd	r24, Y+51	; 0x33
    2002:	9c a9       	ldd	r25, Y+52	; 0x34
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	98 ab       	std	Y+48, r25	; 0x30
    200e:	8f a7       	std	Y+47, r24	; 0x2f
    2010:	8f a5       	ldd	r24, Y+47	; 0x2f
    2012:	98 a9       	ldd	r25, Y+48	; 0x30
    2014:	9c a7       	std	Y+44, r25	; 0x2c
    2016:	8b a7       	std	Y+43, r24	; 0x2b
    2018:	8b a5       	ldd	r24, Y+43	; 0x2b
    201a:	9c a5       	ldd	r25, Y+44	; 0x2c
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <H_LCD_void_LCD_Init+0x3b8>
    2020:	9c a7       	std	Y+44, r25	; 0x2c
    2022:	8b a7       	std	Y+43, r24	; 0x2b
#endif
	_delay_ms(1);


	H_LCD_void_SendCommand(LCD_u8_DISPLAY__CURSOR_BLINK_ON_CMD); /* 3iii- Display on / off control command */
    2024:	8f e0       	ldi	r24, 0x0F	; 15
    2026:	0e 94 7d 11 	call	0x22fa	; 0x22fa <H_LCD_void_SendCommand>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e8       	ldi	r26, 0x80	; 128
    2030:	bf e3       	ldi	r27, 0x3F	; 63
    2032:	8f a3       	std	Y+39, r24	; 0x27
    2034:	98 a7       	std	Y+40, r25	; 0x28
    2036:	a9 a7       	std	Y+41, r26	; 0x29
    2038:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6f a1       	ldd	r22, Y+39	; 0x27
    203c:	78 a5       	ldd	r23, Y+40	; 0x28
    203e:	89 a5       	ldd	r24, Y+41	; 0x29
    2040:	9a a5       	ldd	r25, Y+42	; 0x2a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a e7       	ldi	r20, 0x7A	; 122
    2048:	55 e4       	ldi	r21, 0x45	; 69
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8b a3       	std	Y+35, r24	; 0x23
    2054:	9c a3       	std	Y+36, r25	; 0x24
    2056:	ad a3       	std	Y+37, r26	; 0x25
    2058:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    205a:	6b a1       	ldd	r22, Y+35	; 0x23
    205c:	7c a1       	ldd	r23, Y+36	; 0x24
    205e:	8d a1       	ldd	r24, Y+37	; 0x25
    2060:	9e a1       	ldd	r25, Y+38	; 0x26
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <H_LCD_void_LCD_Init+0x418>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9a a3       	std	Y+34, r25	; 0x22
    2078:	89 a3       	std	Y+33, r24	; 0x21
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <H_LCD_void_LCD_Init+0x496>
	else if (__tmp > 65535)
    207c:	6b a1       	ldd	r22, Y+35	; 0x23
    207e:	7c a1       	ldd	r23, Y+36	; 0x24
    2080:	8d a1       	ldd	r24, Y+37	; 0x25
    2082:	9e a1       	ldd	r25, Y+38	; 0x26
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <H_LCD_void_LCD_Init+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6f a1       	ldd	r22, Y+39	; 0x27
    2096:	78 a5       	ldd	r23, Y+40	; 0x28
    2098:	89 a5       	ldd	r24, Y+41	; 0x29
    209a:	9a a5       	ldd	r25, Y+42	; 0x2a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9a a3       	std	Y+34, r25	; 0x22
    20ba:	89 a3       	std	Y+33, r24	; 0x21
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <H_LCD_void_LCD_Init+0x478>
    20be:	80 e9       	ldi	r24, 0x90	; 144
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	98 a3       	std	Y+32, r25	; 0x20
    20c4:	8f 8f       	std	Y+31, r24	; 0x1f
    20c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20c8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <H_LCD_void_LCD_Init+0x466>
    20ce:	98 a3       	std	Y+32, r25	; 0x20
    20d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	89 a1       	ldd	r24, Y+33	; 0x21
    20d4:	9a a1       	ldd	r25, Y+34	; 0x22
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	89 a1       	ldd	r24, Y+33	; 0x21
    20de:	9a a1       	ldd	r25, Y+34	; 0x22
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <H_LCD_void_LCD_Init+0x45a>
    20e4:	14 c0       	rjmp	.+40     	; 0x210e <H_LCD_void_LCD_Init+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	6b a1       	ldd	r22, Y+35	; 0x23
    20e8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ea:	8d a1       	ldd	r24, Y+37	; 0x25
    20ec:	9e a1       	ldd	r25, Y+38	; 0x26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9a a3       	std	Y+34, r25	; 0x22
    20f8:	89 a3       	std	Y+33, r24	; 0x21
    20fa:	89 a1       	ldd	r24, Y+33	; 0x21
    20fc:	9a a1       	ldd	r25, Y+34	; 0x22
    20fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2100:	8d 8f       	std	Y+29, r24	; 0x1d
    2102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2104:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <H_LCD_void_LCD_Init+0x4a2>
    210a:	9e 8f       	std	Y+30, r25	; 0x1e
    210c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);


	H_LCD_void_SendCommand(LCD_u8_DISPLAY_ClEAR_CMD);			/* 3v-  Display clear command */
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	0e 94 7d 11 	call	0x22fa	; 0x22fa <H_LCD_void_SendCommand>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e0       	ldi	r26, 0x00	; 0
    211a:	b0 e4       	ldi	r27, 0x40	; 64
    211c:	89 8f       	std	Y+25, r24	; 0x19
    211e:	9a 8f       	std	Y+26, r25	; 0x1a
    2120:	ab 8f       	std	Y+27, r26	; 0x1b
    2122:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	69 8d       	ldd	r22, Y+25	; 0x19
    2126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	4a e7       	ldi	r20, 0x7A	; 122
    2132:	55 e4       	ldi	r21, 0x45	; 69
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8d 8b       	std	Y+21, r24	; 0x15
    213e:	9e 8b       	std	Y+22, r25	; 0x16
    2140:	af 8b       	std	Y+23, r26	; 0x17
    2142:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2144:	6d 89       	ldd	r22, Y+21	; 0x15
    2146:	7e 89       	ldd	r23, Y+22	; 0x16
    2148:	8f 89       	ldd	r24, Y+23	; 0x17
    214a:	98 8d       	ldd	r25, Y+24	; 0x18
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <H_LCD_void_LCD_Init+0x502>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	8b 8b       	std	Y+19, r24	; 0x13
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <H_LCD_void_LCD_Init+0x580>
	else if (__tmp > 65535)
    2166:	6d 89       	ldd	r22, Y+21	; 0x15
    2168:	7e 89       	ldd	r23, Y+22	; 0x16
    216a:	8f 89       	ldd	r24, Y+23	; 0x17
    216c:	98 8d       	ldd	r25, Y+24	; 0x18
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	4c f5       	brge	.+82     	; 0x21d0 <H_LCD_void_LCD_Init+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217e:	69 8d       	ldd	r22, Y+25	; 0x19
    2180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
    21a6:	0f c0       	rjmp	.+30     	; 0x21c6 <H_LCD_void_LCD_Init+0x562>
    21a8:	80 e9       	ldi	r24, 0x90	; 144
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	9a 8b       	std	Y+18, r25	; 0x12
    21ae:	89 8b       	std	Y+17, r24	; 0x11
    21b0:	89 89       	ldd	r24, Y+17	; 0x11
    21b2:	9a 89       	ldd	r25, Y+18	; 0x12
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <H_LCD_void_LCD_Init+0x550>
    21b8:	9a 8b       	std	Y+18, r25	; 0x12
    21ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21bc:	8b 89       	ldd	r24, Y+19	; 0x13
    21be:	9c 89       	ldd	r25, Y+20	; 0x14
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9c 8b       	std	Y+20, r25	; 0x14
    21c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	8b 89       	ldd	r24, Y+19	; 0x13
    21c8:	9c 89       	ldd	r25, Y+20	; 0x14
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <H_LCD_void_LCD_Init+0x544>
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <H_LCD_void_LCD_Init+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	6d 89       	ldd	r22, Y+21	; 0x15
    21d2:	7e 89       	ldd	r23, Y+22	; 0x16
    21d4:	8f 89       	ldd	r24, Y+23	; 0x17
    21d6:	98 8d       	ldd	r25, Y+24	; 0x18
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9c 8b       	std	Y+20, r25	; 0x14
    21e2:	8b 8b       	std	Y+19, r24	; 0x13
    21e4:	8b 89       	ldd	r24, Y+19	; 0x13
    21e6:	9c 89       	ldd	r25, Y+20	; 0x14
    21e8:	98 8b       	std	Y+16, r25	; 0x10
    21ea:	8f 87       	std	Y+15, r24	; 0x0f
    21ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ee:	98 89       	ldd	r25, Y+16	; 0x10
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <H_LCD_void_LCD_Init+0x58c>
    21f4:	98 8b       	std	Y+16, r25	; 0x10
    21f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);


	H_LCD_void_SendCommand(LCD_u8_ENTRT_MODE_CMD);				/* 3iv-  Entry mode command */
    21f8:	86 e0       	ldi	r24, 0x06	; 6
    21fa:	0e 94 7d 11 	call	0x22fa	; 0x22fa <H_LCD_void_SendCommand>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e0       	ldi	r26, 0x00	; 0
    2204:	b0 e4       	ldi	r27, 0x40	; 64
    2206:	8b 87       	std	Y+11, r24	; 0x0b
    2208:	9c 87       	std	Y+12, r25	; 0x0c
    220a:	ad 87       	std	Y+13, r26	; 0x0d
    220c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2210:	7c 85       	ldd	r23, Y+12	; 0x0c
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	9e 85       	ldd	r25, Y+14	; 0x0e
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	55 e4       	ldi	r21, 0x45	; 69
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8f 83       	std	Y+7, r24	; 0x07
    2228:	98 87       	std	Y+8, r25	; 0x08
    222a:	a9 87       	std	Y+9, r26	; 0x09
    222c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <H_LCD_void_LCD_Init+0x5ec>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <H_LCD_void_LCD_Init+0x66a>
	else if (__tmp > 65535)
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <H_LCD_void_LCD_Init+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	6b 85       	ldd	r22, Y+11	; 0x0b
    226a:	7c 85       	ldd	r23, Y+12	; 0x0c
    226c:	8d 85       	ldd	r24, Y+13	; 0x0d
    226e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <H_LCD_void_LCD_Init+0x64c>
    2292:	80 e9       	ldi	r24, 0x90	; 144
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <H_LCD_void_LCD_Init+0x63a>
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <H_LCD_void_LCD_Init+0x62e>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <H_LCD_void_LCD_Init+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <H_LCD_void_LCD_Init+0x676>
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    22e2:	cc 5a       	subi	r28, 0xAC	; 172
    22e4:	df 4f       	sbci	r29, 0xFF	; 255
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret

000022fa <H_LCD_void_SendCommand>:
 *  Description : This Function Send command to LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_SendCommand(u8 Copy_u8Command)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	89 83       	std	Y+1, r24	; 0x01
	/* select command register ( RS = 0)*/
	M_DIO_u8_SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_PIN_VALUE_LOW);
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	63 e0       	ldi	r22, 0x03	; 3
    230a:	40 e0       	ldi	r20, 0x00	; 0
    230c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>

	M_DIO_u8_SetPortValue(LCD_u8_Data_PORT,Copy_u8Command); /* send the command direct to the LCD */
	H_LCD_void_EnableLatch();								/* send latch to LCD */

#elif LCD_u8_MODE == LCD_u8_4_BIT_MODE
	H_LCD_void_4BitHandelCommand(Copy_u8Command);   	/* function Handle the command for 4bits mode*/
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	0e 94 70 13 	call	0x26e0	; 0x26e0 <H_LCD_void_4BitHandelCommand>


#endif


}
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <H_LCD_void_SendChar>:
 *  Description : This Function Send character to LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_SendChar(u8 Copy_u8Data)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	0f 92       	push	r0
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	89 83       	std	Y+1, r24	; 0x01
	/* select Data register ( RS = 1)*/
	M_DIO_u8_SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_PIN_VALUE_HIGH);
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	63 e0       	ldi	r22, 0x03	; 3
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
#if LCD_u8_Mode == LCD_u8_8_BIT_MODE  		      			/* Check the mode of the operation */
	M_DIO_u8_SetPortValue(LCD_u8_Data_PORT,Copy_u8Data);	/* send the command directly to LCD i 8 bit mode */
	H_LCD_void_EnableLatch();								/* falling edge (latch)*/

#elif LCD_u8_MODE == LCD_u8_4_BIT_MODE
	H_LCD_void_4BitHandelCommand(Copy_u8Data);  /* function handle the data for 4bit mode and send it to LCD */
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	0e 94 70 13 	call	0x26e0	; 0x26e0 <H_LCD_void_4BitHandelCommand>

#endif

}
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <H_LCD_void_SendString>:
 *  Description : This Function Send string to LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_SendString (const u8 * Copy_Pu8String)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	00 d0       	rcall	.+0      	; 0x2348 <H_LCD_void_SendString+0x6>
    2348:	0f 92       	push	r0
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	9b 83       	std	Y+3, r25	; 0x03
    2350:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StringIterator = 0; /* string iterator*/
    2352:	19 82       	std	Y+1, r1	; 0x01
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <H_LCD_void_SendString+0x32>
	while (Copy_Pu8String[Local_u8StringIterator] != '\0') /* loop on the string till find the Null character*/
	{
		/* Slice the string into characters and send it character by character*/
		H_LCD_void_SendChar(Copy_Pu8String[Local_u8StringIterator++]); /*Post increment to the string Iterator */
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	9b 81       	ldd	r25, Y+3	; 0x03
    2360:	fc 01       	movw	r30, r24
    2362:	e2 0f       	add	r30, r18
    2364:	f3 1f       	adc	r31, r19
    2366:	90 81       	ld	r25, Z
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	8f 5f       	subi	r24, 0xFF	; 255
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	89 2f       	mov	r24, r25
    2370:	0e 94 8f 11 	call	0x231e	; 0x231e <H_LCD_void_SendChar>
 */

void H_LCD_void_SendString (const u8 * Copy_Pu8String)
{
	u8 Local_u8StringIterator = 0; /* string iterator*/
	while (Copy_Pu8String[Local_u8StringIterator] != '\0') /* loop on the string till find the Null character*/
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	fc 01       	movw	r30, r24
    2380:	e2 0f       	add	r30, r18
    2382:	f3 1f       	adc	r31, r19
    2384:	80 81       	ld	r24, Z
    2386:	88 23       	and	r24, r24
    2388:	31 f7       	brne	.-52     	; 0x2356 <H_LCD_void_SendString+0x14>
	{
		/* Slice the string into characters and send it character by character*/
		H_LCD_void_SendChar(Copy_Pu8String[Local_u8StringIterator++]); /*Post increment to the string Iterator */
	}

}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <H_LCD_void_SendNumber>:
 *  Description : This Function Send Number to LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_SendNumber (s32 Copy_s32Number)
{
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	2f 97       	sbiw	r28, 0x0f	; 15
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	6c 87       	std	Y+12, r22	; 0x0c
    23b0:	7d 87       	std	Y+13, r23	; 0x0d
    23b2:	8e 87       	std	Y+14, r24	; 0x0e
    23b4:	9f 87       	std	Y+15, r25	; 0x0f
	/* Slice the Digits of the Number */
	/* Store every single digit in the array */
	s8 Local_As8NumberDigits[10] = {0};  /*assign the array with initial values = Zeros*/
    23b6:	8a e0       	ldi	r24, 0x0A	; 10
    23b8:	fe 01       	movw	r30, r28
    23ba:	32 96       	adiw	r30, 0x02	; 2
    23bc:	df 01       	movw	r26, r30
    23be:	98 2f       	mov	r25, r24
    23c0:	1d 92       	st	X+, r1
    23c2:	9a 95       	dec	r25
    23c4:	e9 f7       	brne	.-6      	; 0x23c0 <H_LCD_void_SendNumber+0x2a>
	u8 Local_u8Counter =0; 				/*Array counter to count the digits of the number  */
    23c6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_s32Number < 0)				/* check if the Number id negative */
    23c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    23ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    23cc:	ae 85       	ldd	r26, Y+14	; 0x0e
    23ce:	bf 85       	ldd	r27, Y+15	; 0x0f
    23d0:	bb 23       	and	r27, r27
    23d2:	94 f4       	brge	.+36     	; 0x23f8 <H_LCD_void_SendNumber+0x62>
	{
		/* if negative convert to positive */
		Copy_s32Number *= -1 ;
    23d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    23d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    23d8:	ae 85       	ldd	r26, Y+14	; 0x0e
    23da:	bf 85       	ldd	r27, Y+15	; 0x0f
    23dc:	b0 95       	com	r27
    23de:	a0 95       	com	r26
    23e0:	90 95       	com	r25
    23e2:	81 95       	neg	r24
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	af 4f       	sbci	r26, 0xFF	; 255
    23e8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ea:	8c 87       	std	Y+12, r24	; 0x0c
    23ec:	9d 87       	std	Y+13, r25	; 0x0d
    23ee:	ae 87       	std	Y+14, r26	; 0x0e
    23f0:	bf 87       	std	Y+15, r27	; 0x0f
		/* send char 'a' represent the sign (-)*/
		H_LCD_void_SendChar('-');
    23f2:	8d e2       	ldi	r24, 0x2D	; 45
    23f4:	0e 94 8f 11 	call	0x231e	; 0x231e <H_LCD_void_SendChar>
	}

	do
	{
		/*Slice the Last Digit and Store it in the array*/
		Local_As8NumberDigits[Local_u8Counter] = Copy_s32Number % 10;
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	08 2f       	mov	r16, r24
    23fc:	10 e0       	ldi	r17, 0x00	; 0
    23fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2400:	9d 85       	ldd	r25, Y+13	; 0x0d
    2402:	ae 85       	ldd	r26, Y+14	; 0x0e
    2404:	bf 85       	ldd	r27, Y+15	; 0x0f
    2406:	2a e0       	ldi	r18, 0x0A	; 10
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	50 e0       	ldi	r21, 0x00	; 0
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__divmodsi4>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	28 2f       	mov	r18, r24
    241c:	ce 01       	movw	r24, r28
    241e:	02 96       	adiw	r24, 0x02	; 2
    2420:	fc 01       	movw	r30, r24
    2422:	e0 0f       	add	r30, r16
    2424:	f1 1f       	adc	r31, r17
    2426:	20 83       	st	Z, r18
		/*Cut the last digit from the Number */
		Copy_s32Number/= 10;
    2428:	8c 85       	ldd	r24, Y+12	; 0x0c
    242a:	9d 85       	ldd	r25, Y+13	; 0x0d
    242c:	ae 85       	ldd	r26, Y+14	; 0x0e
    242e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2430:	2a e0       	ldi	r18, 0x0A	; 10
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__divmodsi4>
    2440:	da 01       	movw	r26, r20
    2442:	c9 01       	movw	r24, r18
    2444:	8c 87       	std	Y+12, r24	; 0x0c
    2446:	9d 87       	std	Y+13, r25	; 0x0d
    2448:	ae 87       	std	Y+14, r26	; 0x0e
    244a:	bf 87       	std	Y+15, r27	; 0x0f
		/* increment the Digits counter */
		Local_u8Counter++;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	89 83       	std	Y+1, r24	; 0x01
	}
	while (Copy_s32Number != 0); /* check if the rest Digits of the Number */
    2452:	8c 85       	ldd	r24, Y+12	; 0x0c
    2454:	9d 85       	ldd	r25, Y+13	; 0x0d
    2456:	ae 85       	ldd	r26, Y+14	; 0x0e
    2458:	bf 85       	ldd	r27, Y+15	; 0x0f
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	a1 05       	cpc	r26, r1
    245e:	b1 05       	cpc	r27, r1
    2460:	59 f6       	brne	.-106    	; 0x23f8 <H_LCD_void_SendNumber+0x62>
    2462:	0f c0       	rjmp	.+30     	; 0x2482 <H_LCD_void_SendNumber+0xec>

	while (Local_u8Counter > 0)
	{
		/* send the Digits to The LCD in reverse */
		H_LCD_void_SendChar(Local_As8NumberDigits[--Local_u8Counter] + 48 );
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	81 50       	subi	r24, 0x01	; 1
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	ce 01       	movw	r24, r28
    2472:	02 96       	adiw	r24, 0x02	; 2
    2474:	fc 01       	movw	r30, r24
    2476:	e2 0f       	add	r30, r18
    2478:	f3 1f       	adc	r31, r19
    247a:	80 81       	ld	r24, Z
    247c:	80 5d       	subi	r24, 0xD0	; 208
    247e:	0e 94 8f 11 	call	0x231e	; 0x231e <H_LCD_void_SendChar>
		/* increment the Digits counter */
		Local_u8Counter++;
	}
	while (Copy_s32Number != 0); /* check if the rest Digits of the Number */

	while (Local_u8Counter > 0)
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	88 23       	and	r24, r24
    2486:	71 f7       	brne	.-36     	; 0x2464 <H_LCD_void_SendNumber+0xce>
	}



 */
}
    2488:	2f 96       	adiw	r28, 0x0f	; 15
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <H_LCD_void_ClearScreen>:
 *  Description : This Function Clear the LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_ClearScreen (void)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	6c 97       	sbiw	r28, 0x1c	; 28
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	a8 e4       	ldi	r26, 0x48	; 72
    24b8:	b3 e4       	ldi	r27, 0x43	; 67
    24ba:	89 8f       	std	Y+25, r24	; 0x19
    24bc:	9a 8f       	std	Y+26, r25	; 0x1a
    24be:	ab 8f       	std	Y+27, r26	; 0x1b
    24c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c2:	69 8d       	ldd	r22, Y+25	; 0x19
    24c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	4a e7       	ldi	r20, 0x7A	; 122
    24d0:	55 e4       	ldi	r21, 0x45	; 69
    24d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	8d 8b       	std	Y+21, r24	; 0x15
    24dc:	9e 8b       	std	Y+22, r25	; 0x16
    24de:	af 8b       	std	Y+23, r26	; 0x17
    24e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24e2:	6d 89       	ldd	r22, Y+21	; 0x15
    24e4:	7e 89       	ldd	r23, Y+22	; 0x16
    24e6:	8f 89       	ldd	r24, Y+23	; 0x17
    24e8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e8       	ldi	r20, 0x80	; 128
    24f0:	5f e3       	ldi	r21, 0x3F	; 63
    24f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f6:	88 23       	and	r24, r24
    24f8:	2c f4       	brge	.+10     	; 0x2504 <H_LCD_void_ClearScreen+0x66>
		__ticks = 1;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	9c 8b       	std	Y+20, r25	; 0x14
    2500:	8b 8b       	std	Y+19, r24	; 0x13
    2502:	3f c0       	rjmp	.+126    	; 0x2582 <H_LCD_void_ClearScreen+0xe4>
	else if (__tmp > 65535)
    2504:	6d 89       	ldd	r22, Y+21	; 0x15
    2506:	7e 89       	ldd	r23, Y+22	; 0x16
    2508:	8f 89       	ldd	r24, Y+23	; 0x17
    250a:	98 8d       	ldd	r25, Y+24	; 0x18
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	3f ef       	ldi	r19, 0xFF	; 255
    2510:	4f e7       	ldi	r20, 0x7F	; 127
    2512:	57 e4       	ldi	r21, 0x47	; 71
    2514:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2518:	18 16       	cp	r1, r24
    251a:	4c f5       	brge	.+82     	; 0x256e <H_LCD_void_ClearScreen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251c:	69 8d       	ldd	r22, Y+25	; 0x19
    251e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2520:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2522:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e2       	ldi	r20, 0x20	; 32
    252a:	51 e4       	ldi	r21, 0x41	; 65
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	bc 01       	movw	r22, r24
    2536:	cd 01       	movw	r24, r26
    2538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9c 8b       	std	Y+20, r25	; 0x14
    2542:	8b 8b       	std	Y+19, r24	; 0x13
    2544:	0f c0       	rjmp	.+30     	; 0x2564 <H_LCD_void_ClearScreen+0xc6>
    2546:	80 e9       	ldi	r24, 0x90	; 144
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	9a 8b       	std	Y+18, r25	; 0x12
    254c:	89 8b       	std	Y+17, r24	; 0x11
    254e:	89 89       	ldd	r24, Y+17	; 0x11
    2550:	9a 89       	ldd	r25, Y+18	; 0x12
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <H_LCD_void_ClearScreen+0xb4>
    2556:	9a 8b       	std	Y+18, r25	; 0x12
    2558:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	8b 89       	ldd	r24, Y+19	; 0x13
    255c:	9c 89       	ldd	r25, Y+20	; 0x14
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	9c 8b       	std	Y+20, r25	; 0x14
    2562:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2564:	8b 89       	ldd	r24, Y+19	; 0x13
    2566:	9c 89       	ldd	r25, Y+20	; 0x14
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	69 f7       	brne	.-38     	; 0x2546 <H_LCD_void_ClearScreen+0xa8>
    256c:	14 c0       	rjmp	.+40     	; 0x2596 <H_LCD_void_ClearScreen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256e:	6d 89       	ldd	r22, Y+21	; 0x15
    2570:	7e 89       	ldd	r23, Y+22	; 0x16
    2572:	8f 89       	ldd	r24, Y+23	; 0x17
    2574:	98 8d       	ldd	r25, Y+24	; 0x18
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9c 8b       	std	Y+20, r25	; 0x14
    2580:	8b 8b       	std	Y+19, r24	; 0x13
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	98 8b       	std	Y+16, r25	; 0x10
    2588:	8f 87       	std	Y+15, r24	; 0x0f
    258a:	8f 85       	ldd	r24, Y+15	; 0x0f
    258c:	98 89       	ldd	r25, Y+16	; 0x10
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <H_LCD_void_ClearScreen+0xf0>
    2592:	98 8b       	std	Y+16, r25	; 0x10
    2594:	8f 87       	std	Y+15, r24	; 0x0f
	/* the LCD_u8_DISPLAY_ClEAR_CMD clear the Screen of the LCD */
	_delay_ms(200);
	H_LCD_void_SendCommand(LCD_u8_DISPLAY_ClEAR_CMD);
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	0e 94 7d 11 	call	0x22fa	; 0x22fa <H_LCD_void_SendCommand>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a8 e4       	ldi	r26, 0x48	; 72
    25a2:	b3 e4       	ldi	r27, 0x43	; 67
    25a4:	8b 87       	std	Y+11, r24	; 0x0b
    25a6:	9c 87       	std	Y+12, r25	; 0x0c
    25a8:	ad 87       	std	Y+13, r26	; 0x0d
    25aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a e7       	ldi	r20, 0x7A	; 122
    25ba:	55 e4       	ldi	r21, 0x45	; 69
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8f 83       	std	Y+7, r24	; 0x07
    25c6:	98 87       	std	Y+8, r25	; 0x08
    25c8:	a9 87       	std	Y+9, r26	; 0x09
    25ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	2c f4       	brge	.+10     	; 0x25ee <H_LCD_void_ClearScreen+0x150>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <H_LCD_void_ClearScreen+0x1ce>
	else if (__tmp > 65535)
    25ee:	6f 81       	ldd	r22, Y+7	; 0x07
    25f0:	78 85       	ldd	r23, Y+8	; 0x08
    25f2:	89 85       	ldd	r24, Y+9	; 0x09
    25f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	4c f5       	brge	.+82     	; 0x2658 <H_LCD_void_ClearScreen+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	6b 85       	ldd	r22, Y+11	; 0x0b
    2608:	7c 85       	ldd	r23, Y+12	; 0x0c
    260a:	8d 85       	ldd	r24, Y+13	; 0x0d
    260c:	9e 85       	ldd	r25, Y+14	; 0x0e
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	0f c0       	rjmp	.+30     	; 0x264e <H_LCD_void_ClearScreen+0x1b0>
    2630:	80 e9       	ldi	r24, 0x90	; 144
    2632:	91 e0       	ldi	r25, 0x01	; 1
    2634:	9c 83       	std	Y+4, r25	; 0x04
    2636:	8b 83       	std	Y+3, r24	; 0x03
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <H_LCD_void_ClearScreen+0x19e>
    2640:	9c 83       	std	Y+4, r25	; 0x04
    2642:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	69 f7       	brne	.-38     	; 0x2630 <H_LCD_void_ClearScreen+0x192>
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <H_LCD_void_ClearScreen+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	6f 81       	ldd	r22, Y+7	; 0x07
    265a:	78 85       	ldd	r23, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	9a 81       	ldd	r25, Y+2	; 0x02
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <H_LCD_void_ClearScreen+0x1da>
    267c:	9a 83       	std	Y+2, r25	; 0x02
    267e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

}
    2680:	6c 96       	adiw	r28, 0x1c	; 28
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <H_LCD_voidGoToXY>:
 *  Description : This Function Go to a specific position on LCD ( for 2 * 16 and 4 * 20 LCD)
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_voidGoToXY (u8 Copy_u8Row,u8 Copy_u8Col)
{
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <H_LCD_voidGoToXY+0x6>
    2698:	00 d0       	rcall	.+0      	; 0x269a <H_LCD_voidGoToXY+0x8>
    269a:	00 d0       	rcall	.+0      	; 0x269c <H_LCD_voidGoToXY+0xa>
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	6e 83       	std	Y+6, r22	; 0x06
	/* Array holding the positions of the Starting point for every row */
	u8 Copy_Au8Rows[4] ={LCD_u8_R0_CMD,LCD_u8_R1_CMD,LCD_u8_R2_CMD,LCD_u8_R3_CMD} ;
    26a4:	80 e8       	ldi	r24, 0x80	; 128
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	80 ec       	ldi	r24, 0xC0	; 192
    26aa:	8a 83       	std	Y+2, r24	; 0x02
    26ac:	84 e9       	ldi	r24, 0x94	; 148
    26ae:	8b 83       	std	Y+3, r24	; 0x03
    26b0:	84 ed       	ldi	r24, 0xD4	; 212
    26b2:	8c 83       	std	Y+4, r24	; 0x04

	H_LCD_void_SendCommand(Copy_Au8Rows[Copy_u8Row] + Copy_u8Col);
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	ce 01       	movw	r24, r28
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	fc 01       	movw	r30, r24
    26c0:	e2 0f       	add	r30, r18
    26c2:	f3 1f       	adc	r31, r19
    26c4:	90 81       	ld	r25, Z
    26c6:	8e 81       	ldd	r24, Y+6	; 0x06
    26c8:	89 0f       	add	r24, r25
    26ca:	0e 94 7d 11 	call	0x22fa	; 0x22fa <H_LCD_void_SendCommand>

}
    26ce:	26 96       	adiw	r28, 0x06	; 6
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <H_LCD_void_4BitHandelCommand>:
 *  Description : This Function Handle 4bit Mode instructions
 * ----------------------------------------------------------------------------------------------
 */

static void H_LCD_void_4BitHandelCommand (u8 Copy_u8Command)
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	0f 92       	push	r0
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	89 83       	std	Y+1, r24	; 0x01
	/* Get the 4 MSB bits of the command and send it to the LCD */
	M_DIO_u8_SetPinValue(LCD_u8_D7_PORT,LCD_u8_D7_PIN,GET_BIT(Copy_u8Command,7));
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	98 2f       	mov	r25, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	99 27       	eor	r25, r25
    26f4:	99 1f       	adc	r25, r25
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	64 e0       	ldi	r22, 0x04	; 4
    26fa:	49 2f       	mov	r20, r25
    26fc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D6_PORT,LCD_u8_D6_PIN,GET_BIT(Copy_u8Command,6));
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	82 95       	swap	r24
    2704:	86 95       	lsr	r24
    2706:	86 95       	lsr	r24
    2708:	83 70       	andi	r24, 0x03	; 3
    270a:	98 2f       	mov	r25, r24
    270c:	91 70       	andi	r25, 0x01	; 1
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	62 e0       	ldi	r22, 0x02	; 2
    2712:	49 2f       	mov	r20, r25
    2714:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D5_PORT,LCD_u8_D5_PIN,GET_BIT(Copy_u8Command,5));
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	82 95       	swap	r24
    271c:	86 95       	lsr	r24
    271e:	87 70       	andi	r24, 0x07	; 7
    2720:	98 2f       	mov	r25, r24
    2722:	91 70       	andi	r25, 0x01	; 1
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	49 2f       	mov	r20, r25
    272a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D4_PORT,LCD_u8_D4_PIN,GET_BIT(Copy_u8Command,4));
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	82 95       	swap	r24
    2732:	8f 70       	andi	r24, 0x0F	; 15
    2734:	98 2f       	mov	r25, r24
    2736:	91 70       	andi	r25, 0x01	; 1
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	49 2f       	mov	r20, r25
    273e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
	/*Falling edge */
	H_LCD_void_EnableLatch();
    2742:	0e 94 cf 13 	call	0x279e	; 0x279e <H_LCD_void_EnableLatch>
	/* get the LSB of the command and Send it to the LCD */
	M_DIO_u8_SetPinValue(LCD_u8_D7_PORT,LCD_u8_D7_PIN,GET_BIT(Copy_u8Command,3));
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	86 95       	lsr	r24
    274a:	86 95       	lsr	r24
    274c:	86 95       	lsr	r24
    274e:	98 2f       	mov	r25, r24
    2750:	91 70       	andi	r25, 0x01	; 1
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	64 e0       	ldi	r22, 0x04	; 4
    2756:	49 2f       	mov	r20, r25
    2758:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D6_PORT,LCD_u8_D6_PIN,GET_BIT(Copy_u8Command,2));
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	86 95       	lsr	r24
    2760:	86 95       	lsr	r24
    2762:	98 2f       	mov	r25, r24
    2764:	91 70       	andi	r25, 0x01	; 1
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	62 e0       	ldi	r22, 0x02	; 2
    276a:	49 2f       	mov	r20, r25
    276c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D5_PORT,LCD_u8_D5_PIN,GET_BIT(Copy_u8Command,1));
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	86 95       	lsr	r24
    2774:	98 2f       	mov	r25, r24
    2776:	91 70       	andi	r25, 0x01	; 1
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	49 2f       	mov	r20, r25
    277e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D4_PORT,LCD_u8_D4_PIN,GET_BIT(Copy_u8Command,0));
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	98 2f       	mov	r25, r24
    2786:	91 70       	andi	r25, 0x01	; 1
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	49 2f       	mov	r20, r25
    278e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
	/* Falling edge*/
	H_LCD_void_EnableLatch();
    2792:	0e 94 cf 13 	call	0x279e	; 0x279e <H_LCD_void_EnableLatch>

}
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <H_LCD_void_EnableLatch>:
 *  Description : This Function Generate Latch on the LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_EnableLatch(void)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	68 97       	sbiw	r28, 0x18	; 24
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
	/* Making latch on LCD EN PIN */
	/* Set the pin on High, making delay then bring back to Low */
	M_DIO_u8_SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_PIN_VALUE_HIGH);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	62 e0       	ldi	r22, 0x02	; 2
    27b6:	41 e0       	ldi	r20, 0x01	; 1
    27b8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	a6 e9       	ldi	r26, 0x96	; 150
    27c2:	b3 e4       	ldi	r27, 0x43	; 67
    27c4:	8d 8b       	std	Y+21, r24	; 0x15
    27c6:	9e 8b       	std	Y+22, r25	; 0x16
    27c8:	af 8b       	std	Y+23, r26	; 0x17
    27ca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27cc:	6d 89       	ldd	r22, Y+21	; 0x15
    27ce:	7e 89       	ldd	r23, Y+22	; 0x16
    27d0:	8f 89       	ldd	r24, Y+23	; 0x17
    27d2:	98 8d       	ldd	r25, Y+24	; 0x18
    27d4:	2b ea       	ldi	r18, 0xAB	; 171
    27d6:	3a ea       	ldi	r19, 0xAA	; 170
    27d8:	4a ea       	ldi	r20, 0xAA	; 170
    27da:	50 e4       	ldi	r21, 0x40	; 64
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	89 8b       	std	Y+17, r24	; 0x11
    27e6:	9a 8b       	std	Y+18, r25	; 0x12
    27e8:	ab 8b       	std	Y+19, r26	; 0x13
    27ea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27ec:	69 89       	ldd	r22, Y+17	; 0x11
    27ee:	7a 89       	ldd	r23, Y+18	; 0x12
    27f0:	8b 89       	ldd	r24, Y+19	; 0x13
    27f2:	9c 89       	ldd	r25, Y+20	; 0x14
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	1c f4       	brge	.+6      	; 0x280a <H_LCD_void_EnableLatch+0x6c>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	88 8b       	std	Y+16, r24	; 0x10
    2808:	91 c0       	rjmp	.+290    	; 0x292c <H_LCD_void_EnableLatch+0x18e>
	else if (__tmp > 255)
    280a:	69 89       	ldd	r22, Y+17	; 0x11
    280c:	7a 89       	ldd	r23, Y+18	; 0x12
    280e:	8b 89       	ldd	r24, Y+19	; 0x13
    2810:	9c 89       	ldd	r25, Y+20	; 0x14
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	4f e7       	ldi	r20, 0x7F	; 127
    2818:	53 e4       	ldi	r21, 0x43	; 67
    281a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281e:	18 16       	cp	r1, r24
    2820:	0c f0       	brlt	.+2      	; 0x2824 <H_LCD_void_EnableLatch+0x86>
    2822:	7b c0       	rjmp	.+246    	; 0x291a <H_LCD_void_EnableLatch+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2824:	6d 89       	ldd	r22, Y+21	; 0x15
    2826:	7e 89       	ldd	r23, Y+22	; 0x16
    2828:	8f 89       	ldd	r24, Y+23	; 0x17
    282a:	98 8d       	ldd	r25, Y+24	; 0x18
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a e7       	ldi	r20, 0x7A	; 122
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8c 87       	std	Y+12, r24	; 0x0c
    283e:	9d 87       	std	Y+13, r25	; 0x0d
    2840:	ae 87       	std	Y+14, r26	; 0x0e
    2842:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6c 85       	ldd	r22, Y+12	; 0x0c
    2846:	7d 85       	ldd	r23, Y+13	; 0x0d
    2848:	8e 85       	ldd	r24, Y+14	; 0x0e
    284a:	9f 85       	ldd	r25, Y+15	; 0x0f
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a e7       	ldi	r20, 0x7A	; 122
    2852:	55 e4       	ldi	r21, 0x45	; 69
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	88 87       	std	Y+8, r24	; 0x08
    285e:	99 87       	std	Y+9, r25	; 0x09
    2860:	aa 87       	std	Y+10, r26	; 0x0a
    2862:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2864:	68 85       	ldd	r22, Y+8	; 0x08
    2866:	79 85       	ldd	r23, Y+9	; 0x09
    2868:	8a 85       	ldd	r24, Y+10	; 0x0a
    286a:	9b 85       	ldd	r25, Y+11	; 0x0b
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <H_LCD_void_EnableLatch+0xe8>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9f 83       	std	Y+7, r25	; 0x07
    2882:	8e 83       	std	Y+6, r24	; 0x06
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <H_LCD_void_EnableLatch+0x166>
	else if (__tmp > 65535)
    2886:	68 85       	ldd	r22, Y+8	; 0x08
    2888:	79 85       	ldd	r23, Y+9	; 0x09
    288a:	8a 85       	ldd	r24, Y+10	; 0x0a
    288c:	9b 85       	ldd	r25, Y+11	; 0x0b
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <H_LCD_void_EnableLatch+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6c 85       	ldd	r22, Y+12	; 0x0c
    28a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    28a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    28a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9f 83       	std	Y+7, r25	; 0x07
    28c4:	8e 83       	std	Y+6, r24	; 0x06
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <H_LCD_void_EnableLatch+0x148>
    28c8:	80 e9       	ldi	r24, 0x90	; 144
    28ca:	91 e0       	ldi	r25, 0x01	; 1
    28cc:	9d 83       	std	Y+5, r25	; 0x05
    28ce:	8c 83       	std	Y+4, r24	; 0x04
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	9d 81       	ldd	r25, Y+5	; 0x05
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <H_LCD_void_EnableLatch+0x136>
    28d8:	9d 83       	std	Y+5, r25	; 0x05
    28da:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8e 81       	ldd	r24, Y+6	; 0x06
    28de:	9f 81       	ldd	r25, Y+7	; 0x07
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9f 83       	std	Y+7, r25	; 0x07
    28e4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8e 81       	ldd	r24, Y+6	; 0x06
    28e8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <H_LCD_void_EnableLatch+0x12a>
    28ee:	24 c0       	rjmp	.+72     	; 0x2938 <H_LCD_void_EnableLatch+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	68 85       	ldd	r22, Y+8	; 0x08
    28f2:	79 85       	ldd	r23, Y+9	; 0x09
    28f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9f 83       	std	Y+7, r25	; 0x07
    2902:	8e 83       	std	Y+6, r24	; 0x06
    2904:	8e 81       	ldd	r24, Y+6	; 0x06
    2906:	9f 81       	ldd	r25, Y+7	; 0x07
    2908:	9b 83       	std	Y+3, r25	; 0x03
    290a:	8a 83       	std	Y+2, r24	; 0x02
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <H_LCD_void_EnableLatch+0x172>
    2914:	9b 83       	std	Y+3, r25	; 0x03
    2916:	8a 83       	std	Y+2, r24	; 0x02
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <H_LCD_void_EnableLatch+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    291a:	69 89       	ldd	r22, Y+17	; 0x11
    291c:	7a 89       	ldd	r23, Y+18	; 0x12
    291e:	8b 89       	ldd	r24, Y+19	; 0x13
    2920:	9c 89       	ldd	r25, Y+20	; 0x14
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	88 8b       	std	Y+16, r24	; 0x10
    292c:	88 89       	ldd	r24, Y+16	; 0x10
    292e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	8a 95       	dec	r24
    2934:	f1 f7       	brne	.-4      	; 0x2932 <H_LCD_void_EnableLatch+0x194>
    2936:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(300);
	M_DIO_u8_SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_PIN_VALUE_LOW);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	62 e0       	ldi	r22, 0x02	; 2
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <M_DIO_u8_SetPinValue>
}
    2942:	68 96       	adiw	r28, 0x18	; 24
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <Finger_Ps_Matchinf1toN>:
/*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
/************************* The third main functionality of the Finger Print **********************************/
/************************* ------ matching operation  1 : N --------   ********************************/

u8 Finger_Ps_Matchinf1toN (void)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <Finger_Ps_Matchinf1toN+0x6>
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8FunctionState;

	/* 1- Scan the finger and save the image in the image buffer*/
	Local_u8FunctionState =FingerPS_genImg();
    295e:	0e 94 27 1b 	call	0x364e	; 0x364e <FingerPS_genImg>
    2962:	89 83       	std	Y+1, r24	; 0x01

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	88 23       	and	r24, r24
    2968:	19 f0       	breq	.+6      	; 0x2970 <Finger_Ps_Matchinf1toN+0x1c>
	{}
	else
	{ return Local_u8FunctionState; }
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	8a 83       	std	Y+2, r24	; 0x02
    296e:	10 c0       	rjmp	.+32     	; 0x2990 <Finger_Ps_Matchinf1toN+0x3c>


	/* 2i - convert the image in the image buffer to character file*/
	/*2ii - then save the character file in the character buffer 1 */
	Local_u8FunctionState =FingerPS_convertImg2CharFile(R503_CHARACTER_FILE_1);
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <FingerPS_convertImg2CharFile>
    2976:	89 83       	std	Y+1, r24	; 0x01

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	88 23       	and	r24, r24
    297c:	19 f0       	breq	.+6      	; 0x2984 <Finger_Ps_Matchinf1toN+0x30>
	{}
	else
	{return Local_u8FunctionState;}
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	8a 83       	std	Y+2, r24	; 0x02
    2982:	06 c0       	rjmp	.+12     	; 0x2990 <Finger_Ps_Matchinf1toN+0x3c>

	/* Search in the finger print library and */
	Local_u8FunctionState = FingerPS_searchFinger(R503_CHARACTER_FILE_1);
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	0e 94 02 19 	call	0x3204	; 0x3204 <FingerPS_searchFinger>
    298a:	89 83       	std	Y+1, r24	; 0x01

	/* return the state of the operation */
	return Local_u8FunctionState;
    298c:	89 81       	ldd	r24, Y+1	; 0x01
    298e:	8a 83       	std	Y+2, r24	; 0x02
    2990:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <Finger_Ps_Matching1to1>:

/************************* The second main functionality of the Finger Print **********************************/
/************************* ------ matching operation  1 : 1--------   ********************************/

u8 Finger_Ps_Matching1to1(u16 Copy_u16FingerPrintID)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	00 d0       	rcall	.+0      	; 0x29a2 <Finger_Ps_Matching1to1+0x6>
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <Finger_Ps_Matching1to1+0x8>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	9b 83       	std	Y+3, r25	; 0x03
    29aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8FunctionState;

	/* 1- Scan the finger and save the image in the image buffer*/
	Local_u8FunctionState =FingerPS_genImg();
    29ac:	0e 94 27 1b 	call	0x364e	; 0x364e <FingerPS_genImg>
    29b0:	89 83       	std	Y+1, r24	; 0x01

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	88 23       	and	r24, r24
    29b6:	19 f0       	breq	.+6      	; 0x29be <Finger_Ps_Matching1to1+0x22>
	{}
	else
	{ return Local_u8FunctionState; }
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	8c 83       	std	Y+4, r24	; 0x04
    29bc:	1b c0       	rjmp	.+54     	; 0x29f4 <Finger_Ps_Matching1to1+0x58>


	/* 2i - convert the image in the image buffer to character file*/
	/*2ii - then save the character file in the character buffer 1 */
	Local_u8FunctionState =FingerPS_convertImg2CharFile(R503_CHARACTER_FILE_1);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <FingerPS_convertImg2CharFile>
    29c4:	89 83       	std	Y+1, r24	; 0x01

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	88 23       	and	r24, r24
    29ca:	19 f0       	breq	.+6      	; 0x29d2 <Finger_Ps_Matching1to1+0x36>
	{}
	else
	{return Local_u8FunctionState;}
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	8c 83       	std	Y+4, r24	; 0x04
    29d0:	11 c0       	rjmp	.+34     	; 0x29f4 <Finger_Ps_Matching1to1+0x58>

	/* 3-  Load the template image from the finger Library to character file 2 */
	Local_u8FunctionState = FingerPS_LoadCharFile(Copy_u16FingerPrintID,R503_CHARACTER_FILE_2);
    29d2:	8a 81       	ldd	r24, Y+2	; 0x02
    29d4:	9b 81       	ldd	r25, Y+3	; 0x03
    29d6:	62 e0       	ldi	r22, 0x02	; 2
    29d8:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <FingerPS_LoadCharFile>
    29dc:	89 83       	std	Y+1, r24	; 0x01

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	88 23       	and	r24, r24
    29e2:	19 f0       	breq	.+6      	; 0x29ea <Finger_Ps_Matching1to1+0x4e>
	{}
	else
	{return Local_u8FunctionState;}
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	8c 83       	std	Y+4, r24	; 0x04
    29e8:	05 c0       	rjmp	.+10     	; 0x29f4 <Finger_Ps_Matching1to1+0x58>

	/* matching between the 2 character files */
	Local_u8FunctionState = FingerPS_match();
    29ea:	0e 94 77 16 	call	0x2cee	; 0x2cee <FingerPS_match>
    29ee:	89 83       	std	Y+1, r24	; 0x01

	/* return the Function States */
	return Local_u8FunctionState;
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	8c 83       	std	Y+4, r24	; 0x04
    29f4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <Finger_Ps_EnrollmentOpreation>:

/************************* The first main functionality of the Finger Print **********************************/
/************************* ------ Enrollment operation  --------   ********************************/

u8 Finger_Ps_EnrollmentOpreation( u16 Copy_u16FingerPrintID)
{
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	62 97       	sbiw	r28, 0x12	; 18
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	0f be       	out	0x3f, r0	; 63
    2a16:	cd bf       	out	0x3d, r28	; 61
    2a18:	99 8b       	std	Y+17, r25	; 0x11
    2a1a:	88 8b       	std	Y+16, r24	; 0x10
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	aa ef       	ldi	r26, 0xFA	; 250
    2a22:	b3 e4       	ldi	r27, 0x43	; 67
    2a24:	8b 87       	std	Y+11, r24	; 0x0b
    2a26:	9c 87       	std	Y+12, r25	; 0x0c
    2a28:	ad 87       	std	Y+13, r26	; 0x0d
    2a2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a e7       	ldi	r20, 0x7A	; 122
    2a3a:	55 e4       	ldi	r21, 0x45	; 69
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8f 83       	std	Y+7, r24	; 0x07
    2a46:	98 87       	std	Y+8, r25	; 0x08
    2a48:	a9 87       	std	Y+9, r26	; 0x09
    2a4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <Finger_Ps_EnrollmentOpreation+0x6a>
		__ticks = 1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	3f c0       	rjmp	.+126    	; 0x2aec <Finger_Ps_EnrollmentOpreation+0xe8>
	else if (__tmp > 65535)
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	4c f5       	brge	.+82     	; 0x2ad8 <Finger_Ps_EnrollmentOpreation+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
    2aac:	8d 83       	std	Y+5, r24	; 0x05
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <Finger_Ps_EnrollmentOpreation+0xca>
    2ab0:	80 e9       	ldi	r24, 0x90	; 144
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	9c 83       	std	Y+4, r25	; 0x04
    2ab6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	9c 81       	ldd	r25, Y+4	; 0x04
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <Finger_Ps_EnrollmentOpreation+0xb8>
    2ac0:	9c 83       	std	Y+4, r25	; 0x04
    2ac2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <Finger_Ps_EnrollmentOpreation+0xac>
    2ad6:	14 c0       	rjmp	.+40     	; 0x2b00 <Finger_Ps_EnrollmentOpreation+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
    2aec:	8d 81       	ldd	r24, Y+5	; 0x05
    2aee:	9e 81       	ldd	r25, Y+6	; 0x06
    2af0:	9a 83       	std	Y+2, r25	; 0x02
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <Finger_Ps_EnrollmentOpreation+0xf4>
    2afc:	9a 83       	std	Y+2, r25	; 0x02
    2afe:	89 83       	std	Y+1, r24	; 0x01

	/* Initialization delay */
	_delay_ms(500);

	/* 1- Just shake hands */
	Local_u8FunctionState = FingerPS_handShake();
    2b00:	0e 94 bb 1b 	call	0x3776	; 0x3776 <FingerPS_handShake>
    2b04:	8f 87       	std	Y+15, r24	; 0x0f

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b08:	88 23       	and	r24, r24
    2b0a:	19 f0       	breq	.+6      	; 0x2b12 <Finger_Ps_EnrollmentOpreation+0x10e>
	{}
	else
	{ return Local_u8FunctionState; }
    2b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0e:	8a 8b       	std	Y+18, r24	; 0x12
    2b10:	3c c0       	rjmp	.+120    	; 0x2b8a <Finger_Ps_EnrollmentOpreation+0x186>

	/* 2- Scan the finger and save the image in the image buffer*/
	Local_u8FunctionState =FingerPS_genImg();
    2b12:	0e 94 27 1b 	call	0x364e	; 0x364e <FingerPS_genImg>
    2b16:	8f 87       	std	Y+15, r24	; 0x0f

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1a:	88 23       	and	r24, r24
    2b1c:	19 f0       	breq	.+6      	; 0x2b24 <Finger_Ps_EnrollmentOpreation+0x120>
	{}
	else
	{return Local_u8FunctionState;}
    2b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b20:	8a 8b       	std	Y+18, r24	; 0x12
    2b22:	33 c0       	rjmp	.+102    	; 0x2b8a <Finger_Ps_EnrollmentOpreation+0x186>

	/* 3i - convert the image in the image buffer to character file*/
	/*3ii - then save the character file in the character buffer 1 */
	Local_u8FunctionState =FingerPS_convertImg2CharFile(R503_CHARACTER_FILE_1);
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <FingerPS_convertImg2CharFile>
    2b2a:	8f 87       	std	Y+15, r24	; 0x0f

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2b2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b2e:	88 23       	and	r24, r24
    2b30:	19 f0       	breq	.+6      	; 0x2b38 <Finger_Ps_EnrollmentOpreation+0x134>
	{}
	else
	{return Local_u8FunctionState;}
    2b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b34:	8a 8b       	std	Y+18, r24	; 0x12
    2b36:	29 c0       	rjmp	.+82     	; 0x2b8a <Finger_Ps_EnrollmentOpreation+0x186>

	/* 4- Take another scan and save it in the image buffer */
	Local_u8FunctionState =FingerPS_genImg();
    2b38:	0e 94 27 1b 	call	0x364e	; 0x364e <FingerPS_genImg>
    2b3c:	8f 87       	std	Y+15, r24	; 0x0f

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2b3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b40:	88 23       	and	r24, r24
    2b42:	19 f0       	breq	.+6      	; 0x2b4a <Finger_Ps_EnrollmentOpreation+0x146>
	{}
	else
	{return Local_u8FunctionState;}
    2b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b46:	8a 8b       	std	Y+18, r24	; 0x12
    2b48:	20 c0       	rjmp	.+64     	; 0x2b8a <Finger_Ps_EnrollmentOpreation+0x186>

	/* 5i - convert the image in the image buffer to character file*/
	/*5ii - then save the character file in the character buffer 2 */
	Local_u8FunctionState =FingerPS_convertImg2CharFile(R503_CHARACTER_FILE_2);
    2b4a:	82 e0       	ldi	r24, 0x02	; 2
    2b4c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <FingerPS_convertImg2CharFile>
    2b50:	8f 87       	std	Y+15, r24	; 0x0f

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2b52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b54:	88 23       	and	r24, r24
    2b56:	19 f0       	breq	.+6      	; 0x2b5e <Finger_Ps_EnrollmentOpreation+0x15a>
	{}
	else
	{return Local_u8FunctionState;}
    2b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b5a:	8a 8b       	std	Y+18, r24	; 0x12
    2b5c:	16 c0       	rjmp	.+44     	; 0x2b8a <Finger_Ps_EnrollmentOpreation+0x186>

	/* 6- Combine between the 2 characters buffers and override on the character buffer 1*/
	/*   - generate Finger print template */
	Local_u8FunctionState = FingerPS_genTemplate();
    2b5e:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <FingerPS_genTemplate>
    2b62:	8f 87       	std	Y+15, r24	; 0x0f

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	88 23       	and	r24, r24
    2b68:	19 f0       	breq	.+6      	; 0x2b70 <Finger_Ps_EnrollmentOpreation+0x16c>
	{}
	else
	{return Local_u8FunctionState;}
    2b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6c:	8a 8b       	std	Y+18, r24	; 0x12
    2b6e:	0d c0       	rjmp	.+26     	; 0x2b8a <Finger_Ps_EnrollmentOpreation+0x186>

	/* 7- Store the Template in a certain position in the finger print library*/
	Local_u8FunctionState = FingerPS_strTemplate(Copy_u16FingerPrintID);
    2b70:	88 89       	ldd	r24, Y+16	; 0x10
    2b72:	99 89       	ldd	r25, Y+17	; 0x11
    2b74:	0e 94 b9 19 	call	0x3372	; 0x3372 <FingerPS_strTemplate>
    2b78:	8f 87       	std	Y+15, r24	; 0x0f

	if (Local_u8FunctionState == R503_PROCESS_COMPLETE)
    2b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b7c:	88 23       	and	r24, r24
    2b7e:	19 f0       	breq	.+6      	; 0x2b86 <Finger_Ps_EnrollmentOpreation+0x182>
	{}
	else
	{return Local_u8FunctionState;}
    2b80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b82:	8a 8b       	std	Y+18, r24	; 0x12
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <Finger_Ps_EnrollmentOpreation+0x186>

	/** Function finished **/


	return Local_u8FunctionState;
    2b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b88:	8a 8b       	std	Y+18, r24	; 0x12
    2b8a:	8a 89       	ldd	r24, Y+18	; 0x12

}
    2b8c:	62 96       	adiw	r28, 0x12	; 18
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <FingerPs_AuraLedConfig>:



/* Brief : this function to turn on the Aura Led and playing with it */
u8 FingerPs_AuraLedConfig (u8 Copy_u8CtrlCode,u8 Copy_u8Speed, u8 Copy_u8ColorIndex , u8 Copy_u8Times)
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	68 97       	sbiw	r28, 0x18	; 24
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	8d 8b       	std	Y+21, r24	; 0x15
    2bb4:	6e 8b       	std	Y+22, r22	; 0x16
    2bb6:	4f 8b       	std	Y+23, r20	; 0x17
    2bb8:	28 8f       	std	Y+24, r18	; 0x18
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a8 e4       	ldi	r26, 0x48	; 72
    2bc0:	b3 e4       	ldi	r27, 0x43	; 67
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	9c 87       	std	Y+12, r25	; 0x0c
    2bc6:	ad 87       	std	Y+13, r26	; 0x0d
    2bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a e7       	ldi	r20, 0x7A	; 122
    2bd8:	55 e4       	ldi	r21, 0x45	; 69
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8f 83       	std	Y+7, r24	; 0x07
    2be4:	98 87       	std	Y+8, r25	; 0x08
    2be6:	a9 87       	std	Y+9, r26	; 0x09
    2be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <FingerPs_AuraLedConfig+0x6e>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <FingerPs_AuraLedConfig+0xec>
	else if (__tmp > 65535)
    2c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0e:	78 85       	ldd	r23, Y+8	; 0x08
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <FingerPs_AuraLedConfig+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <FingerPs_AuraLedConfig+0xce>
    2c4e:	80 e9       	ldi	r24, 0x90	; 144
    2c50:	91 e0       	ldi	r25, 0x01	; 1
    2c52:	9c 83       	std	Y+4, r25	; 0x04
    2c54:	8b 83       	std	Y+3, r24	; 0x03
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <FingerPs_AuraLedConfig+0xbc>
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <FingerPs_AuraLedConfig+0xb0>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <FingerPs_AuraLedConfig+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <FingerPs_AuraLedConfig+0xf8>
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	u8 Local_Au8Data[5] = {0x035};
    2c9e:	85 e0       	ldi	r24, 0x05	; 5
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	70 96       	adiw	r30, 0x10	; 16
    2ca4:	df 01       	movw	r26, r30
    2ca6:	98 2f       	mov	r25, r24
    2ca8:	1d 92       	st	X+, r1
    2caa:	9a 95       	dec	r25
    2cac:	e9 f7       	brne	.-6      	; 0x2ca8 <FingerPs_AuraLedConfig+0x10a>
    2cae:	85 e3       	ldi	r24, 0x35	; 53
    2cb0:	88 8b       	std	Y+16, r24	; 0x10

	/* Control Code */
	Local_Au8Data[1] = Copy_u8CtrlCode ;
    2cb2:	8d 89       	ldd	r24, Y+21	; 0x15
    2cb4:	89 8b       	std	Y+17, r24	; 0x11

	/* Speed */
	Local_Au8Data[2] = Copy_u8Speed ;
    2cb6:	8e 89       	ldd	r24, Y+22	; 0x16
    2cb8:	8a 8b       	std	Y+18, r24	; 0x12

	/* Color */
	Local_Au8Data[3] = Copy_u8ColorIndex ;
    2cba:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbc:	8b 8b       	std	Y+19, r24	; 0x13

	/* Color */
	Local_Au8Data[4] = Copy_u8Times ;
    2cbe:	88 8d       	ldd	r24, Y+24	; 0x18
    2cc0:	8c 8b       	std	Y+20, r24	; 0x14

	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0007,Local_Au8Data);
    2cc2:	9e 01       	movw	r18, r28
    2cc4:	20 5f       	subi	r18, 0xF0	; 240
    2cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	67 e0       	ldi	r22, 0x07	; 7
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	a9 01       	movw	r20, r18
    2cd0:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    2cd4:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    2cd8:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    2cda:	8f 85       	ldd	r24, Y+15	; 0x0f




}
    2cdc:	68 96       	adiw	r28, 0x18	; 24
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <FingerPS_match>:
*			character buffer2
 * */


u8 FingerPS_match()
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	60 97       	sbiw	r28, 0x10	; 16
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a8 e4       	ldi	r26, 0x48	; 72
    2d08:	b3 e4       	ldi	r27, 0x43	; 67
    2d0a:	8b 87       	std	Y+11, r24	; 0x0b
    2d0c:	9c 87       	std	Y+12, r25	; 0x0c
    2d0e:	ad 87       	std	Y+13, r26	; 0x0d
    2d10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	4a e7       	ldi	r20, 0x7A	; 122
    2d20:	55 e4       	ldi	r21, 0x45	; 69
    2d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	8f 83       	std	Y+7, r24	; 0x07
    2d2c:	98 87       	std	Y+8, r25	; 0x08
    2d2e:	a9 87       	std	Y+9, r26	; 0x09
    2d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d32:	6f 81       	ldd	r22, Y+7	; 0x07
    2d34:	78 85       	ldd	r23, Y+8	; 0x08
    2d36:	89 85       	ldd	r24, Y+9	; 0x09
    2d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e8       	ldi	r20, 0x80	; 128
    2d40:	5f e3       	ldi	r21, 0x3F	; 63
    2d42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d46:	88 23       	and	r24, r24
    2d48:	2c f4       	brge	.+10     	; 0x2d54 <FingerPS_match+0x66>
		__ticks = 1;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	9e 83       	std	Y+6, r25	; 0x06
    2d50:	8d 83       	std	Y+5, r24	; 0x05
    2d52:	3f c0       	rjmp	.+126    	; 0x2dd2 <FingerPS_match+0xe4>
	else if (__tmp > 65535)
    2d54:	6f 81       	ldd	r22, Y+7	; 0x07
    2d56:	78 85       	ldd	r23, Y+8	; 0x08
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	3f ef       	ldi	r19, 0xFF	; 255
    2d60:	4f e7       	ldi	r20, 0x7F	; 127
    2d62:	57 e4       	ldi	r21, 0x47	; 71
    2d64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d68:	18 16       	cp	r1, r24
    2d6a:	4c f5       	brge	.+82     	; 0x2dbe <FingerPS_match+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e2       	ldi	r20, 0x20	; 32
    2d7a:	51 e4       	ldi	r21, 0x41	; 65
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	9e 83       	std	Y+6, r25	; 0x06
    2d92:	8d 83       	std	Y+5, r24	; 0x05
    2d94:	0f c0       	rjmp	.+30     	; 0x2db4 <FingerPS_match+0xc6>
    2d96:	80 e9       	ldi	r24, 0x90	; 144
    2d98:	91 e0       	ldi	r25, 0x01	; 1
    2d9a:	9c 83       	std	Y+4, r25	; 0x04
    2d9c:	8b 83       	std	Y+3, r24	; 0x03
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <FingerPS_match+0xb4>
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2daa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dac:	9e 81       	ldd	r25, Y+6	; 0x06
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	69 f7       	brne	.-38     	; 0x2d96 <FingerPS_match+0xa8>
    2dbc:	14 c0       	rjmp	.+40     	; 0x2de6 <FingerPS_match+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc0:	78 85       	ldd	r23, Y+8	; 0x08
    2dc2:	89 85       	ldd	r24, Y+9	; 0x09
    2dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	9e 83       	std	Y+6, r25	; 0x06
    2dd0:	8d 83       	std	Y+5, r24	; 0x05
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <FingerPS_match+0xf0>
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	u8 Local_Au8Data[1] = {0x03};
    2de6:	83 e0       	ldi	r24, 0x03	; 3
    2de8:	88 8b       	std	Y+16, r24	; 0x10


	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0003,Local_Au8Data);
    2dea:	9e 01       	movw	r18, r28
    2dec:	20 5f       	subi	r18, 0xF0	; 240
    2dee:	3f 4f       	sbci	r19, 0xFF	; 255
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	63 e0       	ldi	r22, 0x03	; 3
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	a9 01       	movw	r20, r18
    2df8:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    2dfc:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    2e00:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    2e02:	8f 85       	ldd	r24, Y+15	; 0x0f


}
    2e04:	60 96       	adiw	r28, 0x10	; 16
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <FingerPS_LoadCharFile>:

/** Brief : this function is used to load a template in a character file .
 */

u8 FingerPS_LoadCharFile(u16 Copy_u8FingurePrintTempleteID ,u8 Copy_u8CharcterFileNumber)
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	6a 97       	sbiw	r28, 0x1a	; 26
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	9f 8b       	std	Y+23, r25	; 0x17
    2e2c:	8e 8b       	std	Y+22, r24	; 0x16
    2e2e:	68 8f       	std	Y+24, r22	; 0x18
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a8 e4       	ldi	r26, 0x48	; 72
    2e36:	b3 e4       	ldi	r27, 0x43	; 67
    2e38:	8b 87       	std	Y+11, r24	; 0x0b
    2e3a:	9c 87       	std	Y+12, r25	; 0x0c
    2e3c:	ad 87       	std	Y+13, r26	; 0x0d
    2e3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	4a e7       	ldi	r20, 0x7A	; 122
    2e4e:	55 e4       	ldi	r21, 0x45	; 69
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	8f 83       	std	Y+7, r24	; 0x07
    2e5a:	98 87       	std	Y+8, r25	; 0x08
    2e5c:	a9 87       	std	Y+9, r26	; 0x09
    2e5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e60:	6f 81       	ldd	r22, Y+7	; 0x07
    2e62:	78 85       	ldd	r23, Y+8	; 0x08
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e8       	ldi	r20, 0x80	; 128
    2e6e:	5f e3       	ldi	r21, 0x3F	; 63
    2e70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e74:	88 23       	and	r24, r24
    2e76:	2c f4       	brge	.+10     	; 0x2e82 <FingerPS_LoadCharFile+0x6c>
		__ticks = 1;
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	3f c0       	rjmp	.+126    	; 0x2f00 <FingerPS_LoadCharFile+0xea>
	else if (__tmp > 65535)
    2e82:	6f 81       	ldd	r22, Y+7	; 0x07
    2e84:	78 85       	ldd	r23, Y+8	; 0x08
    2e86:	89 85       	ldd	r24, Y+9	; 0x09
    2e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	3f ef       	ldi	r19, 0xFF	; 255
    2e8e:	4f e7       	ldi	r20, 0x7F	; 127
    2e90:	57 e4       	ldi	r21, 0x47	; 71
    2e92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e96:	18 16       	cp	r1, r24
    2e98:	4c f5       	brge	.+82     	; 0x2eec <FingerPS_LoadCharFile+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e2       	ldi	r20, 0x20	; 32
    2ea8:	51 e4       	ldi	r21, 0x41	; 65
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	0f c0       	rjmp	.+30     	; 0x2ee2 <FingerPS_LoadCharFile+0xcc>
    2ec4:	80 e9       	ldi	r24, 0x90	; 144
    2ec6:	91 e0       	ldi	r25, 0x01	; 1
    2ec8:	9c 83       	std	Y+4, r25	; 0x04
    2eca:	8b 83       	std	Y+3, r24	; 0x03
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	f1 f7       	brne	.-4      	; 0x2ed0 <FingerPS_LoadCharFile+0xba>
    2ed4:	9c 83       	std	Y+4, r25	; 0x04
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	9e 83       	std	Y+6, r25	; 0x06
    2ee0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	69 f7       	brne	.-38     	; 0x2ec4 <FingerPS_LoadCharFile+0xae>
    2eea:	14 c0       	rjmp	.+40     	; 0x2f14 <FingerPS_LoadCharFile+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eec:	6f 81       	ldd	r22, Y+7	; 0x07
    2eee:	78 85       	ldd	r23, Y+8	; 0x08
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9e 83       	std	Y+6, r25	; 0x06
    2efe:	8d 83       	std	Y+5, r24	; 0x05
    2f00:	8d 81       	ldd	r24, Y+5	; 0x05
    2f02:	9e 81       	ldd	r25, Y+6	; 0x06
    2f04:	9a 83       	std	Y+2, r25	; 0x02
    2f06:	89 83       	std	Y+1, r24	; 0x01
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <FingerPS_LoadCharFile+0xf6>
    2f10:	9a 83       	std	Y+2, r25	; 0x02
    2f12:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	u8 Local_Au8Data[6] = {0x07};
    2f14:	86 e0       	ldi	r24, 0x06	; 6
    2f16:	fe 01       	movw	r30, r28
    2f18:	70 96       	adiw	r30, 0x10	; 16
    2f1a:	df 01       	movw	r26, r30
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	1d 92       	st	X+, r1
    2f20:	2a 95       	dec	r18
    2f22:	e9 f7       	brne	.-6      	; 0x2f1e <FingerPS_LoadCharFile+0x108>
    2f24:	87 e0       	ldi	r24, 0x07	; 7
    2f26:	88 8b       	std	Y+16, r24	; 0x10

	switch (Copy_u8CharcterFileNumber)
    2f28:	88 8d       	ldd	r24, Y+24	; 0x18
    2f2a:	a8 2f       	mov	r26, r24
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	ba 8f       	std	Y+26, r27	; 0x1a
    2f30:	a9 8f       	std	Y+25, r26	; 0x19
    2f32:	29 8d       	ldd	r18, Y+25	; 0x19
    2f34:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2f36:	21 30       	cpi	r18, 0x01	; 1
    2f38:	31 05       	cpc	r19, r1
    2f3a:	31 f0       	breq	.+12     	; 0x2f48 <FingerPS_LoadCharFile+0x132>
    2f3c:	89 8d       	ldd	r24, Y+25	; 0x19
    2f3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f40:	82 30       	cpi	r24, 0x02	; 2
    2f42:	91 05       	cpc	r25, r1
    2f44:	21 f0       	breq	.+8      	; 0x2f4e <FingerPS_LoadCharFile+0x138>
    2f46:	05 c0       	rjmp	.+10     	; 0x2f52 <FingerPS_LoadCharFile+0x13c>
	{
	case R503_CHARACTER_FILE_1: Local_Au8Data[1] = R503_CHARACTER_FILE_1; break;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	89 8b       	std	Y+17, r24	; 0x11
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <FingerPS_LoadCharFile+0x13c>
	case R503_CHARACTER_FILE_2: Local_Au8Data[1] = R503_CHARACTER_FILE_2; break;
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	89 8b       	std	Y+17, r24	; 0x11
	}

	Local_Au8Data[2] = (u8)(Copy_u8FingurePrintTempleteID >> R503_8_Bits_Shift);
    2f52:	8e 89       	ldd	r24, Y+22	; 0x16
    2f54:	9f 89       	ldd	r25, Y+23	; 0x17
    2f56:	89 2f       	mov	r24, r25
    2f58:	99 27       	eor	r25, r25
    2f5a:	8a 8b       	std	Y+18, r24	; 0x12
	Local_Au8Data[3] = (u8)(Copy_u8FingurePrintTempleteID );
    2f5c:	8e 89       	ldd	r24, Y+22	; 0x16
    2f5e:	8b 8b       	std	Y+19, r24	; 0x13


	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0006,Local_Au8Data);
    2f60:	9e 01       	movw	r18, r28
    2f62:	20 5f       	subi	r18, 0xF0	; 240
    2f64:	3f 4f       	sbci	r19, 0xFF	; 255
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	66 e0       	ldi	r22, 0x06	; 6
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	a9 01       	movw	r20, r18
    2f6e:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    2f72:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    2f76:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    2f78:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    2f7a:	6a 96       	adiw	r28, 0x1a	; 26
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <FingerPS_deleteFinger>:
/** Brief : this function is used to delete a certain template.
 *
 */

u8 FingerPS_deleteFinger(u16 Copy_u8FingurePrintTempleteID)
{
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	66 97       	sbiw	r28, 0x16	; 22
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	9e 8b       	std	Y+22, r25	; 0x16
    2fa2:	8d 8b       	std	Y+21, r24	; 0x15
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	a8 e4       	ldi	r26, 0x48	; 72
    2faa:	b3 e4       	ldi	r27, 0x43	; 67
    2fac:	8b 87       	std	Y+11, r24	; 0x0b
    2fae:	9c 87       	std	Y+12, r25	; 0x0c
    2fb0:	ad 87       	std	Y+13, r26	; 0x0d
    2fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4a e7       	ldi	r20, 0x7A	; 122
    2fc2:	55 e4       	ldi	r21, 0x45	; 69
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	8f 83       	std	Y+7, r24	; 0x07
    2fce:	98 87       	std	Y+8, r25	; 0x08
    2fd0:	a9 87       	std	Y+9, r26	; 0x09
    2fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd6:	78 85       	ldd	r23, Y+8	; 0x08
    2fd8:	89 85       	ldd	r24, Y+9	; 0x09
    2fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e8       	ldi	r20, 0x80	; 128
    2fe2:	5f e3       	ldi	r21, 0x3F	; 63
    2fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe8:	88 23       	and	r24, r24
    2fea:	2c f4       	brge	.+10     	; 0x2ff6 <FingerPS_deleteFinger+0x6a>
		__ticks = 1;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	3f c0       	rjmp	.+126    	; 0x3074 <FingerPS_deleteFinger+0xe8>
	else if (__tmp > 65535)
    2ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff8:	78 85       	ldd	r23, Y+8	; 0x08
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	3f ef       	ldi	r19, 0xFF	; 255
    3002:	4f e7       	ldi	r20, 0x7F	; 127
    3004:	57 e4       	ldi	r21, 0x47	; 71
    3006:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    300a:	18 16       	cp	r1, r24
    300c:	4c f5       	brge	.+82     	; 0x3060 <FingerPS_deleteFinger+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3010:	7c 85       	ldd	r23, Y+12	; 0x0c
    3012:	8d 85       	ldd	r24, Y+13	; 0x0d
    3014:	9e 85       	ldd	r25, Y+14	; 0x0e
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e2       	ldi	r20, 0x20	; 32
    301c:	51 e4       	ldi	r21, 0x41	; 65
    301e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	9e 83       	std	Y+6, r25	; 0x06
    3034:	8d 83       	std	Y+5, r24	; 0x05
    3036:	0f c0       	rjmp	.+30     	; 0x3056 <FingerPS_deleteFinger+0xca>
    3038:	80 e9       	ldi	r24, 0x90	; 144
    303a:	91 e0       	ldi	r25, 0x01	; 1
    303c:	9c 83       	std	Y+4, r25	; 0x04
    303e:	8b 83       	std	Y+3, r24	; 0x03
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	9c 81       	ldd	r25, Y+4	; 0x04
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	f1 f7       	brne	.-4      	; 0x3044 <FingerPS_deleteFinger+0xb8>
    3048:	9c 83       	std	Y+4, r25	; 0x04
    304a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	9e 83       	std	Y+6, r25	; 0x06
    3054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	69 f7       	brne	.-38     	; 0x3038 <FingerPS_deleteFinger+0xac>
    305e:	14 c0       	rjmp	.+40     	; 0x3088 <FingerPS_deleteFinger+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3060:	6f 81       	ldd	r22, Y+7	; 0x07
    3062:	78 85       	ldd	r23, Y+8	; 0x08
    3064:	89 85       	ldd	r24, Y+9	; 0x09
    3066:	9a 85       	ldd	r25, Y+10	; 0x0a
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9e 83       	std	Y+6, r25	; 0x06
    3072:	8d 83       	std	Y+5, r24	; 0x05
    3074:	8d 81       	ldd	r24, Y+5	; 0x05
    3076:	9e 81       	ldd	r25, Y+6	; 0x06
    3078:	9a 83       	std	Y+2, r25	; 0x02
    307a:	89 83       	std	Y+1, r24	; 0x01
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <FingerPS_deleteFinger+0xf4>
    3084:	9a 83       	std	Y+2, r25	; 0x02
    3086:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	u8 Local_Au8Data[5] = {0x0c};
    3088:	85 e0       	ldi	r24, 0x05	; 5
    308a:	fe 01       	movw	r30, r28
    308c:	70 96       	adiw	r30, 0x10	; 16
    308e:	df 01       	movw	r26, r30
    3090:	98 2f       	mov	r25, r24
    3092:	1d 92       	st	X+, r1
    3094:	9a 95       	dec	r25
    3096:	e9 f7       	brne	.-6      	; 0x3092 <FingerPS_deleteFinger+0x106>
    3098:	8c e0       	ldi	r24, 0x0C	; 12
    309a:	88 8b       	std	Y+16, r24	; 0x10

	Local_Au8Data[2] = (u8)(Copy_u8FingurePrintTempleteID >> R503_8_Bits_Shift);
    309c:	8d 89       	ldd	r24, Y+21	; 0x15
    309e:	9e 89       	ldd	r25, Y+22	; 0x16
    30a0:	89 2f       	mov	r24, r25
    30a2:	99 27       	eor	r25, r25
    30a4:	8a 8b       	std	Y+18, r24	; 0x12
	Local_Au8Data[3] = (u8)(Copy_u8FingurePrintTempleteID );
    30a6:	8d 89       	ldd	r24, Y+21	; 0x15
    30a8:	8b 8b       	std	Y+19, r24	; 0x13

	Local_Au8Data[4] = 0x00;
    30aa:	1c 8a       	std	Y+20, r1	; 0x14
	Local_Au8Data[5] = 0x01;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	8d 8b       	std	Y+21, r24	; 0x15



	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0007,Local_Au8Data);
    30b0:	9e 01       	movw	r18, r28
    30b2:	20 5f       	subi	r18, 0xF0	; 240
    30b4:	3f 4f       	sbci	r19, 0xFF	; 255
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	67 e0       	ldi	r22, 0x07	; 7
    30ba:	70 e0       	ldi	r23, 0x00	; 0
    30bc:	a9 01       	movw	r20, r18
    30be:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    30c2:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    30c6:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    30c8:	8f 85       	ldd	r24, Y+15	; 0x0f


}
    30ca:	66 96       	adiw	r28, 0x16	; 22
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <FingerPS_emptyLibrary>:
/* Brief : this function is used to delete all templates in
 *			template library.
 * */

u8 FingerPS_emptyLibrary()
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	60 97       	sbiw	r28, 0x10	; 16
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	80 e0       	ldi	r24, 0x00	; 0
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	a8 e4       	ldi	r26, 0x48	; 72
    30f6:	b3 e4       	ldi	r27, 0x43	; 67
    30f8:	8b 87       	std	Y+11, r24	; 0x0b
    30fa:	9c 87       	std	Y+12, r25	; 0x0c
    30fc:	ad 87       	std	Y+13, r26	; 0x0d
    30fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3100:	6b 85       	ldd	r22, Y+11	; 0x0b
    3102:	7c 85       	ldd	r23, Y+12	; 0x0c
    3104:	8d 85       	ldd	r24, Y+13	; 0x0d
    3106:	9e 85       	ldd	r25, Y+14	; 0x0e
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	4a e7       	ldi	r20, 0x7A	; 122
    310e:	55 e4       	ldi	r21, 0x45	; 69
    3110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	8f 83       	std	Y+7, r24	; 0x07
    311a:	98 87       	std	Y+8, r25	; 0x08
    311c:	a9 87       	std	Y+9, r26	; 0x09
    311e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3120:	6f 81       	ldd	r22, Y+7	; 0x07
    3122:	78 85       	ldd	r23, Y+8	; 0x08
    3124:	89 85       	ldd	r24, Y+9	; 0x09
    3126:	9a 85       	ldd	r25, Y+10	; 0x0a
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e8       	ldi	r20, 0x80	; 128
    312e:	5f e3       	ldi	r21, 0x3F	; 63
    3130:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3134:	88 23       	and	r24, r24
    3136:	2c f4       	brge	.+10     	; 0x3142 <FingerPS_emptyLibrary+0x66>
		__ticks = 1;
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	9e 83       	std	Y+6, r25	; 0x06
    313e:	8d 83       	std	Y+5, r24	; 0x05
    3140:	3f c0       	rjmp	.+126    	; 0x31c0 <FingerPS_emptyLibrary+0xe4>
	else if (__tmp > 65535)
    3142:	6f 81       	ldd	r22, Y+7	; 0x07
    3144:	78 85       	ldd	r23, Y+8	; 0x08
    3146:	89 85       	ldd	r24, Y+9	; 0x09
    3148:	9a 85       	ldd	r25, Y+10	; 0x0a
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	3f ef       	ldi	r19, 0xFF	; 255
    314e:	4f e7       	ldi	r20, 0x7F	; 127
    3150:	57 e4       	ldi	r21, 0x47	; 71
    3152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3156:	18 16       	cp	r1, r24
    3158:	4c f5       	brge	.+82     	; 0x31ac <FingerPS_emptyLibrary+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315a:	6b 85       	ldd	r22, Y+11	; 0x0b
    315c:	7c 85       	ldd	r23, Y+12	; 0x0c
    315e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3160:	9e 85       	ldd	r25, Y+14	; 0x0e
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	40 e2       	ldi	r20, 0x20	; 32
    3168:	51 e4       	ldi	r21, 0x41	; 65
    316a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	bc 01       	movw	r22, r24
    3174:	cd 01       	movw	r24, r26
    3176:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
    3182:	0f c0       	rjmp	.+30     	; 0x31a2 <FingerPS_emptyLibrary+0xc6>
    3184:	80 e9       	ldi	r24, 0x90	; 144
    3186:	91 e0       	ldi	r25, 0x01	; 1
    3188:	9c 83       	std	Y+4, r25	; 0x04
    318a:	8b 83       	std	Y+3, r24	; 0x03
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	9c 81       	ldd	r25, Y+4	; 0x04
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <FingerPS_emptyLibrary+0xb4>
    3194:	9c 83       	std	Y+4, r25	; 0x04
    3196:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3198:	8d 81       	ldd	r24, Y+5	; 0x05
    319a:	9e 81       	ldd	r25, Y+6	; 0x06
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	9e 83       	std	Y+6, r25	; 0x06
    31a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a2:	8d 81       	ldd	r24, Y+5	; 0x05
    31a4:	9e 81       	ldd	r25, Y+6	; 0x06
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	69 f7       	brne	.-38     	; 0x3184 <FingerPS_emptyLibrary+0xa8>
    31aa:	14 c0       	rjmp	.+40     	; 0x31d4 <FingerPS_emptyLibrary+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ac:	6f 81       	ldd	r22, Y+7	; 0x07
    31ae:	78 85       	ldd	r23, Y+8	; 0x08
    31b0:	89 85       	ldd	r24, Y+9	; 0x09
    31b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	9e 83       	std	Y+6, r25	; 0x06
    31be:	8d 83       	std	Y+5, r24	; 0x05
    31c0:	8d 81       	ldd	r24, Y+5	; 0x05
    31c2:	9e 81       	ldd	r25, Y+6	; 0x06
    31c4:	9a 83       	std	Y+2, r25	; 0x02
    31c6:	89 83       	std	Y+1, r24	; 0x01
    31c8:	89 81       	ldd	r24, Y+1	; 0x01
    31ca:	9a 81       	ldd	r25, Y+2	; 0x02
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <FingerPS_emptyLibrary+0xf0>
    31d0:	9a 83       	std	Y+2, r25	; 0x02
    31d2:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	u8 Local_Au8Data[1] = {0x0d};
    31d4:	8d e0       	ldi	r24, 0x0D	; 13
    31d6:	88 8b       	std	Y+16, r24	; 0x10


	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0003,Local_Au8Data);
    31d8:	9e 01       	movw	r18, r28
    31da:	20 5f       	subi	r18, 0xF0	; 240
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	63 e0       	ldi	r22, 0x03	; 3
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	a9 01       	movw	r20, r18
    31e6:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    31ea:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    31ee:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    31f0:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    31f2:	60 96       	adiw	r28, 0x10	; 16
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	f8 94       	cli
    31f8:	de bf       	out	0x3e, r29	; 62
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	cd bf       	out	0x3d, r28	; 61
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <FingerPS_searchFinger>:
 * 		 compare the character file from of the Two characters buffers with the All Library Fingers
 * 		 if matching or not return an ACK for it
 * */

u8 FingerPS_searchFinger(u8 Copy_u8CharcterFileNumber)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	68 97       	sbiw	r28, 0x18	; 24
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	8e 8b       	std	Y+22, r24	; 0x16
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	a8 e4       	ldi	r26, 0x48	; 72
    3220:	b3 e4       	ldi	r27, 0x43	; 67
    3222:	8b 87       	std	Y+11, r24	; 0x0b
    3224:	9c 87       	std	Y+12, r25	; 0x0c
    3226:	ad 87       	std	Y+13, r26	; 0x0d
    3228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322a:	6b 85       	ldd	r22, Y+11	; 0x0b
    322c:	7c 85       	ldd	r23, Y+12	; 0x0c
    322e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3230:	9e 85       	ldd	r25, Y+14	; 0x0e
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	4a e7       	ldi	r20, 0x7A	; 122
    3238:	55 e4       	ldi	r21, 0x45	; 69
    323a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	8f 83       	std	Y+7, r24	; 0x07
    3244:	98 87       	std	Y+8, r25	; 0x08
    3246:	a9 87       	std	Y+9, r26	; 0x09
    3248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    324a:	6f 81       	ldd	r22, Y+7	; 0x07
    324c:	78 85       	ldd	r23, Y+8	; 0x08
    324e:	89 85       	ldd	r24, Y+9	; 0x09
    3250:	9a 85       	ldd	r25, Y+10	; 0x0a
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e8       	ldi	r20, 0x80	; 128
    3258:	5f e3       	ldi	r21, 0x3F	; 63
    325a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    325e:	88 23       	and	r24, r24
    3260:	2c f4       	brge	.+10     	; 0x326c <FingerPS_searchFinger+0x68>
		__ticks = 1;
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9e 83       	std	Y+6, r25	; 0x06
    3268:	8d 83       	std	Y+5, r24	; 0x05
    326a:	3f c0       	rjmp	.+126    	; 0x32ea <FingerPS_searchFinger+0xe6>
	else if (__tmp > 65535)
    326c:	6f 81       	ldd	r22, Y+7	; 0x07
    326e:	78 85       	ldd	r23, Y+8	; 0x08
    3270:	89 85       	ldd	r24, Y+9	; 0x09
    3272:	9a 85       	ldd	r25, Y+10	; 0x0a
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	3f ef       	ldi	r19, 0xFF	; 255
    3278:	4f e7       	ldi	r20, 0x7F	; 127
    327a:	57 e4       	ldi	r21, 0x47	; 71
    327c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3280:	18 16       	cp	r1, r24
    3282:	4c f5       	brge	.+82     	; 0x32d6 <FingerPS_searchFinger+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3284:	6b 85       	ldd	r22, Y+11	; 0x0b
    3286:	7c 85       	ldd	r23, Y+12	; 0x0c
    3288:	8d 85       	ldd	r24, Y+13	; 0x0d
    328a:	9e 85       	ldd	r25, Y+14	; 0x0e
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e2       	ldi	r20, 0x20	; 32
    3292:	51 e4       	ldi	r21, 0x41	; 65
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	bc 01       	movw	r22, r24
    329e:	cd 01       	movw	r24, r26
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9e 83       	std	Y+6, r25	; 0x06
    32aa:	8d 83       	std	Y+5, r24	; 0x05
    32ac:	0f c0       	rjmp	.+30     	; 0x32cc <FingerPS_searchFinger+0xc8>
    32ae:	80 e9       	ldi	r24, 0x90	; 144
    32b0:	91 e0       	ldi	r25, 0x01	; 1
    32b2:	9c 83       	std	Y+4, r25	; 0x04
    32b4:	8b 83       	std	Y+3, r24	; 0x03
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	f1 f7       	brne	.-4      	; 0x32ba <FingerPS_searchFinger+0xb6>
    32be:	9c 83       	std	Y+4, r25	; 0x04
    32c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	9e 81       	ldd	r25, Y+6	; 0x06
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	69 f7       	brne	.-38     	; 0x32ae <FingerPS_searchFinger+0xaa>
    32d4:	14 c0       	rjmp	.+40     	; 0x32fe <FingerPS_searchFinger+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d6:	6f 81       	ldd	r22, Y+7	; 0x07
    32d8:	78 85       	ldd	r23, Y+8	; 0x08
    32da:	89 85       	ldd	r24, Y+9	; 0x09
    32dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	9e 83       	std	Y+6, r25	; 0x06
    32e8:	8d 83       	std	Y+5, r24	; 0x05
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	9a 83       	std	Y+2, r25	; 0x02
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	9a 81       	ldd	r25, Y+2	; 0x02
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <FingerPS_searchFinger+0xf2>
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	u8 Local_Au8Data[6] = {0x04};
    32fe:	86 e0       	ldi	r24, 0x06	; 6
    3300:	fe 01       	movw	r30, r28
    3302:	70 96       	adiw	r30, 0x10	; 16
    3304:	df 01       	movw	r26, r30
    3306:	28 2f       	mov	r18, r24
    3308:	1d 92       	st	X+, r1
    330a:	2a 95       	dec	r18
    330c:	e9 f7       	brne	.-6      	; 0x3308 <FingerPS_searchFinger+0x104>
    330e:	84 e0       	ldi	r24, 0x04	; 4
    3310:	88 8b       	std	Y+16, r24	; 0x10

	/* check where to save the converted character file
	 * then save the its location in the Data Array */
	switch (Copy_u8CharcterFileNumber)
    3312:	8e 89       	ldd	r24, Y+22	; 0x16
    3314:	a8 2f       	mov	r26, r24
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	b8 8f       	std	Y+24, r27	; 0x18
    331a:	af 8b       	std	Y+23, r26	; 0x17
    331c:	2f 89       	ldd	r18, Y+23	; 0x17
    331e:	38 8d       	ldd	r19, Y+24	; 0x18
    3320:	21 30       	cpi	r18, 0x01	; 1
    3322:	31 05       	cpc	r19, r1
    3324:	31 f0       	breq	.+12     	; 0x3332 <FingerPS_searchFinger+0x12e>
    3326:	8f 89       	ldd	r24, Y+23	; 0x17
    3328:	98 8d       	ldd	r25, Y+24	; 0x18
    332a:	82 30       	cpi	r24, 0x02	; 2
    332c:	91 05       	cpc	r25, r1
    332e:	21 f0       	breq	.+8      	; 0x3338 <FingerPS_searchFinger+0x134>
    3330:	05 c0       	rjmp	.+10     	; 0x333c <FingerPS_searchFinger+0x138>
	{
	case R503_CHARACTER_FILE_1: Local_Au8Data[1] = R503_CHARACTER_FILE_1; break;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	89 8b       	std	Y+17, r24	; 0x11
    3336:	02 c0       	rjmp	.+4      	; 0x333c <FingerPS_searchFinger+0x138>
	case R503_CHARACTER_FILE_2: Local_Au8Data[1] = R503_CHARACTER_FILE_2; break;
    3338:	82 e0       	ldi	r24, 0x02	; 2
    333a:	89 8b       	std	Y+17, r24	; 0x11
	}

	/* Start searching Address (start page) */
	Local_Au8Data[2]= 0x00;
    333c:	1a 8a       	std	Y+18, r1	; 0x12
	Local_Au8Data[3]= 0x00;
    333e:	1b 8a       	std	Y+19, r1	; 0x13
	/* page Numbers ( Stop Number) */
	Local_Au8Data[4]= 0x00;
    3340:	1c 8a       	std	Y+20, r1	; 0x14
	Local_Au8Data[5]= 0xFF;
    3342:	8f ef       	ldi	r24, 0xFF	; 255
    3344:	8d 8b       	std	Y+21, r24	; 0x15


	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0008,Local_Au8Data);
    3346:	9e 01       	movw	r18, r28
    3348:	20 5f       	subi	r18, 0xF0	; 240
    334a:	3f 4f       	sbci	r19, 0xFF	; 255
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	68 e0       	ldi	r22, 0x08	; 8
    3350:	70 e0       	ldi	r23, 0x00	; 0
    3352:	a9 01       	movw	r20, r18
    3354:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    3358:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    335c:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    335e:	8f 85       	ldd	r24, Y+15	; 0x0f





}
    3360:	68 96       	adiw	r28, 0x18	; 24
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <FingerPS_strTemplate>:
/* Brief : this function is used to store template file in
*			template library saved in Flash Memory .
* */

u8 FingerPS_strTemplate(u16 Copy_u8FingurePrintTempleteID)
{
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	65 97       	sbiw	r28, 0x15	; 21
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	9d 8b       	std	Y+21, r25	; 0x15
    3388:	8c 8b       	std	Y+20, r24	; 0x14
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	a8 e4       	ldi	r26, 0x48	; 72
    3390:	b3 e4       	ldi	r27, 0x43	; 67
    3392:	8b 87       	std	Y+11, r24	; 0x0b
    3394:	9c 87       	std	Y+12, r25	; 0x0c
    3396:	ad 87       	std	Y+13, r26	; 0x0d
    3398:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339a:	6b 85       	ldd	r22, Y+11	; 0x0b
    339c:	7c 85       	ldd	r23, Y+12	; 0x0c
    339e:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	4a e7       	ldi	r20, 0x7A	; 122
    33a8:	55 e4       	ldi	r21, 0x45	; 69
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	8f 83       	std	Y+7, r24	; 0x07
    33b4:	98 87       	std	Y+8, r25	; 0x08
    33b6:	a9 87       	std	Y+9, r26	; 0x09
    33b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33ba:	6f 81       	ldd	r22, Y+7	; 0x07
    33bc:	78 85       	ldd	r23, Y+8	; 0x08
    33be:	89 85       	ldd	r24, Y+9	; 0x09
    33c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e8       	ldi	r20, 0x80	; 128
    33c8:	5f e3       	ldi	r21, 0x3F	; 63
    33ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ce:	88 23       	and	r24, r24
    33d0:	2c f4       	brge	.+10     	; 0x33dc <FingerPS_strTemplate+0x6a>
		__ticks = 1;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	9e 83       	std	Y+6, r25	; 0x06
    33d8:	8d 83       	std	Y+5, r24	; 0x05
    33da:	3f c0       	rjmp	.+126    	; 0x345a <FingerPS_strTemplate+0xe8>
	else if (__tmp > 65535)
    33dc:	6f 81       	ldd	r22, Y+7	; 0x07
    33de:	78 85       	ldd	r23, Y+8	; 0x08
    33e0:	89 85       	ldd	r24, Y+9	; 0x09
    33e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	3f ef       	ldi	r19, 0xFF	; 255
    33e8:	4f e7       	ldi	r20, 0x7F	; 127
    33ea:	57 e4       	ldi	r21, 0x47	; 71
    33ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f0:	18 16       	cp	r1, r24
    33f2:	4c f5       	brge	.+82     	; 0x3446 <FingerPS_strTemplate+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e2       	ldi	r20, 0x20	; 32
    3402:	51 e4       	ldi	r21, 0x41	; 65
    3404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	9e 83       	std	Y+6, r25	; 0x06
    341a:	8d 83       	std	Y+5, r24	; 0x05
    341c:	0f c0       	rjmp	.+30     	; 0x343c <FingerPS_strTemplate+0xca>
    341e:	80 e9       	ldi	r24, 0x90	; 144
    3420:	91 e0       	ldi	r25, 0x01	; 1
    3422:	9c 83       	std	Y+4, r25	; 0x04
    3424:	8b 83       	std	Y+3, r24	; 0x03
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	9c 81       	ldd	r25, Y+4	; 0x04
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <FingerPS_strTemplate+0xb8>
    342e:	9c 83       	std	Y+4, r25	; 0x04
    3430:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3432:	8d 81       	ldd	r24, Y+5	; 0x05
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	9e 83       	std	Y+6, r25	; 0x06
    343a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	9e 81       	ldd	r25, Y+6	; 0x06
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	69 f7       	brne	.-38     	; 0x341e <FingerPS_strTemplate+0xac>
    3444:	14 c0       	rjmp	.+40     	; 0x346e <FingerPS_strTemplate+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3446:	6f 81       	ldd	r22, Y+7	; 0x07
    3448:	78 85       	ldd	r23, Y+8	; 0x08
    344a:	89 85       	ldd	r24, Y+9	; 0x09
    344c:	9a 85       	ldd	r25, Y+10	; 0x0a
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	9e 83       	std	Y+6, r25	; 0x06
    3458:	8d 83       	std	Y+5, r24	; 0x05
    345a:	8d 81       	ldd	r24, Y+5	; 0x05
    345c:	9e 81       	ldd	r25, Y+6	; 0x06
    345e:	9a 83       	std	Y+2, r25	; 0x02
    3460:	89 83       	std	Y+1, r24	; 0x01
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	9a 81       	ldd	r25, Y+2	; 0x02
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	f1 f7       	brne	.-4      	; 0x3466 <FingerPS_strTemplate+0xf4>
    346a:	9a 83       	std	Y+2, r25	; 0x02
    346c:	89 83       	std	Y+1, r24	; 0x01
	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	/* we always take the combined character files from the character file buffer 1*/
	u8 Local_Au8Data[4] = {0x06,R503_CHARACTER_FILE_1};
    346e:	18 8a       	std	Y+16, r1	; 0x10
    3470:	19 8a       	std	Y+17, r1	; 0x11
    3472:	1a 8a       	std	Y+18, r1	; 0x12
    3474:	1b 8a       	std	Y+19, r1	; 0x13
    3476:	86 e0       	ldi	r24, 0x06	; 6
    3478:	88 8b       	std	Y+16, r24	; 0x10
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	89 8b       	std	Y+17, r24	; 0x11

	Local_Au8Data[2] = (u8)(Copy_u8FingurePrintTempleteID >> R503_8_Bits_Shift);
    347e:	8c 89       	ldd	r24, Y+20	; 0x14
    3480:	9d 89       	ldd	r25, Y+21	; 0x15
    3482:	89 2f       	mov	r24, r25
    3484:	99 27       	eor	r25, r25
    3486:	8a 8b       	std	Y+18, r24	; 0x12
	Local_Au8Data[3] = (u8)(Copy_u8FingurePrintTempleteID );
    3488:	8c 89       	ldd	r24, Y+20	; 0x14
    348a:	8b 8b       	std	Y+19, r24	; 0x13


	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0006,Local_Au8Data);
    348c:	9e 01       	movw	r18, r28
    348e:	20 5f       	subi	r18, 0xF0	; 240
    3490:	3f 4f       	sbci	r19, 0xFF	; 255
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	66 e0       	ldi	r22, 0x06	; 6
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	a9 01       	movw	r20, r18
    349a:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    349e:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    34a2:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    34a4:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    34a6:	65 96       	adiw	r28, 0x15	; 21
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	08 95       	ret

000034b8 <FingerPS_genTemplate>:

/* Brief : This function is used to generate template file from
*			combined character buffers.
 * */
u8 FingerPS_genTemplate(void)
{
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	60 97       	sbiw	r28, 0x10	; 16
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	de bf       	out	0x3e, r29	; 62
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a8 e4       	ldi	r26, 0x48	; 72
    34d2:	b3 e4       	ldi	r27, 0x43	; 67
    34d4:	8b 87       	std	Y+11, r24	; 0x0b
    34d6:	9c 87       	std	Y+12, r25	; 0x0c
    34d8:	ad 87       	std	Y+13, r26	; 0x0d
    34da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34de:	7c 85       	ldd	r23, Y+12	; 0x0c
    34e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	4a e7       	ldi	r20, 0x7A	; 122
    34ea:	55 e4       	ldi	r21, 0x45	; 69
    34ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	8f 83       	std	Y+7, r24	; 0x07
    34f6:	98 87       	std	Y+8, r25	; 0x08
    34f8:	a9 87       	std	Y+9, r26	; 0x09
    34fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34fc:	6f 81       	ldd	r22, Y+7	; 0x07
    34fe:	78 85       	ldd	r23, Y+8	; 0x08
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e8       	ldi	r20, 0x80	; 128
    350a:	5f e3       	ldi	r21, 0x3F	; 63
    350c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3510:	88 23       	and	r24, r24
    3512:	2c f4       	brge	.+10     	; 0x351e <FingerPS_genTemplate+0x66>
		__ticks = 1;
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9e 83       	std	Y+6, r25	; 0x06
    351a:	8d 83       	std	Y+5, r24	; 0x05
    351c:	3f c0       	rjmp	.+126    	; 0x359c <FingerPS_genTemplate+0xe4>
	else if (__tmp > 65535)
    351e:	6f 81       	ldd	r22, Y+7	; 0x07
    3520:	78 85       	ldd	r23, Y+8	; 0x08
    3522:	89 85       	ldd	r24, Y+9	; 0x09
    3524:	9a 85       	ldd	r25, Y+10	; 0x0a
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	3f ef       	ldi	r19, 0xFF	; 255
    352a:	4f e7       	ldi	r20, 0x7F	; 127
    352c:	57 e4       	ldi	r21, 0x47	; 71
    352e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3532:	18 16       	cp	r1, r24
    3534:	4c f5       	brge	.+82     	; 0x3588 <FingerPS_genTemplate+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3536:	6b 85       	ldd	r22, Y+11	; 0x0b
    3538:	7c 85       	ldd	r23, Y+12	; 0x0c
    353a:	8d 85       	ldd	r24, Y+13	; 0x0d
    353c:	9e 85       	ldd	r25, Y+14	; 0x0e
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e2       	ldi	r20, 0x20	; 32
    3544:	51 e4       	ldi	r21, 0x41	; 65
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	bc 01       	movw	r22, r24
    3550:	cd 01       	movw	r24, r26
    3552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	9e 83       	std	Y+6, r25	; 0x06
    355c:	8d 83       	std	Y+5, r24	; 0x05
    355e:	0f c0       	rjmp	.+30     	; 0x357e <FingerPS_genTemplate+0xc6>
    3560:	80 e9       	ldi	r24, 0x90	; 144
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	9c 83       	std	Y+4, r25	; 0x04
    3566:	8b 83       	std	Y+3, r24	; 0x03
    3568:	8b 81       	ldd	r24, Y+3	; 0x03
    356a:	9c 81       	ldd	r25, Y+4	; 0x04
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <FingerPS_genTemplate+0xb4>
    3570:	9c 83       	std	Y+4, r25	; 0x04
    3572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3574:	8d 81       	ldd	r24, Y+5	; 0x05
    3576:	9e 81       	ldd	r25, Y+6	; 0x06
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	9e 83       	std	Y+6, r25	; 0x06
    357c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357e:	8d 81       	ldd	r24, Y+5	; 0x05
    3580:	9e 81       	ldd	r25, Y+6	; 0x06
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	69 f7       	brne	.-38     	; 0x3560 <FingerPS_genTemplate+0xa8>
    3586:	14 c0       	rjmp	.+40     	; 0x35b0 <FingerPS_genTemplate+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3588:	6f 81       	ldd	r22, Y+7	; 0x07
    358a:	78 85       	ldd	r23, Y+8	; 0x08
    358c:	89 85       	ldd	r24, Y+9	; 0x09
    358e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9e 83       	std	Y+6, r25	; 0x06
    359a:	8d 83       	std	Y+5, r24	; 0x05
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	9a 83       	std	Y+2, r25	; 0x02
    35a2:	89 83       	std	Y+1, r24	; 0x01
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	9a 81       	ldd	r25, Y+2	; 0x02
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <FingerPS_genTemplate+0xf0>
    35ac:	9a 83       	std	Y+2, r25	; 0x02
    35ae:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	u8 Local_Au8Data[1] = {0x05};
    35b0:	85 e0       	ldi	r24, 0x05	; 5
    35b2:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0003,Local_Au8Data);
    35b4:	9e 01       	movw	r18, r28
    35b6:	20 5f       	subi	r18, 0xF0	; 240
    35b8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	63 e0       	ldi	r22, 0x03	; 3
    35be:	70 e0       	ldi	r23, 0x00	; 0
    35c0:	a9 01       	movw	r20, r18
    35c2:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    35c6:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    35ca:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    35cc:	8f 85       	ldd	r24, Y+15	; 0x0f


}
    35ce:	60 96       	adiw	r28, 0x10	; 16
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <FingerPS_convertImg2CharFile>:
/*Brief : This function Convert the Image in the image Buffer to character file
 * 		  then save it in the Character file buffer (we have 2 characters bufffers )
 * */

u8 FingerPS_convertImg2CharFile(u8 Copy_u8CharcterFileNumber)
{
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	00 d0       	rcall	.+0      	; 0x35e6 <FingerPS_convertImg2CharFile+0x6>
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <FingerPS_convertImg2CharFile+0x8>
    35e8:	00 d0       	rcall	.+0      	; 0x35ea <FingerPS_convertImg2CharFile+0xa>
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
    35ee:	8c 83       	std	Y+4, r24	; 0x04
	/* ACK variable */
	u8 Local_u8_ACKValue ;

	/* Data Array */
	u8 Local_Au8Data[2] = {0x02};
    35f0:	1b 82       	std	Y+3, r1	; 0x03
    35f2:	1a 82       	std	Y+2, r1	; 0x02
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	8a 83       	std	Y+2, r24	; 0x02

	/* check where to save the converted character file
	 * then save the its location in the Data Array */
	switch (Copy_u8CharcterFileNumber)
    35f8:	8c 81       	ldd	r24, Y+4	; 0x04
    35fa:	28 2f       	mov	r18, r24
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	3e 83       	std	Y+6, r19	; 0x06
    3600:	2d 83       	std	Y+5, r18	; 0x05
    3602:	8d 81       	ldd	r24, Y+5	; 0x05
    3604:	9e 81       	ldd	r25, Y+6	; 0x06
    3606:	81 30       	cpi	r24, 0x01	; 1
    3608:	91 05       	cpc	r25, r1
    360a:	31 f0       	breq	.+12     	; 0x3618 <FingerPS_convertImg2CharFile+0x38>
    360c:	2d 81       	ldd	r18, Y+5	; 0x05
    360e:	3e 81       	ldd	r19, Y+6	; 0x06
    3610:	22 30       	cpi	r18, 0x02	; 2
    3612:	31 05       	cpc	r19, r1
    3614:	21 f0       	breq	.+8      	; 0x361e <FingerPS_convertImg2CharFile+0x3e>
    3616:	05 c0       	rjmp	.+10     	; 0x3622 <FingerPS_convertImg2CharFile+0x42>
	{
	case R503_CHARACTER_FILE_1: Local_Au8Data[1] = R503_CHARACTER_FILE_1; break;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	8b 83       	std	Y+3, r24	; 0x03
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <FingerPS_convertImg2CharFile+0x42>
	case R503_CHARACTER_FILE_2: Local_Au8Data[1] = R503_CHARACTER_FILE_2; break;
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	8b 83       	std	Y+3, r24	; 0x03
	}

	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0004,Local_Au8Data);
    3622:	9e 01       	movw	r18, r28
    3624:	2e 5f       	subi	r18, 0xFE	; 254
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	64 e0       	ldi	r22, 0x04	; 4
    362c:	70 e0       	ldi	r23, 0x00	; 0
    362e:	a9 01       	movw	r20, r18
    3630:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	/* Read the ACK form the sensor */
	Local_u8_ACKValue = R503_u8_CheckACK();
    3634:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    3638:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8_ACKValue;
    363a:	89 81       	ldd	r24, Y+1	; 0x01

}
    363c:	26 96       	adiw	r28, 0x06	; 6
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <FingerPS_genImg>:

/* Brief : This function to Scan the Finger and save the image in the image buffer
 *
 * */
u8 FingerPS_genImg()
{
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	60 97       	sbiw	r28, 0x10	; 16
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	a8 e4       	ldi	r26, 0x48	; 72
    3668:	b3 e4       	ldi	r27, 0x43	; 67
    366a:	8b 87       	std	Y+11, r24	; 0x0b
    366c:	9c 87       	std	Y+12, r25	; 0x0c
    366e:	ad 87       	std	Y+13, r26	; 0x0d
    3670:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3672:	6b 85       	ldd	r22, Y+11	; 0x0b
    3674:	7c 85       	ldd	r23, Y+12	; 0x0c
    3676:	8d 85       	ldd	r24, Y+13	; 0x0d
    3678:	9e 85       	ldd	r25, Y+14	; 0x0e
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	4a e7       	ldi	r20, 0x7A	; 122
    3680:	55 e4       	ldi	r21, 0x45	; 69
    3682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	8f 83       	std	Y+7, r24	; 0x07
    368c:	98 87       	std	Y+8, r25	; 0x08
    368e:	a9 87       	std	Y+9, r26	; 0x09
    3690:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3692:	6f 81       	ldd	r22, Y+7	; 0x07
    3694:	78 85       	ldd	r23, Y+8	; 0x08
    3696:	89 85       	ldd	r24, Y+9	; 0x09
    3698:	9a 85       	ldd	r25, Y+10	; 0x0a
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e8       	ldi	r20, 0x80	; 128
    36a0:	5f e3       	ldi	r21, 0x3F	; 63
    36a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36a6:	88 23       	and	r24, r24
    36a8:	2c f4       	brge	.+10     	; 0x36b4 <FingerPS_genImg+0x66>
		__ticks = 1;
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	9e 83       	std	Y+6, r25	; 0x06
    36b0:	8d 83       	std	Y+5, r24	; 0x05
    36b2:	3f c0       	rjmp	.+126    	; 0x3732 <FingerPS_genImg+0xe4>
	else if (__tmp > 65535)
    36b4:	6f 81       	ldd	r22, Y+7	; 0x07
    36b6:	78 85       	ldd	r23, Y+8	; 0x08
    36b8:	89 85       	ldd	r24, Y+9	; 0x09
    36ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	3f ef       	ldi	r19, 0xFF	; 255
    36c0:	4f e7       	ldi	r20, 0x7F	; 127
    36c2:	57 e4       	ldi	r21, 0x47	; 71
    36c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36c8:	18 16       	cp	r1, r24
    36ca:	4c f5       	brge	.+82     	; 0x371e <FingerPS_genImg+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	40 e2       	ldi	r20, 0x20	; 32
    36da:	51 e4       	ldi	r21, 0x41	; 65
    36dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	bc 01       	movw	r22, r24
    36e6:	cd 01       	movw	r24, r26
    36e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	9e 83       	std	Y+6, r25	; 0x06
    36f2:	8d 83       	std	Y+5, r24	; 0x05
    36f4:	0f c0       	rjmp	.+30     	; 0x3714 <FingerPS_genImg+0xc6>
    36f6:	80 e9       	ldi	r24, 0x90	; 144
    36f8:	91 e0       	ldi	r25, 0x01	; 1
    36fa:	9c 83       	std	Y+4, r25	; 0x04
    36fc:	8b 83       	std	Y+3, r24	; 0x03
    36fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3700:	9c 81       	ldd	r25, Y+4	; 0x04
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	f1 f7       	brne	.-4      	; 0x3702 <FingerPS_genImg+0xb4>
    3706:	9c 83       	std	Y+4, r25	; 0x04
    3708:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    370a:	8d 81       	ldd	r24, Y+5	; 0x05
    370c:	9e 81       	ldd	r25, Y+6	; 0x06
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	9e 83       	std	Y+6, r25	; 0x06
    3712:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3714:	8d 81       	ldd	r24, Y+5	; 0x05
    3716:	9e 81       	ldd	r25, Y+6	; 0x06
    3718:	00 97       	sbiw	r24, 0x00	; 0
    371a:	69 f7       	brne	.-38     	; 0x36f6 <FingerPS_genImg+0xa8>
    371c:	14 c0       	rjmp	.+40     	; 0x3746 <FingerPS_genImg+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    371e:	6f 81       	ldd	r22, Y+7	; 0x07
    3720:	78 85       	ldd	r23, Y+8	; 0x08
    3722:	89 85       	ldd	r24, Y+9	; 0x09
    3724:	9a 85       	ldd	r25, Y+10	; 0x0a
    3726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	9e 83       	std	Y+6, r25	; 0x06
    3730:	8d 83       	std	Y+5, r24	; 0x05
    3732:	8d 81       	ldd	r24, Y+5	; 0x05
    3734:	9e 81       	ldd	r25, Y+6	; 0x06
    3736:	9a 83       	std	Y+2, r25	; 0x02
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	9a 81       	ldd	r25, Y+2	; 0x02
    373e:	01 97       	sbiw	r24, 0x01	; 1
    3740:	f1 f7       	brne	.-4      	; 0x373e <FingerPS_genImg+0xf0>
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01

	/* Delay for Being ready */
	_delay_ms(200);

	/* Data Array */
	u8 Local_Au8Data[1] = {0x01};
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0003,Local_Au8Data);
    374a:	9e 01       	movw	r18, r28
    374c:	20 5f       	subi	r18, 0xF0	; 240
    374e:	3f 4f       	sbci	r19, 0xFF	; 255
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	63 e0       	ldi	r22, 0x03	; 3
    3754:	70 e0       	ldi	r23, 0x00	; 0
    3756:	a9 01       	movw	r20, r18
    3758:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	Local_u8_ACKValue = R503_u8_CheckACK();
    375c:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    3760:	8f 87       	std	Y+15, r24	; 0x0f

	return Local_u8_ACKValue;
    3762:	8f 85       	ldd	r24, Y+15	; 0x0f



}
    3764:	60 96       	adiw	r28, 0x10	; 16
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	cf 91       	pop	r28
    3772:	df 91       	pop	r29
    3774:	08 95       	ret

00003776 <FingerPS_handShake>:

/* Brief : Perform handshake , this function is used to make
sure that communication is done successfully. */

u8 FingerPS_handShake()
{
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	60 97       	sbiw	r28, 0x10	; 16
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	a8 e4       	ldi	r26, 0x48	; 72
    3790:	b3 e4       	ldi	r27, 0x43	; 67
    3792:	8b 87       	std	Y+11, r24	; 0x0b
    3794:	9c 87       	std	Y+12, r25	; 0x0c
    3796:	ad 87       	std	Y+13, r26	; 0x0d
    3798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    379a:	6b 85       	ldd	r22, Y+11	; 0x0b
    379c:	7c 85       	ldd	r23, Y+12	; 0x0c
    379e:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	4a e7       	ldi	r20, 0x7A	; 122
    37a8:	55 e4       	ldi	r21, 0x45	; 69
    37aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	8f 83       	std	Y+7, r24	; 0x07
    37b4:	98 87       	std	Y+8, r25	; 0x08
    37b6:	a9 87       	std	Y+9, r26	; 0x09
    37b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37ba:	6f 81       	ldd	r22, Y+7	; 0x07
    37bc:	78 85       	ldd	r23, Y+8	; 0x08
    37be:	89 85       	ldd	r24, Y+9	; 0x09
    37c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e8       	ldi	r20, 0x80	; 128
    37c8:	5f e3       	ldi	r21, 0x3F	; 63
    37ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ce:	88 23       	and	r24, r24
    37d0:	2c f4       	brge	.+10     	; 0x37dc <FingerPS_handShake+0x66>
		__ticks = 1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
    37da:	3f c0       	rjmp	.+126    	; 0x385a <FingerPS_handShake+0xe4>
	else if (__tmp > 65535)
    37dc:	6f 81       	ldd	r22, Y+7	; 0x07
    37de:	78 85       	ldd	r23, Y+8	; 0x08
    37e0:	89 85       	ldd	r24, Y+9	; 0x09
    37e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	3f ef       	ldi	r19, 0xFF	; 255
    37e8:	4f e7       	ldi	r20, 0x7F	; 127
    37ea:	57 e4       	ldi	r21, 0x47	; 71
    37ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f0:	18 16       	cp	r1, r24
    37f2:	4c f5       	brge	.+82     	; 0x3846 <FingerPS_handShake+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 e2       	ldi	r20, 0x20	; 32
    3802:	51 e4       	ldi	r21, 0x41	; 65
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	bc 01       	movw	r22, r24
    380e:	cd 01       	movw	r24, r26
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	0f c0       	rjmp	.+30     	; 0x383c <FingerPS_handShake+0xc6>
    381e:	80 e9       	ldi	r24, 0x90	; 144
    3820:	91 e0       	ldi	r25, 0x01	; 1
    3822:	9c 83       	std	Y+4, r25	; 0x04
    3824:	8b 83       	std	Y+3, r24	; 0x03
    3826:	8b 81       	ldd	r24, Y+3	; 0x03
    3828:	9c 81       	ldd	r25, Y+4	; 0x04
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	f1 f7       	brne	.-4      	; 0x382a <FingerPS_handShake+0xb4>
    382e:	9c 83       	std	Y+4, r25	; 0x04
    3830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3832:	8d 81       	ldd	r24, Y+5	; 0x05
    3834:	9e 81       	ldd	r25, Y+6	; 0x06
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	9e 83       	std	Y+6, r25	; 0x06
    383a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383c:	8d 81       	ldd	r24, Y+5	; 0x05
    383e:	9e 81       	ldd	r25, Y+6	; 0x06
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	69 f7       	brne	.-38     	; 0x381e <FingerPS_handShake+0xa8>
    3844:	14 c0       	rjmp	.+40     	; 0x386e <FingerPS_handShake+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3846:	6f 81       	ldd	r22, Y+7	; 0x07
    3848:	78 85       	ldd	r23, Y+8	; 0x08
    384a:	89 85       	ldd	r24, Y+9	; 0x09
    384c:	9a 85       	ldd	r25, Y+10	; 0x0a
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	9e 83       	std	Y+6, r25	; 0x06
    3858:	8d 83       	std	Y+5, r24	; 0x05
    385a:	8d 81       	ldd	r24, Y+5	; 0x05
    385c:	9e 81       	ldd	r25, Y+6	; 0x06
    385e:	9a 83       	std	Y+2, r25	; 0x02
    3860:	89 83       	std	Y+1, r24	; 0x01
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	9a 81       	ldd	r25, Y+2	; 0x02
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <FingerPS_handShake+0xf0>
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8_ACKValue ;

	/* Delay for Being ready */
	_delay_ms(200);

	u8 Local_Au8Data[] = {0x40};
    386e:	80 e4       	ldi	r24, 0x40	; 64
    3870:	88 8b       	std	Y+16, r24	; 0x10

	/* Send Package */
	H_R503_void_SendPackage(R503_COMMAND_PACKET,0x0003,Local_Au8Data);
    3872:	9e 01       	movw	r18, r28
    3874:	20 5f       	subi	r18, 0xF0	; 240
    3876:	3f 4f       	sbci	r19, 0xFF	; 255
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	63 e0       	ldi	r22, 0x03	; 3
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	a9 01       	movw	r20, r18
    3880:	0e 94 4f 1c 	call	0x389e	; 0x389e <H_R503_void_SendPackage>

	Local_u8_ACKValue = R503_u8_CheckACK();
    3884:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <R503_u8_CheckACK>
    3888:	8f 87       	std	Y+15, r24	; 0x0f


	return Local_u8_ACKValue;
    388a:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    388c:	60 96       	adiw	r28, 0x10	; 16
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	08 95       	ret

0000389e <H_R503_void_SendPackage>:
 *			   => Copy_u8PackageLenght
 *			   => Local_Au8
 * */

static void H_R503_void_SendPackage(u8 Copy_u8PID,u16 Copy_u8PackageLenght, u8 * Local_Au8)
{
    389e:	df 93       	push	r29
    38a0:	cf 93       	push	r28
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
    38a6:	28 97       	sbiw	r28, 0x08	; 8
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	de bf       	out	0x3e, r29	; 62
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	8c 83       	std	Y+4, r24	; 0x04
    38b4:	7e 83       	std	Y+6, r23	; 0x06
    38b6:	6d 83       	std	Y+5, r22	; 0x05
    38b8:	58 87       	std	Y+8, r21	; 0x08
    38ba:	4f 83       	std	Y+7, r20	; 0x07
	/* Variable for CheckSum*/
	u16 Local_u16CheckSum;


	/* Header Part*/
	M_UART_u8_UARTSendCharacter	(R503_HEADR_FIRST_BYTE);
    38bc:	8f ee       	ldi	r24, 0xEF	; 239
    38be:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>
	M_UART_u8_UARTSendCharacter	(R503_HEADR_SECOND_BYTE);
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>

	/* Address Part */
	M_UART_u8_UARTSendCharacter(0xFF);
    38c8:	8f ef       	ldi	r24, 0xFF	; 255
    38ca:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>
	M_UART_u8_UARTSendCharacter(0xFF);
    38ce:	8f ef       	ldi	r24, 0xFF	; 255
    38d0:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>
	M_UART_u8_UARTSendCharacter(0xFF);
    38d4:	8f ef       	ldi	r24, 0xFF	; 255
    38d6:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>
	M_UART_u8_UARTSendCharacter(0xFF);
    38da:	8f ef       	ldi	r24, 0xFF	; 255
    38dc:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>

	/* PID part */
	 M_UART_u8_UARTSendCharacter(Copy_u8PID);
    38e0:	8c 81       	ldd	r24, Y+4	; 0x04
    38e2:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>


	/*Package Length*/
	M_UART_u8_UARTSendCharacter( (u8) (Copy_u8PackageLenght >> R503_8_Bits_Shift));
    38e6:	8d 81       	ldd	r24, Y+5	; 0x05
    38e8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ea:	89 2f       	mov	r24, r25
    38ec:	99 27       	eor	r25, r25
    38ee:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>
	M_UART_u8_UARTSendCharacter( (u8) Copy_u8PackageLenght);
    38f2:	8d 81       	ldd	r24, Y+5	; 0x05
    38f4:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>


	/* Sending Data */
	for (u8 i = 0 ; i < ((u8) Copy_u8PackageLenght) -2  ; i++)
    38f8:	19 82       	std	Y+1, r1	; 0x01
    38fa:	0e c0       	rjmp	.+28     	; 0x3918 <H_R503_void_SendPackage+0x7a>
	M_UART_u8_UARTSendCharacter(Local_Au8[i]);
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	28 2f       	mov	r18, r24
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	8f 81       	ldd	r24, Y+7	; 0x07
    3904:	98 85       	ldd	r25, Y+8	; 0x08
    3906:	fc 01       	movw	r30, r24
    3908:	e2 0f       	add	r30, r18
    390a:	f3 1f       	adc	r31, r19
    390c:	80 81       	ld	r24, Z
    390e:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>
	M_UART_u8_UARTSendCharacter( (u8) (Copy_u8PackageLenght >> R503_8_Bits_Shift));
	M_UART_u8_UARTSendCharacter( (u8) Copy_u8PackageLenght);


	/* Sending Data */
	for (u8 i = 0 ; i < ((u8) Copy_u8PackageLenght) -2  ; i++)
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	8f 5f       	subi	r24, 0xFF	; 255
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	28 2f       	mov	r18, r24
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	8d 81       	ldd	r24, Y+5	; 0x05
    3920:	88 2f       	mov	r24, r24
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	02 97       	sbiw	r24, 0x02	; 2
    3926:	28 17       	cp	r18, r24
    3928:	39 07       	cpc	r19, r25
    392a:	44 f3       	brlt	.-48     	; 0x38fc <H_R503_void_SendPackage+0x5e>
	M_UART_u8_UARTSendCharacter(Local_Au8[i]);


	/* Calculate the Check Sum */
	Local_u16CheckSum = R503_void_CheckSum(Copy_u8PID , Copy_u8PackageLenght ,Local_Au8);
    392c:	2d 81       	ldd	r18, Y+5	; 0x05
    392e:	3e 81       	ldd	r19, Y+6	; 0x06
    3930:	4f 81       	ldd	r20, Y+7	; 0x07
    3932:	58 85       	ldd	r21, Y+8	; 0x08
    3934:	8c 81       	ldd	r24, Y+4	; 0x04
    3936:	b9 01       	movw	r22, r18
    3938:	0e 94 b2 1c 	call	0x3964	; 0x3964 <R503_void_CheckSum>
    393c:	9b 83       	std	Y+3, r25	; 0x03
    393e:	8a 83       	std	Y+2, r24	; 0x02

	/* Check sum Sending*/
	M_UART_u8_UARTSendCharacter((u8)(Local_u16CheckSum >> R503_8_Bits_Shift));
    3940:	8a 81       	ldd	r24, Y+2	; 0x02
    3942:	9b 81       	ldd	r25, Y+3	; 0x03
    3944:	89 2f       	mov	r24, r25
    3946:	99 27       	eor	r25, r25
    3948:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>
	M_UART_u8_UARTSendCharacter(Local_u16CheckSum );
    394c:	8a 81       	ldd	r24, Y+2	; 0x02
    394e:	0e 94 1e 0c 	call	0x183c	; 0x183c <M_UART_u8_UARTSendCharacter>



}
    3952:	28 96       	adiw	r28, 0x08	; 8
    3954:	0f b6       	in	r0, 0x3f	; 63
    3956:	f8 94       	cli
    3958:	de bf       	out	0x3e, r29	; 62
    395a:	0f be       	out	0x3f, r0	; 63
    395c:	cd bf       	out	0x3d, r28	; 61
    395e:	cf 91       	pop	r28
    3960:	df 91       	pop	r29
    3962:	08 95       	ret

00003964 <R503_void_CheckSum>:

/* Brief : This function calculate the Check sum of the package */
static u16 R503_void_CheckSum(u8 Copy_u8PID,u16 Copy_u8PackageLenght, u8 * Local_Au8)
{
    3964:	df 93       	push	r29
    3966:	cf 93       	push	r28
    3968:	cd b7       	in	r28, 0x3d	; 61
    396a:	de b7       	in	r29, 0x3e	; 62
    396c:	28 97       	sbiw	r28, 0x08	; 8
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	8c 83       	std	Y+4, r24	; 0x04
    397a:	7e 83       	std	Y+6, r23	; 0x06
    397c:	6d 83       	std	Y+5, r22	; 0x05
    397e:	58 87       	std	Y+8, r21	; 0x08
    3980:	4f 83       	std	Y+7, r20	; 0x07
	u16 Local_u16CheckSum;

	Local_u16CheckSum = Copy_u8PID + Copy_u8PackageLenght ;
    3982:	8c 81       	ldd	r24, Y+4	; 0x04
    3984:	28 2f       	mov	r18, r24
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	8d 81       	ldd	r24, Y+5	; 0x05
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	82 0f       	add	r24, r18
    398e:	93 1f       	adc	r25, r19
    3990:	9b 83       	std	Y+3, r25	; 0x03
    3992:	8a 83       	std	Y+2, r24	; 0x02

	for (u8 i = 0 ; i < ((u8) Copy_u8PackageLenght) -2  ; i++)
    3994:	19 82       	std	Y+1, r1	; 0x01
    3996:	14 c0       	rjmp	.+40     	; 0x39c0 <R503_void_CheckSum+0x5c>
		Local_u16CheckSum+= Local_Au8[i];
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	28 2f       	mov	r18, r24
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	8f 81       	ldd	r24, Y+7	; 0x07
    39a0:	98 85       	ldd	r25, Y+8	; 0x08
    39a2:	fc 01       	movw	r30, r24
    39a4:	e2 0f       	add	r30, r18
    39a6:	f3 1f       	adc	r31, r19
    39a8:	80 81       	ld	r24, Z
    39aa:	28 2f       	mov	r18, r24
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	9b 81       	ldd	r25, Y+3	; 0x03
    39b2:	82 0f       	add	r24, r18
    39b4:	93 1f       	adc	r25, r19
    39b6:	9b 83       	std	Y+3, r25	; 0x03
    39b8:	8a 83       	std	Y+2, r24	; 0x02
{
	u16 Local_u16CheckSum;

	Local_u16CheckSum = Copy_u8PID + Copy_u8PackageLenght ;

	for (u8 i = 0 ; i < ((u8) Copy_u8PackageLenght) -2  ; i++)
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	8f 5f       	subi	r24, 0xFF	; 255
    39be:	89 83       	std	Y+1, r24	; 0x01
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
    39c2:	28 2f       	mov	r18, r24
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	8d 81       	ldd	r24, Y+5	; 0x05
    39c8:	88 2f       	mov	r24, r24
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	02 97       	sbiw	r24, 0x02	; 2
    39ce:	28 17       	cp	r18, r24
    39d0:	39 07       	cpc	r19, r25
    39d2:	14 f3       	brlt	.-60     	; 0x3998 <R503_void_CheckSum+0x34>
		Local_u16CheckSum+= Local_Au8[i];

	return Local_u16CheckSum;
    39d4:	8a 81       	ldd	r24, Y+2	; 0x02
    39d6:	9b 81       	ldd	r25, Y+3	; 0x03

}
    39d8:	28 96       	adiw	r28, 0x08	; 8
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	cf 91       	pop	r28
    39e6:	df 91       	pop	r29
    39e8:	08 95       	ret

000039ea <R503_u8_CheckACK>:

/* Brief : This function receive the ACK massage from the sensor  */

 u8 R503_u8_CheckACK()
{
    39ea:	df 93       	push	r29
    39ec:	cf 93       	push	r28
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62
    39f2:	2d 97       	sbiw	r28, 0x0d	; 13
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ACKValue ;
	u8 Local_Au8Buffer[12];

	M_UART_u8RecieveBufferSynch(Local_Au8Buffer,12);
    39fe:	ce 01       	movw	r24, r28
    3a00:	02 96       	adiw	r24, 0x02	; 2
    3a02:	6c e0       	ldi	r22, 0x0C	; 12
    3a04:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <M_UART_u8RecieveBufferSynch>
	Local_u8ACKValue = Local_Au8Buffer[9];
    3a08:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a0a:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ACKValue;
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a0e:	2d 96       	adiw	r28, 0x0d	; 13
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	cf 91       	pop	r28
    3a1c:	df 91       	pop	r29
    3a1e:	08 95       	ret

00003a20 <main>:
void App_void_Print_Error_Reason(u8 Local_u8ACKMasssage);



void main (void)
{
    3a20:	0f 93       	push	r16
    3a22:	1f 93       	push	r17
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	cd 58       	subi	r28, 0x8D	; 141
    3a2e:	d0 40       	sbci	r29, 0x00	; 0
    3a30:	0f b6       	in	r0, 0x3f	; 63
    3a32:	f8 94       	cli
    3a34:	de bf       	out	0x3e, r29	; 62
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	cd bf       	out	0x3d, r28	; 61
	/*Initialization */
	M_UART_void_UARTInit();
    3a3a:	0e 94 bf 0b 	call	0x177e	; 0x177e <M_UART_void_UARTInit>
	H_LCD_void_LCD_Init();
    3a3e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <H_LCD_void_LCD_Init>


	while(1)
	{
		/* vale -1 is just indication for the intial value*/
		 Local_u8ACK = -1 ;
    3a42:	fe 01       	movw	r30, r28
    3a44:	e3 57       	subi	r30, 0x73	; 115
    3a46:	ff 4f       	sbci	r31, 0xFF	; 255
    3a48:	8f ef       	ldi	r24, 0xFF	; 255
    3a4a:	80 83       	st	Z, r24


		/* Led when Enrollment is flashing blue color*/
		FingerPs_AuraLedConfig(0x02,125,0X02,125);
    3a4c:	82 e0       	ldi	r24, 0x02	; 2
    3a4e:	6d e7       	ldi	r22, 0x7D	; 125
    3a50:	42 e0       	ldi	r20, 0x02	; 2
    3a52:	2d e7       	ldi	r18, 0x7D	; 125
    3a54:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <FingerPs_AuraLedConfig>

		/* LCD Enrollment massage */
		H_LCD_void_ClearScreen();
    3a58:	0e 94 4f 12 	call	0x249e	; 0x249e <H_LCD_void_ClearScreen>
		H_LCD_void_SendString(" Enrollment phase");
    3a5c:	80 e6       	ldi	r24, 0x60	; 96
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
		H_LCD_void_ClearScreen();
    3a64:	0e 94 4f 12 	call	0x249e	; 0x249e <H_LCD_void_ClearScreen>
		H_LCD_void_SendString("Put your finger ");
    3a68:	82 e7       	ldi	r24, 0x72	; 114
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    3a70:	fe 01       	movw	r30, r28
    3a72:	e7 57       	subi	r30, 0x77	; 119
    3a74:	ff 4f       	sbci	r31, 0xFF	; 255
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	aa e7       	ldi	r26, 0x7A	; 122
    3a7c:	b4 e4       	ldi	r27, 0x44	; 68
    3a7e:	80 83       	st	Z, r24
    3a80:	91 83       	std	Z+1, r25	; 0x01
    3a82:	a2 83       	std	Z+2, r26	; 0x02
    3a84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a86:	8e 01       	movw	r16, r28
    3a88:	0b 57       	subi	r16, 0x7B	; 123
    3a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e7 57       	subi	r30, 0x77	; 119
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	60 81       	ld	r22, Z
    3a94:	71 81       	ldd	r23, Z+1	; 0x01
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	4a e7       	ldi	r20, 0x7A	; 122
    3aa0:	55 e4       	ldi	r21, 0x45	; 69
    3aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	f8 01       	movw	r30, r16
    3aac:	80 83       	st	Z, r24
    3aae:	91 83       	std	Z+1, r25	; 0x01
    3ab0:	a2 83       	std	Z+2, r26	; 0x02
    3ab2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	eb 57       	subi	r30, 0x7B	; 123
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	60 81       	ld	r22, Z
    3abc:	71 81       	ldd	r23, Z+1	; 0x01
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	93 81       	ldd	r25, Z+3	; 0x03
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	40 e8       	ldi	r20, 0x80	; 128
    3ac8:	5f e3       	ldi	r21, 0x3F	; 63
    3aca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ace:	88 23       	and	r24, r24
    3ad0:	44 f4       	brge	.+16     	; 0x3ae2 <main+0xc2>
		__ticks = 1;
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	ed 57       	subi	r30, 0x7D	; 125
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	91 83       	std	Z+1, r25	; 0x01
    3ade:	80 83       	st	Z, r24
    3ae0:	64 c0       	rjmp	.+200    	; 0x3baa <main+0x18a>
	else if (__tmp > 65535)
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	eb 57       	subi	r30, 0x7B	; 123
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	60 81       	ld	r22, Z
    3aea:	71 81       	ldd	r23, Z+1	; 0x01
    3aec:	82 81       	ldd	r24, Z+2	; 0x02
    3aee:	93 81       	ldd	r25, Z+3	; 0x03
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	3f ef       	ldi	r19, 0xFF	; 255
    3af4:	4f e7       	ldi	r20, 0x7F	; 127
    3af6:	57 e4       	ldi	r21, 0x47	; 71
    3af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3afc:	18 16       	cp	r1, r24
    3afe:	0c f0       	brlt	.+2      	; 0x3b02 <main+0xe2>
    3b00:	43 c0       	rjmp	.+134    	; 0x3b88 <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b02:	fe 01       	movw	r30, r28
    3b04:	e7 57       	subi	r30, 0x77	; 119
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	82 81       	ldd	r24, Z+2	; 0x02
    3b0e:	93 81       	ldd	r25, Z+3	; 0x03
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 e2       	ldi	r20, 0x20	; 32
    3b16:	51 e4       	ldi	r21, 0x41	; 65
    3b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	8e 01       	movw	r16, r28
    3b22:	0d 57       	subi	r16, 0x7D	; 125
    3b24:	1f 4f       	sbci	r17, 0xFF	; 255
    3b26:	bc 01       	movw	r22, r24
    3b28:	cd 01       	movw	r24, r26
    3b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	f8 01       	movw	r30, r16
    3b34:	91 83       	std	Z+1, r25	; 0x01
    3b36:	80 83       	st	Z, r24
    3b38:	1f c0       	rjmp	.+62     	; 0x3b78 <main+0x158>
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	ef 57       	subi	r30, 0x7F	; 127
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 e9       	ldi	r24, 0x90	; 144
    3b42:	91 e0       	ldi	r25, 0x01	; 1
    3b44:	91 83       	std	Z+1, r25	; 0x01
    3b46:	80 83       	st	Z, r24
    3b48:	fe 01       	movw	r30, r28
    3b4a:	ef 57       	subi	r30, 0x7F	; 127
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	80 81       	ld	r24, Z
    3b50:	91 81       	ldd	r25, Z+1	; 0x01
    3b52:	01 97       	sbiw	r24, 0x01	; 1
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <main+0x132>
    3b56:	fe 01       	movw	r30, r28
    3b58:	ef 57       	subi	r30, 0x7F	; 127
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	91 83       	std	Z+1, r25	; 0x01
    3b5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b60:	de 01       	movw	r26, r28
    3b62:	ad 57       	subi	r26, 0x7D	; 125
    3b64:	bf 4f       	sbci	r27, 0xFF	; 255
    3b66:	fe 01       	movw	r30, r28
    3b68:	ed 57       	subi	r30, 0x7D	; 125
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	11 96       	adiw	r26, 0x01	; 1
    3b74:	9c 93       	st	X, r25
    3b76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b78:	fe 01       	movw	r30, r28
    3b7a:	ed 57       	subi	r30, 0x7D	; 125
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	80 81       	ld	r24, Z
    3b80:	91 81       	ldd	r25, Z+1	; 0x01
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	d1 f6       	brne	.-76     	; 0x3b3a <main+0x11a>
    3b86:	27 c0       	rjmp	.+78     	; 0x3bd6 <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b88:	8e 01       	movw	r16, r28
    3b8a:	0d 57       	subi	r16, 0x7D	; 125
    3b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8e:	fe 01       	movw	r30, r28
    3b90:	eb 57       	subi	r30, 0x7B	; 123
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	60 81       	ld	r22, Z
    3b96:	71 81       	ldd	r23, Z+1	; 0x01
    3b98:	82 81       	ldd	r24, Z+2	; 0x02
    3b9a:	93 81       	ldd	r25, Z+3	; 0x03
    3b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	80 83       	st	Z, r24
    3baa:	de 01       	movw	r26, r28
    3bac:	a1 58       	subi	r26, 0x81	; 129
    3bae:	bf 4f       	sbci	r27, 0xFF	; 255
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	ed 57       	subi	r30, 0x7D	; 125
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	80 81       	ld	r24, Z
    3bb8:	91 81       	ldd	r25, Z+1	; 0x01
    3bba:	8d 93       	st	X+, r24
    3bbc:	9c 93       	st	X, r25
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e1 58       	subi	r30, 0x81	; 129
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <main+0x1a8>
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e1 58       	subi	r30, 0x81	; 129
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	80 83       	st	Z, r24
		_delay_ms(1000);

		/* Enrollment operation */
		Local_u8ACK = Finger_Ps_EnrollmentOpreation(0x0004);
    3bd6:	84 e0       	ldi	r24, 0x04	; 4
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	0e 94 02 15 	call	0x2a04	; 0x2a04 <Finger_Ps_EnrollmentOpreation>
    3bde:	fe 01       	movw	r30, r28
    3be0:	e3 57       	subi	r30, 0x73	; 115
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	80 83       	st	Z, r24

		/* Check the ACK of the operation */
		if (Local_u8ACK == R503_PROCESS_COMPLETE)
    3be6:	fe 01       	movw	r30, r28
    3be8:	e3 57       	subi	r30, 0x73	; 115
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	80 81       	ld	r24, Z
    3bee:	88 23       	and	r24, r24
    3bf0:	09 f0       	breq	.+2      	; 0x3bf4 <main+0x1d4>
    3bf2:	27 c2       	rjmp	.+1102   	; 0x4042 <main+0x622>
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e5 58       	subi	r30, 0x85	; 133
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	a8 e4       	ldi	r26, 0x48	; 72
    3c00:	b3 e4       	ldi	r27, 0x43	; 67
    3c02:	80 83       	st	Z, r24
    3c04:	91 83       	std	Z+1, r25	; 0x01
    3c06:	a2 83       	std	Z+2, r26	; 0x02
    3c08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c0a:	8e 01       	movw	r16, r28
    3c0c:	09 58       	subi	r16, 0x89	; 137
    3c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c10:	fe 01       	movw	r30, r28
    3c12:	e5 58       	subi	r30, 0x85	; 133
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	60 81       	ld	r22, Z
    3c18:	71 81       	ldd	r23, Z+1	; 0x01
    3c1a:	82 81       	ldd	r24, Z+2	; 0x02
    3c1c:	93 81       	ldd	r25, Z+3	; 0x03
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	4a e7       	ldi	r20, 0x7A	; 122
    3c24:	55 e4       	ldi	r21, 0x45	; 69
    3c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	f8 01       	movw	r30, r16
    3c30:	80 83       	st	Z, r24
    3c32:	91 83       	std	Z+1, r25	; 0x01
    3c34:	a2 83       	std	Z+2, r26	; 0x02
    3c36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c38:	fe 01       	movw	r30, r28
    3c3a:	e9 58       	subi	r30, 0x89	; 137
    3c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3e:	60 81       	ld	r22, Z
    3c40:	71 81       	ldd	r23, Z+1	; 0x01
    3c42:	82 81       	ldd	r24, Z+2	; 0x02
    3c44:	93 81       	ldd	r25, Z+3	; 0x03
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e8       	ldi	r20, 0x80	; 128
    3c4c:	5f e3       	ldi	r21, 0x3F	; 63
    3c4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c52:	88 23       	and	r24, r24
    3c54:	44 f4       	brge	.+16     	; 0x3c66 <main+0x246>
		__ticks = 1;
    3c56:	fe 01       	movw	r30, r28
    3c58:	eb 58       	subi	r30, 0x8B	; 139
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	80 83       	st	Z, r24
    3c64:	64 c0       	rjmp	.+200    	; 0x3d2e <main+0x30e>
	else if (__tmp > 65535)
    3c66:	fe 01       	movw	r30, r28
    3c68:	e9 58       	subi	r30, 0x89	; 137
    3c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6c:	60 81       	ld	r22, Z
    3c6e:	71 81       	ldd	r23, Z+1	; 0x01
    3c70:	82 81       	ldd	r24, Z+2	; 0x02
    3c72:	93 81       	ldd	r25, Z+3	; 0x03
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	3f ef       	ldi	r19, 0xFF	; 255
    3c78:	4f e7       	ldi	r20, 0x7F	; 127
    3c7a:	57 e4       	ldi	r21, 0x47	; 71
    3c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c80:	18 16       	cp	r1, r24
    3c82:	0c f0       	brlt	.+2      	; 0x3c86 <main+0x266>
    3c84:	43 c0       	rjmp	.+134    	; 0x3d0c <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c86:	fe 01       	movw	r30, r28
    3c88:	e5 58       	subi	r30, 0x85	; 133
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	60 81       	ld	r22, Z
    3c8e:	71 81       	ldd	r23, Z+1	; 0x01
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e2       	ldi	r20, 0x20	; 32
    3c9a:	51 e4       	ldi	r21, 0x41	; 65
    3c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	8e 01       	movw	r16, r28
    3ca6:	0b 58       	subi	r16, 0x8B	; 139
    3ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    3caa:	bc 01       	movw	r22, r24
    3cac:	cd 01       	movw	r24, r26
    3cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	f8 01       	movw	r30, r16
    3cb8:	91 83       	std	Z+1, r25	; 0x01
    3cba:	80 83       	st	Z, r24
    3cbc:	1f c0       	rjmp	.+62     	; 0x3cfc <main+0x2dc>
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	ed 58       	subi	r30, 0x8D	; 141
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 e9       	ldi	r24, 0x90	; 144
    3cc6:	91 e0       	ldi	r25, 0x01	; 1
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	80 83       	st	Z, r24
    3ccc:	fe 01       	movw	r30, r28
    3cce:	ed 58       	subi	r30, 0x8D	; 141
    3cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd2:	80 81       	ld	r24, Z
    3cd4:	91 81       	ldd	r25, Z+1	; 0x01
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	f1 f7       	brne	.-4      	; 0x3cd6 <main+0x2b6>
    3cda:	fe 01       	movw	r30, r28
    3cdc:	ed 58       	subi	r30, 0x8D	; 141
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	91 83       	std	Z+1, r25	; 0x01
    3ce2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ce4:	de 01       	movw	r26, r28
    3ce6:	ab 58       	subi	r26, 0x8B	; 139
    3ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cea:	fe 01       	movw	r30, r28
    3cec:	eb 58       	subi	r30, 0x8B	; 139
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	11 96       	adiw	r26, 0x01	; 1
    3cf8:	9c 93       	st	X, r25
    3cfa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	eb 58       	subi	r30, 0x8B	; 139
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	80 81       	ld	r24, Z
    3d04:	91 81       	ldd	r25, Z+1	; 0x01
    3d06:	00 97       	sbiw	r24, 0x00	; 0
    3d08:	d1 f6       	brne	.-76     	; 0x3cbe <main+0x29e>
    3d0a:	27 c0       	rjmp	.+78     	; 0x3d5a <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d0c:	8e 01       	movw	r16, r28
    3d0e:	0b 58       	subi	r16, 0x8B	; 139
    3d10:	1f 4f       	sbci	r17, 0xFF	; 255
    3d12:	fe 01       	movw	r30, r28
    3d14:	e9 58       	subi	r30, 0x89	; 137
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d24:	dc 01       	movw	r26, r24
    3d26:	cb 01       	movw	r24, r22
    3d28:	f8 01       	movw	r30, r16
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
    3d2e:	de 01       	movw	r26, r28
    3d30:	af 58       	subi	r26, 0x8F	; 143
    3d32:	bf 4f       	sbci	r27, 0xFF	; 255
    3d34:	fe 01       	movw	r30, r28
    3d36:	eb 58       	subi	r30, 0x8B	; 139
    3d38:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3a:	80 81       	ld	r24, Z
    3d3c:	91 81       	ldd	r25, Z+1	; 0x01
    3d3e:	8d 93       	st	X+, r24
    3d40:	9c 93       	st	X, r25
    3d42:	fe 01       	movw	r30, r28
    3d44:	ef 58       	subi	r30, 0x8F	; 143
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	80 81       	ld	r24, Z
    3d4a:	91 81       	ldd	r25, Z+1	; 0x01
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <main+0x32c>
    3d50:	fe 01       	movw	r30, r28
    3d52:	ef 58       	subi	r30, 0x8F	; 143
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	91 83       	std	Z+1, r25	; 0x01
    3d58:	80 83       	st	Z, r24
		{
			/* LCD Enrollment success massage */
			_delay_ms(200);
			H_LCD_void_ClearScreen();
    3d5a:	0e 94 4f 12 	call	0x249e	; 0x249e <H_LCD_void_ClearScreen>
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e3 59       	subi	r30, 0x93	; 147
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	aa ef       	ldi	r26, 0xFA	; 250
    3d6a:	b3 e4       	ldi	r27, 0x43	; 67
    3d6c:	80 83       	st	Z, r24
    3d6e:	91 83       	std	Z+1, r25	; 0x01
    3d70:	a2 83       	std	Z+2, r26	; 0x02
    3d72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d74:	8e 01       	movw	r16, r28
    3d76:	07 59       	subi	r16, 0x97	; 151
    3d78:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e3 59       	subi	r30, 0x93	; 147
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	60 81       	ld	r22, Z
    3d82:	71 81       	ldd	r23, Z+1	; 0x01
    3d84:	82 81       	ldd	r24, Z+2	; 0x02
    3d86:	93 81       	ldd	r25, Z+3	; 0x03
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	4a e7       	ldi	r20, 0x7A	; 122
    3d8e:	55 e4       	ldi	r21, 0x45	; 69
    3d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d94:	dc 01       	movw	r26, r24
    3d96:	cb 01       	movw	r24, r22
    3d98:	f8 01       	movw	r30, r16
    3d9a:	80 83       	st	Z, r24
    3d9c:	91 83       	std	Z+1, r25	; 0x01
    3d9e:	a2 83       	std	Z+2, r26	; 0x02
    3da0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3da2:	fe 01       	movw	r30, r28
    3da4:	e7 59       	subi	r30, 0x97	; 151
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	60 81       	ld	r22, Z
    3daa:	71 81       	ldd	r23, Z+1	; 0x01
    3dac:	82 81       	ldd	r24, Z+2	; 0x02
    3dae:	93 81       	ldd	r25, Z+3	; 0x03
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	40 e8       	ldi	r20, 0x80	; 128
    3db6:	5f e3       	ldi	r21, 0x3F	; 63
    3db8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dbc:	88 23       	and	r24, r24
    3dbe:	44 f4       	brge	.+16     	; 0x3dd0 <main+0x3b0>
		__ticks = 1;
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	e9 59       	subi	r30, 0x99	; 153
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	80 83       	st	Z, r24
    3dce:	64 c0       	rjmp	.+200    	; 0x3e98 <main+0x478>
	else if (__tmp > 65535)
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e7 59       	subi	r30, 0x97	; 151
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	60 81       	ld	r22, Z
    3dd8:	71 81       	ldd	r23, Z+1	; 0x01
    3dda:	82 81       	ldd	r24, Z+2	; 0x02
    3ddc:	93 81       	ldd	r25, Z+3	; 0x03
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	3f ef       	ldi	r19, 0xFF	; 255
    3de2:	4f e7       	ldi	r20, 0x7F	; 127
    3de4:	57 e4       	ldi	r21, 0x47	; 71
    3de6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dea:	18 16       	cp	r1, r24
    3dec:	0c f0       	brlt	.+2      	; 0x3df0 <main+0x3d0>
    3dee:	43 c0       	rjmp	.+134    	; 0x3e76 <main+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df0:	fe 01       	movw	r30, r28
    3df2:	e3 59       	subi	r30, 0x93	; 147
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	60 81       	ld	r22, Z
    3df8:	71 81       	ldd	r23, Z+1	; 0x01
    3dfa:	82 81       	ldd	r24, Z+2	; 0x02
    3dfc:	93 81       	ldd	r25, Z+3	; 0x03
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	40 e2       	ldi	r20, 0x20	; 32
    3e04:	51 e4       	ldi	r21, 0x41	; 65
    3e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	8e 01       	movw	r16, r28
    3e10:	09 59       	subi	r16, 0x99	; 153
    3e12:	1f 4f       	sbci	r17, 0xFF	; 255
    3e14:	bc 01       	movw	r22, r24
    3e16:	cd 01       	movw	r24, r26
    3e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	f8 01       	movw	r30, r16
    3e22:	91 83       	std	Z+1, r25	; 0x01
    3e24:	80 83       	st	Z, r24
    3e26:	1f c0       	rjmp	.+62     	; 0x3e66 <main+0x446>
    3e28:	fe 01       	movw	r30, r28
    3e2a:	eb 59       	subi	r30, 0x9B	; 155
    3e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2e:	80 e9       	ldi	r24, 0x90	; 144
    3e30:	91 e0       	ldi	r25, 0x01	; 1
    3e32:	91 83       	std	Z+1, r25	; 0x01
    3e34:	80 83       	st	Z, r24
    3e36:	fe 01       	movw	r30, r28
    3e38:	eb 59       	subi	r30, 0x9B	; 155
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	80 81       	ld	r24, Z
    3e3e:	91 81       	ldd	r25, Z+1	; 0x01
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	f1 f7       	brne	.-4      	; 0x3e40 <main+0x420>
    3e44:	fe 01       	movw	r30, r28
    3e46:	eb 59       	subi	r30, 0x9B	; 155
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e4e:	de 01       	movw	r26, r28
    3e50:	a9 59       	subi	r26, 0x99	; 153
    3e52:	bf 4f       	sbci	r27, 0xFF	; 255
    3e54:	fe 01       	movw	r30, r28
    3e56:	e9 59       	subi	r30, 0x99	; 153
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	80 81       	ld	r24, Z
    3e5c:	91 81       	ldd	r25, Z+1	; 0x01
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	11 96       	adiw	r26, 0x01	; 1
    3e62:	9c 93       	st	X, r25
    3e64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e66:	fe 01       	movw	r30, r28
    3e68:	e9 59       	subi	r30, 0x99	; 153
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	d1 f6       	brne	.-76     	; 0x3e28 <main+0x408>
    3e74:	27 c0       	rjmp	.+78     	; 0x3ec4 <main+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e76:	8e 01       	movw	r16, r28
    3e78:	09 59       	subi	r16, 0x99	; 153
    3e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e7 59       	subi	r30, 0x97	; 151
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	f8 01       	movw	r30, r16
    3e94:	91 83       	std	Z+1, r25	; 0x01
    3e96:	80 83       	st	Z, r24
    3e98:	de 01       	movw	r26, r28
    3e9a:	ad 59       	subi	r26, 0x9D	; 157
    3e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	e9 59       	subi	r30, 0x99	; 153
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	80 81       	ld	r24, Z
    3ea6:	91 81       	ldd	r25, Z+1	; 0x01
    3ea8:	8d 93       	st	X+, r24
    3eaa:	9c 93       	st	X, r25
    3eac:	fe 01       	movw	r30, r28
    3eae:	ed 59       	subi	r30, 0x9D	; 157
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	f1 f7       	brne	.-4      	; 0x3eb6 <main+0x496>
    3eba:	fe 01       	movw	r30, r28
    3ebc:	ed 59       	subi	r30, 0x9D	; 157
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	80 83       	st	Z, r24
			_delay_ms(500);
			H_LCD_void_SendString("enrollment Success");
    3ec4:	83 e8       	ldi	r24, 0x83	; 131
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
			/* Led when Enrollment success is flashing Purple color*/
			FingerPs_AuraLedConfig(0x02,125,0X03,125);
    3ecc:	82 e0       	ldi	r24, 0x02	; 2
    3ece:	6d e7       	ldi	r22, 0x7D	; 125
    3ed0:	43 e0       	ldi	r20, 0x03	; 3
    3ed2:	2d e7       	ldi	r18, 0x7D	; 125
    3ed4:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <FingerPs_AuraLedConfig>
    3ed8:	fe 01       	movw	r30, r28
    3eda:	e1 5a       	subi	r30, 0xA1	; 161
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	90 e0       	ldi	r25, 0x00	; 0
    3ee2:	aa ef       	ldi	r26, 0xFA	; 250
    3ee4:	b4 e4       	ldi	r27, 0x44	; 68
    3ee6:	80 83       	st	Z, r24
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	a2 83       	std	Z+2, r26	; 0x02
    3eec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eee:	8e 01       	movw	r16, r28
    3ef0:	05 5a       	subi	r16, 0xA5	; 165
    3ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e1 5a       	subi	r30, 0xA1	; 161
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	60 81       	ld	r22, Z
    3efc:	71 81       	ldd	r23, Z+1	; 0x01
    3efe:	82 81       	ldd	r24, Z+2	; 0x02
    3f00:	93 81       	ldd	r25, Z+3	; 0x03
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	4a e7       	ldi	r20, 0x7A	; 122
    3f08:	55 e4       	ldi	r21, 0x45	; 69
    3f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	f8 01       	movw	r30, r16
    3f14:	80 83       	st	Z, r24
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	a2 83       	std	Z+2, r26	; 0x02
    3f1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	e5 5a       	subi	r30, 0xA5	; 165
    3f20:	ff 4f       	sbci	r31, 0xFF	; 255
    3f22:	60 81       	ld	r22, Z
    3f24:	71 81       	ldd	r23, Z+1	; 0x01
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	40 e8       	ldi	r20, 0x80	; 128
    3f30:	5f e3       	ldi	r21, 0x3F	; 63
    3f32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f36:	88 23       	and	r24, r24
    3f38:	44 f4       	brge	.+16     	; 0x3f4a <main+0x52a>
		__ticks = 1;
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e7 5a       	subi	r30, 0xA7	; 167
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	91 83       	std	Z+1, r25	; 0x01
    3f46:	80 83       	st	Z, r24
    3f48:	64 c0       	rjmp	.+200    	; 0x4012 <main+0x5f2>
	else if (__tmp > 65535)
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e5 5a       	subi	r30, 0xA5	; 165
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	60 81       	ld	r22, Z
    3f52:	71 81       	ldd	r23, Z+1	; 0x01
    3f54:	82 81       	ldd	r24, Z+2	; 0x02
    3f56:	93 81       	ldd	r25, Z+3	; 0x03
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	3f ef       	ldi	r19, 0xFF	; 255
    3f5c:	4f e7       	ldi	r20, 0x7F	; 127
    3f5e:	57 e4       	ldi	r21, 0x47	; 71
    3f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f64:	18 16       	cp	r1, r24
    3f66:	0c f0       	brlt	.+2      	; 0x3f6a <main+0x54a>
    3f68:	43 c0       	rjmp	.+134    	; 0x3ff0 <main+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e1 5a       	subi	r30, 0xA1	; 161
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	60 81       	ld	r22, Z
    3f72:	71 81       	ldd	r23, Z+1	; 0x01
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	40 e2       	ldi	r20, 0x20	; 32
    3f7e:	51 e4       	ldi	r21, 0x41	; 65
    3f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	8e 01       	movw	r16, r28
    3f8a:	07 5a       	subi	r16, 0xA7	; 167
    3f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f8e:	bc 01       	movw	r22, r24
    3f90:	cd 01       	movw	r24, r26
    3f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f96:	dc 01       	movw	r26, r24
    3f98:	cb 01       	movw	r24, r22
    3f9a:	f8 01       	movw	r30, r16
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	80 83       	st	Z, r24
    3fa0:	1f c0       	rjmp	.+62     	; 0x3fe0 <main+0x5c0>
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e9 5a       	subi	r30, 0xA9	; 169
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	80 e9       	ldi	r24, 0x90	; 144
    3faa:	91 e0       	ldi	r25, 0x01	; 1
    3fac:	91 83       	std	Z+1, r25	; 0x01
    3fae:	80 83       	st	Z, r24
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e9 5a       	subi	r30, 0xA9	; 169
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	91 81       	ldd	r25, Z+1	; 0x01
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	f1 f7       	brne	.-4      	; 0x3fba <main+0x59a>
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e9 5a       	subi	r30, 0xA9	; 169
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	91 83       	std	Z+1, r25	; 0x01
    3fc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc8:	de 01       	movw	r26, r28
    3fca:	a7 5a       	subi	r26, 0xA7	; 167
    3fcc:	bf 4f       	sbci	r27, 0xFF	; 255
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e7 5a       	subi	r30, 0xA7	; 167
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	11 96       	adiw	r26, 0x01	; 1
    3fdc:	9c 93       	st	X, r25
    3fde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	e7 5a       	subi	r30, 0xA7	; 167
    3fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe6:	80 81       	ld	r24, Z
    3fe8:	91 81       	ldd	r25, Z+1	; 0x01
    3fea:	00 97       	sbiw	r24, 0x00	; 0
    3fec:	d1 f6       	brne	.-76     	; 0x3fa2 <main+0x582>
    3fee:	ee c0       	rjmp	.+476    	; 0x41cc <main+0x7ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff0:	8e 01       	movw	r16, r28
    3ff2:	07 5a       	subi	r16, 0xA7	; 167
    3ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e5 5a       	subi	r30, 0xA5	; 165
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	60 81       	ld	r22, Z
    3ffe:	71 81       	ldd	r23, Z+1	; 0x01
    4000:	82 81       	ldd	r24, Z+2	; 0x02
    4002:	93 81       	ldd	r25, Z+3	; 0x03
    4004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	f8 01       	movw	r30, r16
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	80 83       	st	Z, r24
    4012:	de 01       	movw	r26, r28
    4014:	ab 5a       	subi	r26, 0xAB	; 171
    4016:	bf 4f       	sbci	r27, 0xFF	; 255
    4018:	fe 01       	movw	r30, r28
    401a:	e7 5a       	subi	r30, 0xA7	; 167
    401c:	ff 4f       	sbci	r31, 0xFF	; 255
    401e:	80 81       	ld	r24, Z
    4020:	91 81       	ldd	r25, Z+1	; 0x01
    4022:	11 96       	adiw	r26, 0x01	; 1
    4024:	9c 93       	st	X, r25
    4026:	8e 93       	st	-X, r24
    4028:	fe 01       	movw	r30, r28
    402a:	eb 5a       	subi	r30, 0xAB	; 171
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	80 81       	ld	r24, Z
    4030:	91 81       	ldd	r25, Z+1	; 0x01
    4032:	01 97       	sbiw	r24, 0x01	; 1
    4034:	f1 f7       	brne	.-4      	; 0x4032 <main+0x612>
    4036:	fe 01       	movw	r30, r28
    4038:	eb 5a       	subi	r30, 0xAB	; 171
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	80 83       	st	Z, r24
    4040:	c5 c0       	rjmp	.+394    	; 0x41cc <main+0x7ac>
			_delay_ms(2000);
		}
		else
		{
			/* Enrollment Fail Get reason */
			H_LCD_void_ClearScreen();
    4042:	0e 94 4f 12 	call	0x249e	; 0x249e <H_LCD_void_ClearScreen>
			/* Led when Enrollment success is flashing Purple color*/
			FingerPs_AuraLedConfig(0x02,125,0X01,125);
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	6d e7       	ldi	r22, 0x7D	; 125
    404a:	41 e0       	ldi	r20, 0x01	; 1
    404c:	2d e7       	ldi	r18, 0x7D	; 125
    404e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <FingerPs_AuraLedConfig>
			/* LCD Enrollment fail massage */
			H_LCD_void_SendString("enrollment fail");
    4052:	86 e9       	ldi	r24, 0x96	; 150
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    405a:	fe 01       	movw	r30, r28
    405c:	ef 5a       	subi	r30, 0xAF	; 175
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	90 e8       	ldi	r25, 0x80	; 128
    4064:	ab eb       	ldi	r26, 0xBB	; 187
    4066:	b4 e4       	ldi	r27, 0x44	; 68
    4068:	80 83       	st	Z, r24
    406a:	91 83       	std	Z+1, r25	; 0x01
    406c:	a2 83       	std	Z+2, r26	; 0x02
    406e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4070:	8e 01       	movw	r16, r28
    4072:	03 5b       	subi	r16, 0xB3	; 179
    4074:	1f 4f       	sbci	r17, 0xFF	; 255
    4076:	fe 01       	movw	r30, r28
    4078:	ef 5a       	subi	r30, 0xAF	; 175
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	60 81       	ld	r22, Z
    407e:	71 81       	ldd	r23, Z+1	; 0x01
    4080:	82 81       	ldd	r24, Z+2	; 0x02
    4082:	93 81       	ldd	r25, Z+3	; 0x03
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	4a e7       	ldi	r20, 0x7A	; 122
    408a:	55 e4       	ldi	r21, 0x45	; 69
    408c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	f8 01       	movw	r30, r16
    4096:	80 83       	st	Z, r24
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	a2 83       	std	Z+2, r26	; 0x02
    409c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    409e:	fe 01       	movw	r30, r28
    40a0:	e3 5b       	subi	r30, 0xB3	; 179
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	60 81       	ld	r22, Z
    40a6:	71 81       	ldd	r23, Z+1	; 0x01
    40a8:	82 81       	ldd	r24, Z+2	; 0x02
    40aa:	93 81       	ldd	r25, Z+3	; 0x03
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	40 e8       	ldi	r20, 0x80	; 128
    40b2:	5f e3       	ldi	r21, 0x3F	; 63
    40b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40b8:	88 23       	and	r24, r24
    40ba:	44 f4       	brge	.+16     	; 0x40cc <main+0x6ac>
		__ticks = 1;
    40bc:	fe 01       	movw	r30, r28
    40be:	e5 5b       	subi	r30, 0xB5	; 181
    40c0:	ff 4f       	sbci	r31, 0xFF	; 255
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	91 83       	std	Z+1, r25	; 0x01
    40c8:	80 83       	st	Z, r24
    40ca:	64 c0       	rjmp	.+200    	; 0x4194 <main+0x774>
	else if (__tmp > 65535)
    40cc:	fe 01       	movw	r30, r28
    40ce:	e3 5b       	subi	r30, 0xB3	; 179
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	60 81       	ld	r22, Z
    40d4:	71 81       	ldd	r23, Z+1	; 0x01
    40d6:	82 81       	ldd	r24, Z+2	; 0x02
    40d8:	93 81       	ldd	r25, Z+3	; 0x03
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	3f ef       	ldi	r19, 0xFF	; 255
    40de:	4f e7       	ldi	r20, 0x7F	; 127
    40e0:	57 e4       	ldi	r21, 0x47	; 71
    40e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40e6:	18 16       	cp	r1, r24
    40e8:	0c f0       	brlt	.+2      	; 0x40ec <main+0x6cc>
    40ea:	43 c0       	rjmp	.+134    	; 0x4172 <main+0x752>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ec:	fe 01       	movw	r30, r28
    40ee:	ef 5a       	subi	r30, 0xAF	; 175
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	60 81       	ld	r22, Z
    40f4:	71 81       	ldd	r23, Z+1	; 0x01
    40f6:	82 81       	ldd	r24, Z+2	; 0x02
    40f8:	93 81       	ldd	r25, Z+3	; 0x03
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	40 e2       	ldi	r20, 0x20	; 32
    4100:	51 e4       	ldi	r21, 0x41	; 65
    4102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	8e 01       	movw	r16, r28
    410c:	05 5b       	subi	r16, 0xB5	; 181
    410e:	1f 4f       	sbci	r17, 0xFF	; 255
    4110:	bc 01       	movw	r22, r24
    4112:	cd 01       	movw	r24, r26
    4114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4118:	dc 01       	movw	r26, r24
    411a:	cb 01       	movw	r24, r22
    411c:	f8 01       	movw	r30, r16
    411e:	91 83       	std	Z+1, r25	; 0x01
    4120:	80 83       	st	Z, r24
    4122:	1f c0       	rjmp	.+62     	; 0x4162 <main+0x742>
    4124:	fe 01       	movw	r30, r28
    4126:	e7 5b       	subi	r30, 0xB7	; 183
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	80 e9       	ldi	r24, 0x90	; 144
    412c:	91 e0       	ldi	r25, 0x01	; 1
    412e:	91 83       	std	Z+1, r25	; 0x01
    4130:	80 83       	st	Z, r24
    4132:	fe 01       	movw	r30, r28
    4134:	e7 5b       	subi	r30, 0xB7	; 183
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	80 81       	ld	r24, Z
    413a:	91 81       	ldd	r25, Z+1	; 0x01
    413c:	01 97       	sbiw	r24, 0x01	; 1
    413e:	f1 f7       	brne	.-4      	; 0x413c <main+0x71c>
    4140:	fe 01       	movw	r30, r28
    4142:	e7 5b       	subi	r30, 0xB7	; 183
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	91 83       	std	Z+1, r25	; 0x01
    4148:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    414a:	de 01       	movw	r26, r28
    414c:	a5 5b       	subi	r26, 0xB5	; 181
    414e:	bf 4f       	sbci	r27, 0xFF	; 255
    4150:	fe 01       	movw	r30, r28
    4152:	e5 5b       	subi	r30, 0xB5	; 181
    4154:	ff 4f       	sbci	r31, 0xFF	; 255
    4156:	80 81       	ld	r24, Z
    4158:	91 81       	ldd	r25, Z+1	; 0x01
    415a:	01 97       	sbiw	r24, 0x01	; 1
    415c:	11 96       	adiw	r26, 0x01	; 1
    415e:	9c 93       	st	X, r25
    4160:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4162:	fe 01       	movw	r30, r28
    4164:	e5 5b       	subi	r30, 0xB5	; 181
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	80 81       	ld	r24, Z
    416a:	91 81       	ldd	r25, Z+1	; 0x01
    416c:	00 97       	sbiw	r24, 0x00	; 0
    416e:	d1 f6       	brne	.-76     	; 0x4124 <main+0x704>
    4170:	27 c0       	rjmp	.+78     	; 0x41c0 <main+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4172:	8e 01       	movw	r16, r28
    4174:	05 5b       	subi	r16, 0xB5	; 181
    4176:	1f 4f       	sbci	r17, 0xFF	; 255
    4178:	fe 01       	movw	r30, r28
    417a:	e3 5b       	subi	r30, 0xB3	; 179
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	60 81       	ld	r22, Z
    4180:	71 81       	ldd	r23, Z+1	; 0x01
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	93 81       	ldd	r25, Z+3	; 0x03
    4186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	f8 01       	movw	r30, r16
    4190:	91 83       	std	Z+1, r25	; 0x01
    4192:	80 83       	st	Z, r24
    4194:	de 01       	movw	r26, r28
    4196:	a9 5b       	subi	r26, 0xB9	; 185
    4198:	bf 4f       	sbci	r27, 0xFF	; 255
    419a:	fe 01       	movw	r30, r28
    419c:	e5 5b       	subi	r30, 0xB5	; 181
    419e:	ff 4f       	sbci	r31, 0xFF	; 255
    41a0:	80 81       	ld	r24, Z
    41a2:	91 81       	ldd	r25, Z+1	; 0x01
    41a4:	8d 93       	st	X+, r24
    41a6:	9c 93       	st	X, r25
    41a8:	fe 01       	movw	r30, r28
    41aa:	e9 5b       	subi	r30, 0xB9	; 185
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	80 81       	ld	r24, Z
    41b0:	91 81       	ldd	r25, Z+1	; 0x01
    41b2:	01 97       	sbiw	r24, 0x01	; 1
    41b4:	f1 f7       	brne	.-4      	; 0x41b2 <main+0x792>
    41b6:	fe 01       	movw	r30, r28
    41b8:	e9 5b       	subi	r30, 0xB9	; 185
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	91 83       	std	Z+1, r25	; 0x01
    41be:	80 83       	st	Z, r24
			_delay_ms(1500);
			App_void_Print_Error_Reason(Local_u8ACK);
    41c0:	fe 01       	movw	r30, r28
    41c2:	e3 57       	subi	r30, 0x73	; 115
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	80 81       	ld	r24, Z
    41c8:	0e 94 57 23 	call	0x46ae	; 0x46ae <App_void_Print_Error_Reason>
    41cc:	fe 01       	movw	r30, r28
    41ce:	ed 5b       	subi	r30, 0xBD	; 189
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	80 e0       	ldi	r24, 0x00	; 0
    41d4:	90 e8       	ldi	r25, 0x80	; 128
    41d6:	ab eb       	ldi	r26, 0xBB	; 187
    41d8:	b4 e4       	ldi	r27, 0x44	; 68
    41da:	80 83       	st	Z, r24
    41dc:	91 83       	std	Z+1, r25	; 0x01
    41de:	a2 83       	std	Z+2, r26	; 0x02
    41e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41e2:	8e 01       	movw	r16, r28
    41e4:	01 5c       	subi	r16, 0xC1	; 193
    41e6:	1f 4f       	sbci	r17, 0xFF	; 255
    41e8:	fe 01       	movw	r30, r28
    41ea:	ed 5b       	subi	r30, 0xBD	; 189
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	60 81       	ld	r22, Z
    41f0:	71 81       	ldd	r23, Z+1	; 0x01
    41f2:	82 81       	ldd	r24, Z+2	; 0x02
    41f4:	93 81       	ldd	r25, Z+3	; 0x03
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	4a e7       	ldi	r20, 0x7A	; 122
    41fc:	55 e4       	ldi	r21, 0x45	; 69
    41fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	f8 01       	movw	r30, r16
    4208:	80 83       	st	Z, r24
    420a:	91 83       	std	Z+1, r25	; 0x01
    420c:	a2 83       	std	Z+2, r26	; 0x02
    420e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4210:	fe 01       	movw	r30, r28
    4212:	ff 96       	adiw	r30, 0x3f	; 63
    4214:	60 81       	ld	r22, Z
    4216:	71 81       	ldd	r23, Z+1	; 0x01
    4218:	82 81       	ldd	r24, Z+2	; 0x02
    421a:	93 81       	ldd	r25, Z+3	; 0x03
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	40 e8       	ldi	r20, 0x80	; 128
    4222:	5f e3       	ldi	r21, 0x3F	; 63
    4224:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4228:	88 23       	and	r24, r24
    422a:	2c f4       	brge	.+10     	; 0x4236 <main+0x816>
		__ticks = 1;
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	9e af       	std	Y+62, r25	; 0x3e
    4232:	8d af       	std	Y+61, r24	; 0x3d
    4234:	46 c0       	rjmp	.+140    	; 0x42c2 <main+0x8a2>
	else if (__tmp > 65535)
    4236:	fe 01       	movw	r30, r28
    4238:	ff 96       	adiw	r30, 0x3f	; 63
    423a:	60 81       	ld	r22, Z
    423c:	71 81       	ldd	r23, Z+1	; 0x01
    423e:	82 81       	ldd	r24, Z+2	; 0x02
    4240:	93 81       	ldd	r25, Z+3	; 0x03
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	3f ef       	ldi	r19, 0xFF	; 255
    4246:	4f e7       	ldi	r20, 0x7F	; 127
    4248:	57 e4       	ldi	r21, 0x47	; 71
    424a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    424e:	18 16       	cp	r1, r24
    4250:	64 f5       	brge	.+88     	; 0x42aa <main+0x88a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4252:	fe 01       	movw	r30, r28
    4254:	ed 5b       	subi	r30, 0xBD	; 189
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	60 81       	ld	r22, Z
    425a:	71 81       	ldd	r23, Z+1	; 0x01
    425c:	82 81       	ldd	r24, Z+2	; 0x02
    425e:	93 81       	ldd	r25, Z+3	; 0x03
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	40 e2       	ldi	r20, 0x20	; 32
    4266:	51 e4       	ldi	r21, 0x41	; 65
    4268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	bc 01       	movw	r22, r24
    4272:	cd 01       	movw	r24, r26
    4274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4278:	dc 01       	movw	r26, r24
    427a:	cb 01       	movw	r24, r22
    427c:	9e af       	std	Y+62, r25	; 0x3e
    427e:	8d af       	std	Y+61, r24	; 0x3d
    4280:	0f c0       	rjmp	.+30     	; 0x42a0 <main+0x880>
    4282:	80 e9       	ldi	r24, 0x90	; 144
    4284:	91 e0       	ldi	r25, 0x01	; 1
    4286:	9c af       	std	Y+60, r25	; 0x3c
    4288:	8b af       	std	Y+59, r24	; 0x3b
    428a:	8b ad       	ldd	r24, Y+59	; 0x3b
    428c:	9c ad       	ldd	r25, Y+60	; 0x3c
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	f1 f7       	brne	.-4      	; 0x428e <main+0x86e>
    4292:	9c af       	std	Y+60, r25	; 0x3c
    4294:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4296:	8d ad       	ldd	r24, Y+61	; 0x3d
    4298:	9e ad       	ldd	r25, Y+62	; 0x3e
    429a:	01 97       	sbiw	r24, 0x01	; 1
    429c:	9e af       	std	Y+62, r25	; 0x3e
    429e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    42a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	69 f7       	brne	.-38     	; 0x4282 <main+0x862>
    42a8:	16 c0       	rjmp	.+44     	; 0x42d6 <main+0x8b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42aa:	fe 01       	movw	r30, r28
    42ac:	ff 96       	adiw	r30, 0x3f	; 63
    42ae:	60 81       	ld	r22, Z
    42b0:	71 81       	ldd	r23, Z+1	; 0x01
    42b2:	82 81       	ldd	r24, Z+2	; 0x02
    42b4:	93 81       	ldd	r25, Z+3	; 0x03
    42b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	9e af       	std	Y+62, r25	; 0x3e
    42c0:	8d af       	std	Y+61, r24	; 0x3d
    42c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    42c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    42c6:	9a af       	std	Y+58, r25	; 0x3a
    42c8:	89 af       	std	Y+57, r24	; 0x39
    42ca:	89 ad       	ldd	r24, Y+57	; 0x39
    42cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <main+0x8ae>
    42d2:	9a af       	std	Y+58, r25	; 0x3a
    42d4:	89 af       	std	Y+57, r24	; 0x39
		}

		/* LCD Matching operation massage*/
		_delay_ms(1500);
		H_LCD_void_ClearScreen();;
    42d6:	0e 94 4f 12 	call	0x249e	; 0x249e <H_LCD_void_ClearScreen>
		H_LCD_void_SendString(" now matching");
    42da:	86 ea       	ldi	r24, 0xA6	; 166
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e8       	ldi	r25, 0x80	; 128
    42e6:	ab eb       	ldi	r26, 0xBB	; 187
    42e8:	b4 e4       	ldi	r27, 0x44	; 68
    42ea:	8d ab       	std	Y+53, r24	; 0x35
    42ec:	9e ab       	std	Y+54, r25	; 0x36
    42ee:	af ab       	std	Y+55, r26	; 0x37
    42f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f2:	6d a9       	ldd	r22, Y+53	; 0x35
    42f4:	7e a9       	ldd	r23, Y+54	; 0x36
    42f6:	8f a9       	ldd	r24, Y+55	; 0x37
    42f8:	98 ad       	ldd	r25, Y+56	; 0x38
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	4a e7       	ldi	r20, 0x7A	; 122
    4300:	55 e4       	ldi	r21, 0x45	; 69
    4302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	89 ab       	std	Y+49, r24	; 0x31
    430c:	9a ab       	std	Y+50, r25	; 0x32
    430e:	ab ab       	std	Y+51, r26	; 0x33
    4310:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4312:	69 a9       	ldd	r22, Y+49	; 0x31
    4314:	7a a9       	ldd	r23, Y+50	; 0x32
    4316:	8b a9       	ldd	r24, Y+51	; 0x33
    4318:	9c a9       	ldd	r25, Y+52	; 0x34
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	40 e8       	ldi	r20, 0x80	; 128
    4320:	5f e3       	ldi	r21, 0x3F	; 63
    4322:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4326:	88 23       	and	r24, r24
    4328:	2c f4       	brge	.+10     	; 0x4334 <main+0x914>
		__ticks = 1;
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	98 ab       	std	Y+48, r25	; 0x30
    4330:	8f a7       	std	Y+47, r24	; 0x2f
    4332:	3f c0       	rjmp	.+126    	; 0x43b2 <main+0x992>
	else if (__tmp > 65535)
    4334:	69 a9       	ldd	r22, Y+49	; 0x31
    4336:	7a a9       	ldd	r23, Y+50	; 0x32
    4338:	8b a9       	ldd	r24, Y+51	; 0x33
    433a:	9c a9       	ldd	r25, Y+52	; 0x34
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	3f ef       	ldi	r19, 0xFF	; 255
    4340:	4f e7       	ldi	r20, 0x7F	; 127
    4342:	57 e4       	ldi	r21, 0x47	; 71
    4344:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4348:	18 16       	cp	r1, r24
    434a:	4c f5       	brge	.+82     	; 0x439e <main+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434c:	6d a9       	ldd	r22, Y+53	; 0x35
    434e:	7e a9       	ldd	r23, Y+54	; 0x36
    4350:	8f a9       	ldd	r24, Y+55	; 0x37
    4352:	98 ad       	ldd	r25, Y+56	; 0x38
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e2       	ldi	r20, 0x20	; 32
    435a:	51 e4       	ldi	r21, 0x41	; 65
    435c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	bc 01       	movw	r22, r24
    4366:	cd 01       	movw	r24, r26
    4368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	98 ab       	std	Y+48, r25	; 0x30
    4372:	8f a7       	std	Y+47, r24	; 0x2f
    4374:	0f c0       	rjmp	.+30     	; 0x4394 <main+0x974>
    4376:	80 e9       	ldi	r24, 0x90	; 144
    4378:	91 e0       	ldi	r25, 0x01	; 1
    437a:	9e a7       	std	Y+46, r25	; 0x2e
    437c:	8d a7       	std	Y+45, r24	; 0x2d
    437e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4380:	9e a5       	ldd	r25, Y+46	; 0x2e
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	f1 f7       	brne	.-4      	; 0x4382 <main+0x962>
    4386:	9e a7       	std	Y+46, r25	; 0x2e
    4388:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438a:	8f a5       	ldd	r24, Y+47	; 0x2f
    438c:	98 a9       	ldd	r25, Y+48	; 0x30
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	98 ab       	std	Y+48, r25	; 0x30
    4392:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4394:	8f a5       	ldd	r24, Y+47	; 0x2f
    4396:	98 a9       	ldd	r25, Y+48	; 0x30
    4398:	00 97       	sbiw	r24, 0x00	; 0
    439a:	69 f7       	brne	.-38     	; 0x4376 <main+0x956>
    439c:	14 c0       	rjmp	.+40     	; 0x43c6 <main+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    439e:	69 a9       	ldd	r22, Y+49	; 0x31
    43a0:	7a a9       	ldd	r23, Y+50	; 0x32
    43a2:	8b a9       	ldd	r24, Y+51	; 0x33
    43a4:	9c a9       	ldd	r25, Y+52	; 0x34
    43a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	98 ab       	std	Y+48, r25	; 0x30
    43b0:	8f a7       	std	Y+47, r24	; 0x2f
    43b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    43b4:	98 a9       	ldd	r25, Y+48	; 0x30
    43b6:	9c a7       	std	Y+44, r25	; 0x2c
    43b8:	8b a7       	std	Y+43, r24	; 0x2b
    43ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    43bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    43be:	01 97       	sbiw	r24, 0x01	; 1
    43c0:	f1 f7       	brne	.-4      	; 0x43be <main+0x99e>
    43c2:	9c a7       	std	Y+44, r25	; 0x2c
    43c4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1500);
		H_LCD_void_SendString("Put your finger ");
    43c6:	82 e7       	ldi	r24, 0x72	; 114
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	90 e8       	ldi	r25, 0x80	; 128
    43d2:	ab eb       	ldi	r26, 0xBB	; 187
    43d4:	b4 e4       	ldi	r27, 0x44	; 68
    43d6:	8f a3       	std	Y+39, r24	; 0x27
    43d8:	98 a7       	std	Y+40, r25	; 0x28
    43da:	a9 a7       	std	Y+41, r26	; 0x29
    43dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43de:	6f a1       	ldd	r22, Y+39	; 0x27
    43e0:	78 a5       	ldd	r23, Y+40	; 0x28
    43e2:	89 a5       	ldd	r24, Y+41	; 0x29
    43e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	4a e7       	ldi	r20, 0x7A	; 122
    43ec:	55 e4       	ldi	r21, 0x45	; 69
    43ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	8b a3       	std	Y+35, r24	; 0x23
    43f8:	9c a3       	std	Y+36, r25	; 0x24
    43fa:	ad a3       	std	Y+37, r26	; 0x25
    43fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43fe:	6b a1       	ldd	r22, Y+35	; 0x23
    4400:	7c a1       	ldd	r23, Y+36	; 0x24
    4402:	8d a1       	ldd	r24, Y+37	; 0x25
    4404:	9e a1       	ldd	r25, Y+38	; 0x26
    4406:	20 e0       	ldi	r18, 0x00	; 0
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e8       	ldi	r20, 0x80	; 128
    440c:	5f e3       	ldi	r21, 0x3F	; 63
    440e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4412:	88 23       	and	r24, r24
    4414:	2c f4       	brge	.+10     	; 0x4420 <main+0xa00>
		__ticks = 1;
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	9a a3       	std	Y+34, r25	; 0x22
    441c:	89 a3       	std	Y+33, r24	; 0x21
    441e:	3f c0       	rjmp	.+126    	; 0x449e <main+0xa7e>
	else if (__tmp > 65535)
    4420:	6b a1       	ldd	r22, Y+35	; 0x23
    4422:	7c a1       	ldd	r23, Y+36	; 0x24
    4424:	8d a1       	ldd	r24, Y+37	; 0x25
    4426:	9e a1       	ldd	r25, Y+38	; 0x26
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	3f ef       	ldi	r19, 0xFF	; 255
    442c:	4f e7       	ldi	r20, 0x7F	; 127
    442e:	57 e4       	ldi	r21, 0x47	; 71
    4430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4434:	18 16       	cp	r1, r24
    4436:	4c f5       	brge	.+82     	; 0x448a <main+0xa6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4438:	6f a1       	ldd	r22, Y+39	; 0x27
    443a:	78 a5       	ldd	r23, Y+40	; 0x28
    443c:	89 a5       	ldd	r24, Y+41	; 0x29
    443e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	40 e2       	ldi	r20, 0x20	; 32
    4446:	51 e4       	ldi	r21, 0x41	; 65
    4448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	bc 01       	movw	r22, r24
    4452:	cd 01       	movw	r24, r26
    4454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	9a a3       	std	Y+34, r25	; 0x22
    445e:	89 a3       	std	Y+33, r24	; 0x21
    4460:	0f c0       	rjmp	.+30     	; 0x4480 <main+0xa60>
    4462:	80 e9       	ldi	r24, 0x90	; 144
    4464:	91 e0       	ldi	r25, 0x01	; 1
    4466:	98 a3       	std	Y+32, r25	; 0x20
    4468:	8f 8f       	std	Y+31, r24	; 0x1f
    446a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    446c:	98 a1       	ldd	r25, Y+32	; 0x20
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	f1 f7       	brne	.-4      	; 0x446e <main+0xa4e>
    4472:	98 a3       	std	Y+32, r25	; 0x20
    4474:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4476:	89 a1       	ldd	r24, Y+33	; 0x21
    4478:	9a a1       	ldd	r25, Y+34	; 0x22
    447a:	01 97       	sbiw	r24, 0x01	; 1
    447c:	9a a3       	std	Y+34, r25	; 0x22
    447e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4480:	89 a1       	ldd	r24, Y+33	; 0x21
    4482:	9a a1       	ldd	r25, Y+34	; 0x22
    4484:	00 97       	sbiw	r24, 0x00	; 0
    4486:	69 f7       	brne	.-38     	; 0x4462 <main+0xa42>
    4488:	14 c0       	rjmp	.+40     	; 0x44b2 <main+0xa92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    448a:	6b a1       	ldd	r22, Y+35	; 0x23
    448c:	7c a1       	ldd	r23, Y+36	; 0x24
    448e:	8d a1       	ldd	r24, Y+37	; 0x25
    4490:	9e a1       	ldd	r25, Y+38	; 0x26
    4492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4496:	dc 01       	movw	r26, r24
    4498:	cb 01       	movw	r24, r22
    449a:	9a a3       	std	Y+34, r25	; 0x22
    449c:	89 a3       	std	Y+33, r24	; 0x21
    449e:	89 a1       	ldd	r24, Y+33	; 0x21
    44a0:	9a a1       	ldd	r25, Y+34	; 0x22
    44a2:	9e 8f       	std	Y+30, r25	; 0x1e
    44a4:	8d 8f       	std	Y+29, r24	; 0x1d
    44a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44aa:	01 97       	sbiw	r24, 0x01	; 1
    44ac:	f1 f7       	brne	.-4      	; 0x44aa <main+0xa8a>
    44ae:	9e 8f       	std	Y+30, r25	; 0x1e
    44b0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1500);

		/* Now matching operation */
		Local_u8ACK=FingerPS_searchFinger(0x0004);
    44b2:	84 e0       	ldi	r24, 0x04	; 4
    44b4:	0e 94 02 19 	call	0x3204	; 0x3204 <FingerPS_searchFinger>
    44b8:	fe 01       	movw	r30, r28
    44ba:	e3 57       	subi	r30, 0x73	; 115
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	80 83       	st	Z, r24

		/* check the ACK*/
		if (Local_u8ACK == R503_PROCESS_COMPLETE)
    44c0:	fe 01       	movw	r30, r28
    44c2:	e3 57       	subi	r30, 0x73	; 115
    44c4:	ff 4f       	sbci	r31, 0xFF	; 255
    44c6:	80 81       	ld	r24, Z
    44c8:	88 23       	and	r24, r24
    44ca:	09 f0       	breq	.+2      	; 0x44ce <main+0xaae>
    44cc:	79 c0       	rjmp	.+242    	; 0x45c0 <main+0xba0>
		{
			/* LCD matching appertain success massage*/
			H_LCD_void_ClearScreen();
    44ce:	0e 94 4f 12 	call	0x249e	; 0x249e <H_LCD_void_ClearScreen>
			H_LCD_void_SendString("matching OK ");
    44d2:	84 eb       	ldi	r24, 0xB4	; 180
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	90 e8       	ldi	r25, 0x80	; 128
    44de:	ab eb       	ldi	r26, 0xBB	; 187
    44e0:	b4 e4       	ldi	r27, 0x44	; 68
    44e2:	89 8f       	std	Y+25, r24	; 0x19
    44e4:	9a 8f       	std	Y+26, r25	; 0x1a
    44e6:	ab 8f       	std	Y+27, r26	; 0x1b
    44e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ea:	69 8d       	ldd	r22, Y+25	; 0x19
    44ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44f2:	20 e0       	ldi	r18, 0x00	; 0
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	4a e7       	ldi	r20, 0x7A	; 122
    44f8:	55 e4       	ldi	r21, 0x45	; 69
    44fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44fe:	dc 01       	movw	r26, r24
    4500:	cb 01       	movw	r24, r22
    4502:	8d 8b       	std	Y+21, r24	; 0x15
    4504:	9e 8b       	std	Y+22, r25	; 0x16
    4506:	af 8b       	std	Y+23, r26	; 0x17
    4508:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    450a:	6d 89       	ldd	r22, Y+21	; 0x15
    450c:	7e 89       	ldd	r23, Y+22	; 0x16
    450e:	8f 89       	ldd	r24, Y+23	; 0x17
    4510:	98 8d       	ldd	r25, Y+24	; 0x18
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	40 e8       	ldi	r20, 0x80	; 128
    4518:	5f e3       	ldi	r21, 0x3F	; 63
    451a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    451e:	88 23       	and	r24, r24
    4520:	2c f4       	brge	.+10     	; 0x452c <main+0xb0c>
		__ticks = 1;
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	9c 8b       	std	Y+20, r25	; 0x14
    4528:	8b 8b       	std	Y+19, r24	; 0x13
    452a:	3f c0       	rjmp	.+126    	; 0x45aa <main+0xb8a>
	else if (__tmp > 65535)
    452c:	6d 89       	ldd	r22, Y+21	; 0x15
    452e:	7e 89       	ldd	r23, Y+22	; 0x16
    4530:	8f 89       	ldd	r24, Y+23	; 0x17
    4532:	98 8d       	ldd	r25, Y+24	; 0x18
    4534:	20 e0       	ldi	r18, 0x00	; 0
    4536:	3f ef       	ldi	r19, 0xFF	; 255
    4538:	4f e7       	ldi	r20, 0x7F	; 127
    453a:	57 e4       	ldi	r21, 0x47	; 71
    453c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4540:	18 16       	cp	r1, r24
    4542:	4c f5       	brge	.+82     	; 0x4596 <main+0xb76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4544:	69 8d       	ldd	r22, Y+25	; 0x19
    4546:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4548:	8b 8d       	ldd	r24, Y+27	; 0x1b
    454a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	30 e0       	ldi	r19, 0x00	; 0
    4550:	40 e2       	ldi	r20, 0x20	; 32
    4552:	51 e4       	ldi	r21, 0x41	; 65
    4554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4558:	dc 01       	movw	r26, r24
    455a:	cb 01       	movw	r24, r22
    455c:	bc 01       	movw	r22, r24
    455e:	cd 01       	movw	r24, r26
    4560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	9c 8b       	std	Y+20, r25	; 0x14
    456a:	8b 8b       	std	Y+19, r24	; 0x13
    456c:	0f c0       	rjmp	.+30     	; 0x458c <main+0xb6c>
    456e:	80 e9       	ldi	r24, 0x90	; 144
    4570:	91 e0       	ldi	r25, 0x01	; 1
    4572:	9a 8b       	std	Y+18, r25	; 0x12
    4574:	89 8b       	std	Y+17, r24	; 0x11
    4576:	89 89       	ldd	r24, Y+17	; 0x11
    4578:	9a 89       	ldd	r25, Y+18	; 0x12
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	f1 f7       	brne	.-4      	; 0x457a <main+0xb5a>
    457e:	9a 8b       	std	Y+18, r25	; 0x12
    4580:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4582:	8b 89       	ldd	r24, Y+19	; 0x13
    4584:	9c 89       	ldd	r25, Y+20	; 0x14
    4586:	01 97       	sbiw	r24, 0x01	; 1
    4588:	9c 8b       	std	Y+20, r25	; 0x14
    458a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    458c:	8b 89       	ldd	r24, Y+19	; 0x13
    458e:	9c 89       	ldd	r25, Y+20	; 0x14
    4590:	00 97       	sbiw	r24, 0x00	; 0
    4592:	69 f7       	brne	.-38     	; 0x456e <main+0xb4e>
    4594:	56 ca       	rjmp	.-2900   	; 0x3a42 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4596:	6d 89       	ldd	r22, Y+21	; 0x15
    4598:	7e 89       	ldd	r23, Y+22	; 0x16
    459a:	8f 89       	ldd	r24, Y+23	; 0x17
    459c:	98 8d       	ldd	r25, Y+24	; 0x18
    459e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	9c 8b       	std	Y+20, r25	; 0x14
    45a8:	8b 8b       	std	Y+19, r24	; 0x13
    45aa:	8b 89       	ldd	r24, Y+19	; 0x13
    45ac:	9c 89       	ldd	r25, Y+20	; 0x14
    45ae:	98 8b       	std	Y+16, r25	; 0x10
    45b0:	8f 87       	std	Y+15, r24	; 0x0f
    45b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    45b4:	98 89       	ldd	r25, Y+16	; 0x10
    45b6:	01 97       	sbiw	r24, 0x01	; 1
    45b8:	f1 f7       	brne	.-4      	; 0x45b6 <main+0xb96>
    45ba:	98 8b       	std	Y+16, r25	; 0x10
    45bc:	8f 87       	std	Y+15, r24	; 0x0f
    45be:	41 ca       	rjmp	.-2942   	; 0x3a42 <main+0x22>
			_delay_ms(1500);
		}
		else
		{
			/* LCD matching appertain fail massage*/
			H_LCD_void_SendString(" NO matching");
    45c0:	81 ec       	ldi	r24, 0xC1	; 193
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	90 e8       	ldi	r25, 0x80	; 128
    45cc:	ab eb       	ldi	r26, 0xBB	; 187
    45ce:	b4 e4       	ldi	r27, 0x44	; 68
    45d0:	8b 87       	std	Y+11, r24	; 0x0b
    45d2:	9c 87       	std	Y+12, r25	; 0x0c
    45d4:	ad 87       	std	Y+13, r26	; 0x0d
    45d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45da:	7c 85       	ldd	r23, Y+12	; 0x0c
    45dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    45de:	9e 85       	ldd	r25, Y+14	; 0x0e
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	4a e7       	ldi	r20, 0x7A	; 122
    45e6:	55 e4       	ldi	r21, 0x45	; 69
    45e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	8f 83       	std	Y+7, r24	; 0x07
    45f2:	98 87       	std	Y+8, r25	; 0x08
    45f4:	a9 87       	std	Y+9, r26	; 0x09
    45f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45f8:	6f 81       	ldd	r22, Y+7	; 0x07
    45fa:	78 85       	ldd	r23, Y+8	; 0x08
    45fc:	89 85       	ldd	r24, Y+9	; 0x09
    45fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	40 e8       	ldi	r20, 0x80	; 128
    4606:	5f e3       	ldi	r21, 0x3F	; 63
    4608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    460c:	88 23       	and	r24, r24
    460e:	2c f4       	brge	.+10     	; 0x461a <main+0xbfa>
		__ticks = 1;
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	9e 83       	std	Y+6, r25	; 0x06
    4616:	8d 83       	std	Y+5, r24	; 0x05
    4618:	3f c0       	rjmp	.+126    	; 0x4698 <main+0xc78>
	else if (__tmp > 65535)
    461a:	6f 81       	ldd	r22, Y+7	; 0x07
    461c:	78 85       	ldd	r23, Y+8	; 0x08
    461e:	89 85       	ldd	r24, Y+9	; 0x09
    4620:	9a 85       	ldd	r25, Y+10	; 0x0a
    4622:	20 e0       	ldi	r18, 0x00	; 0
    4624:	3f ef       	ldi	r19, 0xFF	; 255
    4626:	4f e7       	ldi	r20, 0x7F	; 127
    4628:	57 e4       	ldi	r21, 0x47	; 71
    462a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    462e:	18 16       	cp	r1, r24
    4630:	4c f5       	brge	.+82     	; 0x4684 <main+0xc64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4632:	6b 85       	ldd	r22, Y+11	; 0x0b
    4634:	7c 85       	ldd	r23, Y+12	; 0x0c
    4636:	8d 85       	ldd	r24, Y+13	; 0x0d
    4638:	9e 85       	ldd	r25, Y+14	; 0x0e
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	40 e2       	ldi	r20, 0x20	; 32
    4640:	51 e4       	ldi	r21, 0x41	; 65
    4642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	bc 01       	movw	r22, r24
    464c:	cd 01       	movw	r24, r26
    464e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4652:	dc 01       	movw	r26, r24
    4654:	cb 01       	movw	r24, r22
    4656:	9e 83       	std	Y+6, r25	; 0x06
    4658:	8d 83       	std	Y+5, r24	; 0x05
    465a:	0f c0       	rjmp	.+30     	; 0x467a <main+0xc5a>
    465c:	80 e9       	ldi	r24, 0x90	; 144
    465e:	91 e0       	ldi	r25, 0x01	; 1
    4660:	9c 83       	std	Y+4, r25	; 0x04
    4662:	8b 83       	std	Y+3, r24	; 0x03
    4664:	8b 81       	ldd	r24, Y+3	; 0x03
    4666:	9c 81       	ldd	r25, Y+4	; 0x04
    4668:	01 97       	sbiw	r24, 0x01	; 1
    466a:	f1 f7       	brne	.-4      	; 0x4668 <main+0xc48>
    466c:	9c 83       	std	Y+4, r25	; 0x04
    466e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4670:	8d 81       	ldd	r24, Y+5	; 0x05
    4672:	9e 81       	ldd	r25, Y+6	; 0x06
    4674:	01 97       	sbiw	r24, 0x01	; 1
    4676:	9e 83       	std	Y+6, r25	; 0x06
    4678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    467a:	8d 81       	ldd	r24, Y+5	; 0x05
    467c:	9e 81       	ldd	r25, Y+6	; 0x06
    467e:	00 97       	sbiw	r24, 0x00	; 0
    4680:	69 f7       	brne	.-38     	; 0x465c <main+0xc3c>
    4682:	df c9       	rjmp	.-3138   	; 0x3a42 <main+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4684:	6f 81       	ldd	r22, Y+7	; 0x07
    4686:	78 85       	ldd	r23, Y+8	; 0x08
    4688:	89 85       	ldd	r24, Y+9	; 0x09
    468a:	9a 85       	ldd	r25, Y+10	; 0x0a
    468c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4690:	dc 01       	movw	r26, r24
    4692:	cb 01       	movw	r24, r22
    4694:	9e 83       	std	Y+6, r25	; 0x06
    4696:	8d 83       	std	Y+5, r24	; 0x05
    4698:	8d 81       	ldd	r24, Y+5	; 0x05
    469a:	9e 81       	ldd	r25, Y+6	; 0x06
    469c:	9a 83       	std	Y+2, r25	; 0x02
    469e:	89 83       	std	Y+1, r24	; 0x01
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	9a 81       	ldd	r25, Y+2	; 0x02
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	f1 f7       	brne	.-4      	; 0x46a4 <main+0xc84>
    46a8:	9a 83       	std	Y+2, r25	; 0x02
    46aa:	89 83       	std	Y+1, r24	; 0x01
    46ac:	ca c9       	rjmp	.-3180   	; 0x3a42 <main+0x22>

000046ae <App_void_Print_Error_Reason>:


}

void App_void_Print_Error_Reason(u8 Local_u8ACKMasssage)
{
    46ae:	df 93       	push	r29
    46b0:	cf 93       	push	r28
    46b2:	cd b7       	in	r28, 0x3d	; 61
    46b4:	de b7       	in	r29, 0x3e	; 62
    46b6:	61 97       	sbiw	r28, 0x11	; 17
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    46c2:	8f 87       	std	Y+15, r24	; 0x0f
	H_LCD_void_ClearScreen()  ;
    46c4:	0e 94 4f 12 	call	0x249e	; 0x249e <H_LCD_void_ClearScreen>
	switch (Local_u8ACKMasssage)
    46c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    46ca:	28 2f       	mov	r18, r24
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	39 8b       	std	Y+17, r19	; 0x11
    46d0:	28 8b       	std	Y+16, r18	; 0x10
    46d2:	88 89       	ldd	r24, Y+16	; 0x10
    46d4:	99 89       	ldd	r25, Y+17	; 0x11
    46d6:	87 30       	cpi	r24, 0x07	; 7
    46d8:	91 05       	cpc	r25, r1
    46da:	09 f4       	brne	.+2      	; 0x46de <App_void_Print_Error_Reason+0x30>
    46dc:	56 c0       	rjmp	.+172    	; 0x478a <App_void_Print_Error_Reason+0xdc>
    46de:	28 89       	ldd	r18, Y+16	; 0x10
    46e0:	39 89       	ldd	r19, Y+17	; 0x11
    46e2:	28 30       	cpi	r18, 0x08	; 8
    46e4:	31 05       	cpc	r19, r1
    46e6:	e4 f4       	brge	.+56     	; 0x4720 <App_void_Print_Error_Reason+0x72>
    46e8:	88 89       	ldd	r24, Y+16	; 0x10
    46ea:	99 89       	ldd	r25, Y+17	; 0x11
    46ec:	82 30       	cpi	r24, 0x02	; 2
    46ee:	91 05       	cpc	r25, r1
    46f0:	09 f4       	brne	.+2      	; 0x46f4 <App_void_Print_Error_Reason+0x46>
    46f2:	3c c0       	rjmp	.+120    	; 0x476c <App_void_Print_Error_Reason+0xbe>
    46f4:	28 89       	ldd	r18, Y+16	; 0x10
    46f6:	39 89       	ldd	r19, Y+17	; 0x11
    46f8:	23 30       	cpi	r18, 0x03	; 3
    46fa:	31 05       	cpc	r19, r1
    46fc:	34 f4       	brge	.+12     	; 0x470a <App_void_Print_Error_Reason+0x5c>
    46fe:	88 89       	ldd	r24, Y+16	; 0x10
    4700:	99 89       	ldd	r25, Y+17	; 0x11
    4702:	81 30       	cpi	r24, 0x01	; 1
    4704:	91 05       	cpc	r25, r1
    4706:	69 f1       	breq	.+90     	; 0x4762 <App_void_Print_Error_Reason+0xb4>
    4708:	5d c0       	rjmp	.+186    	; 0x47c4 <App_void_Print_Error_Reason+0x116>
    470a:	28 89       	ldd	r18, Y+16	; 0x10
    470c:	39 89       	ldd	r19, Y+17	; 0x11
    470e:	23 30       	cpi	r18, 0x03	; 3
    4710:	31 05       	cpc	r19, r1
    4712:	89 f1       	breq	.+98     	; 0x4776 <App_void_Print_Error_Reason+0xc8>
    4714:	88 89       	ldd	r24, Y+16	; 0x10
    4716:	99 89       	ldd	r25, Y+17	; 0x11
    4718:	86 30       	cpi	r24, 0x06	; 6
    471a:	91 05       	cpc	r25, r1
    471c:	89 f1       	breq	.+98     	; 0x4780 <App_void_Print_Error_Reason+0xd2>
    471e:	52 c0       	rjmp	.+164    	; 0x47c4 <App_void_Print_Error_Reason+0x116>
    4720:	28 89       	ldd	r18, Y+16	; 0x10
    4722:	39 89       	ldd	r19, Y+17	; 0x11
    4724:	2a 30       	cpi	r18, 0x0A	; 10
    4726:	31 05       	cpc	r19, r1
    4728:	09 f4       	brne	.+2      	; 0x472c <App_void_Print_Error_Reason+0x7e>
    472a:	3e c0       	rjmp	.+124    	; 0x47a8 <App_void_Print_Error_Reason+0xfa>
    472c:	88 89       	ldd	r24, Y+16	; 0x10
    472e:	99 89       	ldd	r25, Y+17	; 0x11
    4730:	8b 30       	cpi	r24, 0x0B	; 11
    4732:	91 05       	cpc	r25, r1
    4734:	5c f4       	brge	.+22     	; 0x474c <App_void_Print_Error_Reason+0x9e>
    4736:	28 89       	ldd	r18, Y+16	; 0x10
    4738:	39 89       	ldd	r19, Y+17	; 0x11
    473a:	28 30       	cpi	r18, 0x08	; 8
    473c:	31 05       	cpc	r19, r1
    473e:	51 f1       	breq	.+84     	; 0x4794 <App_void_Print_Error_Reason+0xe6>
    4740:	88 89       	ldd	r24, Y+16	; 0x10
    4742:	99 89       	ldd	r25, Y+17	; 0x11
    4744:	89 30       	cpi	r24, 0x09	; 9
    4746:	91 05       	cpc	r25, r1
    4748:	51 f1       	breq	.+84     	; 0x479e <App_void_Print_Error_Reason+0xf0>
    474a:	3c c0       	rjmp	.+120    	; 0x47c4 <App_void_Print_Error_Reason+0x116>
    474c:	28 89       	ldd	r18, Y+16	; 0x10
    474e:	39 89       	ldd	r19, Y+17	; 0x11
    4750:	20 31       	cpi	r18, 0x10	; 16
    4752:	31 05       	cpc	r19, r1
    4754:	99 f1       	breq	.+102    	; 0x47bc <App_void_Print_Error_Reason+0x10e>
    4756:	88 89       	ldd	r24, Y+16	; 0x10
    4758:	99 89       	ldd	r25, Y+17	; 0x11
    475a:	81 31       	cpi	r24, 0x11	; 17
    475c:	91 05       	cpc	r25, r1
    475e:	49 f1       	breq	.+82     	; 0x47b2 <App_void_Print_Error_Reason+0x104>
    4760:	31 c0       	rjmp	.+98     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	{
		case R503_ERROR_WHEN_RECEIVING_DATA_PACKAGE  	        : H_LCD_void_SendString("R503_ERROR_WHEN_RECEIVING_DATA_PACKAGE  	");   break;
    4762:	8e ec       	ldi	r24, 0xCE	; 206
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    476a:	2c c0       	rjmp	.+88     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_NO_FINGER_ON_THE_SENSOR			   	        : H_LCD_void_SendString("R503_NO_FINGER_ON_THE_SENSOR			   	");   break;
    476c:	88 ef       	ldi	r24, 0xF8	; 248
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    4774:	27 c0       	rjmp	.+78     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_FAIL_TO_ENROLL_THE_FINGER			  	        : H_LCD_void_SendString("R503_FAIL_TO_ENROLL_THE_FINGER			  	");   break;
    4776:	8c e1       	ldi	r24, 0x1C	; 28
    4778:	91 e0       	ldi	r25, 0x01	; 1
    477a:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    477e:	22 c0       	rjmp	.+68     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_FAIL_TO_GEN_CHAR_FILE_DUE_TO_DISORDERLY       : H_LCD_void_SendString("R503_FAIL_TO_GEN_CHAR_FILE_DUE_TO_DISORDERLY");  break;
    4780:	81 e4       	ldi	r24, 0x41	; 65
    4782:	91 e0       	ldi	r25, 0x01	; 1
    4784:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    4788:	1d c0       	rjmp	.+58     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_FAIL_TO_GEN_CHAR_FILE_DUE_TO_LACKNESS         : H_LCD_void_SendString("R503_FAIL_TO_GEN_CHAR_FILE_DUE_TO_LACKNESS  ");  break;
    478a:	8e e6       	ldi	r24, 0x6E	; 110
    478c:	91 e0       	ldi	r25, 0x01	; 1
    478e:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    4792:	18 c0       	rjmp	.+48     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_FINGER_DO_NOT_MATCH					        : H_LCD_void_SendString("R503_FINGER_DO_NOT_MATCH					");   break;
    4794:	8b e9       	ldi	r24, 0x9B	; 155
    4796:	91 e0       	ldi	r25, 0x01	; 1
    4798:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    479c:	13 c0       	rjmp	.+38     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_FAIL_TO_FIND_THE_MATCH_FINGER			        : H_LCD_void_SendString("R503_FAIL_TO_FIND_THE_MATCH_FINGER			");   break;
    479e:	89 eb       	ldi	r24, 0xB9	; 185
    47a0:	91 e0       	ldi	r25, 0x01	; 1
    47a2:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    47a6:	0e c0       	rjmp	.+28     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_FAIL_TO_COMBINE_THE_CHAR_FILE			        : H_LCD_void_SendString("R503_FAIL_TO_COMBINE_THE_CHAR_FILE			");   break;
    47a8:	8f ed       	ldi	r24, 0xDF	; 223
    47aa:	91 e0       	ldi	r25, 0x01	; 1
    47ac:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    47b0:	09 c0       	rjmp	.+18     	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_FAIL_TO_CLEAR_THE_FINGER_LIB		  	        : H_LCD_void_SendString("R503_FAIL_TO_CLEAR_THE_FINGER_LIB		  	");   break;
    47b2:	85 e0       	ldi	r24, 0x05	; 5
    47b4:	92 e0       	ldi	r25, 0x02	; 2
    47b6:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    47ba:	04 c0       	rjmp	.+8      	; 0x47c4 <App_void_Print_Error_Reason+0x116>
	    case R503_FAIL_TO_DELETE_THE_TEMPLATE		  	        : H_LCD_void_SendString("R503_FAIL_TO_DELETE_THE_TEMPLATE		  	");   break;
    47bc:	8c e2       	ldi	r24, 0x2C	; 44
    47be:	92 e0       	ldi	r25, 0x02	; 2
    47c0:	0e 94 a1 11 	call	0x2342	; 0x2342 <H_LCD_void_SendString>
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	90 e8       	ldi	r25, 0x80	; 128
    47c8:	ab eb       	ldi	r26, 0xBB	; 187
    47ca:	b4 e4       	ldi	r27, 0x44	; 68
    47cc:	8b 87       	std	Y+11, r24	; 0x0b
    47ce:	9c 87       	std	Y+12, r25	; 0x0c
    47d0:	ad 87       	std	Y+13, r26	; 0x0d
    47d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    47d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    47d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47da:	9e 85       	ldd	r25, Y+14	; 0x0e
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	4a e7       	ldi	r20, 0x7A	; 122
    47e2:	55 e4       	ldi	r21, 0x45	; 69
    47e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	8f 83       	std	Y+7, r24	; 0x07
    47ee:	98 87       	std	Y+8, r25	; 0x08
    47f0:	a9 87       	std	Y+9, r26	; 0x09
    47f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47f4:	6f 81       	ldd	r22, Y+7	; 0x07
    47f6:	78 85       	ldd	r23, Y+8	; 0x08
    47f8:	89 85       	ldd	r24, Y+9	; 0x09
    47fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	40 e8       	ldi	r20, 0x80	; 128
    4802:	5f e3       	ldi	r21, 0x3F	; 63
    4804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4808:	88 23       	and	r24, r24
    480a:	2c f4       	brge	.+10     	; 0x4816 <App_void_Print_Error_Reason+0x168>
		__ticks = 1;
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	9e 83       	std	Y+6, r25	; 0x06
    4812:	8d 83       	std	Y+5, r24	; 0x05
    4814:	3f c0       	rjmp	.+126    	; 0x4894 <App_void_Print_Error_Reason+0x1e6>
	else if (__tmp > 65535)
    4816:	6f 81       	ldd	r22, Y+7	; 0x07
    4818:	78 85       	ldd	r23, Y+8	; 0x08
    481a:	89 85       	ldd	r24, Y+9	; 0x09
    481c:	9a 85       	ldd	r25, Y+10	; 0x0a
    481e:	20 e0       	ldi	r18, 0x00	; 0
    4820:	3f ef       	ldi	r19, 0xFF	; 255
    4822:	4f e7       	ldi	r20, 0x7F	; 127
    4824:	57 e4       	ldi	r21, 0x47	; 71
    4826:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    482a:	18 16       	cp	r1, r24
    482c:	4c f5       	brge	.+82     	; 0x4880 <App_void_Print_Error_Reason+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    482e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4830:	7c 85       	ldd	r23, Y+12	; 0x0c
    4832:	8d 85       	ldd	r24, Y+13	; 0x0d
    4834:	9e 85       	ldd	r25, Y+14	; 0x0e
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e2       	ldi	r20, 0x20	; 32
    483c:	51 e4       	ldi	r21, 0x41	; 65
    483e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	bc 01       	movw	r22, r24
    4848:	cd 01       	movw	r24, r26
    484a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    484e:	dc 01       	movw	r26, r24
    4850:	cb 01       	movw	r24, r22
    4852:	9e 83       	std	Y+6, r25	; 0x06
    4854:	8d 83       	std	Y+5, r24	; 0x05
    4856:	0f c0       	rjmp	.+30     	; 0x4876 <App_void_Print_Error_Reason+0x1c8>
    4858:	80 e9       	ldi	r24, 0x90	; 144
    485a:	91 e0       	ldi	r25, 0x01	; 1
    485c:	9c 83       	std	Y+4, r25	; 0x04
    485e:	8b 83       	std	Y+3, r24	; 0x03
    4860:	8b 81       	ldd	r24, Y+3	; 0x03
    4862:	9c 81       	ldd	r25, Y+4	; 0x04
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	f1 f7       	brne	.-4      	; 0x4864 <App_void_Print_Error_Reason+0x1b6>
    4868:	9c 83       	std	Y+4, r25	; 0x04
    486a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    486c:	8d 81       	ldd	r24, Y+5	; 0x05
    486e:	9e 81       	ldd	r25, Y+6	; 0x06
    4870:	01 97       	sbiw	r24, 0x01	; 1
    4872:	9e 83       	std	Y+6, r25	; 0x06
    4874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4876:	8d 81       	ldd	r24, Y+5	; 0x05
    4878:	9e 81       	ldd	r25, Y+6	; 0x06
    487a:	00 97       	sbiw	r24, 0x00	; 0
    487c:	69 f7       	brne	.-38     	; 0x4858 <App_void_Print_Error_Reason+0x1aa>
    487e:	14 c0       	rjmp	.+40     	; 0x48a8 <App_void_Print_Error_Reason+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4880:	6f 81       	ldd	r22, Y+7	; 0x07
    4882:	78 85       	ldd	r23, Y+8	; 0x08
    4884:	89 85       	ldd	r24, Y+9	; 0x09
    4886:	9a 85       	ldd	r25, Y+10	; 0x0a
    4888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22
    4890:	9e 83       	std	Y+6, r25	; 0x06
    4892:	8d 83       	std	Y+5, r24	; 0x05
    4894:	8d 81       	ldd	r24, Y+5	; 0x05
    4896:	9e 81       	ldd	r25, Y+6	; 0x06
    4898:	9a 83       	std	Y+2, r25	; 0x02
    489a:	89 83       	std	Y+1, r24	; 0x01
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	9a 81       	ldd	r25, Y+2	; 0x02
    48a0:	01 97       	sbiw	r24, 0x01	; 1
    48a2:	f1 f7       	brne	.-4      	; 0x48a0 <App_void_Print_Error_Reason+0x1f2>
    48a4:	9a 83       	std	Y+2, r25	; 0x02
    48a6:	89 83       	std	Y+1, r24	; 0x01

	}
	_delay_ms(1500);


}
    48a8:	61 96       	adiw	r28, 0x11	; 17
    48aa:	0f b6       	in	r0, 0x3f	; 63
    48ac:	f8 94       	cli
    48ae:	de bf       	out	0x3e, r29	; 62
    48b0:	0f be       	out	0x3f, r0	; 63
    48b2:	cd bf       	out	0x3d, r28	; 61
    48b4:	cf 91       	pop	r28
    48b6:	df 91       	pop	r29
    48b8:	08 95       	ret

000048ba <__divmodsi4>:
    48ba:	97 fb       	bst	r25, 7
    48bc:	09 2e       	mov	r0, r25
    48be:	05 26       	eor	r0, r21
    48c0:	0e d0       	rcall	.+28     	; 0x48de <__divmodsi4_neg1>
    48c2:	57 fd       	sbrc	r21, 7
    48c4:	04 d0       	rcall	.+8      	; 0x48ce <__divmodsi4_neg2>
    48c6:	14 d0       	rcall	.+40     	; 0x48f0 <__udivmodsi4>
    48c8:	0a d0       	rcall	.+20     	; 0x48de <__divmodsi4_neg1>
    48ca:	00 1c       	adc	r0, r0
    48cc:	38 f4       	brcc	.+14     	; 0x48dc <__divmodsi4_exit>

000048ce <__divmodsi4_neg2>:
    48ce:	50 95       	com	r21
    48d0:	40 95       	com	r20
    48d2:	30 95       	com	r19
    48d4:	21 95       	neg	r18
    48d6:	3f 4f       	sbci	r19, 0xFF	; 255
    48d8:	4f 4f       	sbci	r20, 0xFF	; 255
    48da:	5f 4f       	sbci	r21, 0xFF	; 255

000048dc <__divmodsi4_exit>:
    48dc:	08 95       	ret

000048de <__divmodsi4_neg1>:
    48de:	f6 f7       	brtc	.-4      	; 0x48dc <__divmodsi4_exit>
    48e0:	90 95       	com	r25
    48e2:	80 95       	com	r24
    48e4:	70 95       	com	r23
    48e6:	61 95       	neg	r22
    48e8:	7f 4f       	sbci	r23, 0xFF	; 255
    48ea:	8f 4f       	sbci	r24, 0xFF	; 255
    48ec:	9f 4f       	sbci	r25, 0xFF	; 255
    48ee:	08 95       	ret

000048f0 <__udivmodsi4>:
    48f0:	a1 e2       	ldi	r26, 0x21	; 33
    48f2:	1a 2e       	mov	r1, r26
    48f4:	aa 1b       	sub	r26, r26
    48f6:	bb 1b       	sub	r27, r27
    48f8:	fd 01       	movw	r30, r26
    48fa:	0d c0       	rjmp	.+26     	; 0x4916 <__udivmodsi4_ep>

000048fc <__udivmodsi4_loop>:
    48fc:	aa 1f       	adc	r26, r26
    48fe:	bb 1f       	adc	r27, r27
    4900:	ee 1f       	adc	r30, r30
    4902:	ff 1f       	adc	r31, r31
    4904:	a2 17       	cp	r26, r18
    4906:	b3 07       	cpc	r27, r19
    4908:	e4 07       	cpc	r30, r20
    490a:	f5 07       	cpc	r31, r21
    490c:	20 f0       	brcs	.+8      	; 0x4916 <__udivmodsi4_ep>
    490e:	a2 1b       	sub	r26, r18
    4910:	b3 0b       	sbc	r27, r19
    4912:	e4 0b       	sbc	r30, r20
    4914:	f5 0b       	sbc	r31, r21

00004916 <__udivmodsi4_ep>:
    4916:	66 1f       	adc	r22, r22
    4918:	77 1f       	adc	r23, r23
    491a:	88 1f       	adc	r24, r24
    491c:	99 1f       	adc	r25, r25
    491e:	1a 94       	dec	r1
    4920:	69 f7       	brne	.-38     	; 0x48fc <__udivmodsi4_loop>
    4922:	60 95       	com	r22
    4924:	70 95       	com	r23
    4926:	80 95       	com	r24
    4928:	90 95       	com	r25
    492a:	9b 01       	movw	r18, r22
    492c:	ac 01       	movw	r20, r24
    492e:	bd 01       	movw	r22, r26
    4930:	cf 01       	movw	r24, r30
    4932:	08 95       	ret

00004934 <__prologue_saves__>:
    4934:	2f 92       	push	r2
    4936:	3f 92       	push	r3
    4938:	4f 92       	push	r4
    493a:	5f 92       	push	r5
    493c:	6f 92       	push	r6
    493e:	7f 92       	push	r7
    4940:	8f 92       	push	r8
    4942:	9f 92       	push	r9
    4944:	af 92       	push	r10
    4946:	bf 92       	push	r11
    4948:	cf 92       	push	r12
    494a:	df 92       	push	r13
    494c:	ef 92       	push	r14
    494e:	ff 92       	push	r15
    4950:	0f 93       	push	r16
    4952:	1f 93       	push	r17
    4954:	cf 93       	push	r28
    4956:	df 93       	push	r29
    4958:	cd b7       	in	r28, 0x3d	; 61
    495a:	de b7       	in	r29, 0x3e	; 62
    495c:	ca 1b       	sub	r28, r26
    495e:	db 0b       	sbc	r29, r27
    4960:	0f b6       	in	r0, 0x3f	; 63
    4962:	f8 94       	cli
    4964:	de bf       	out	0x3e, r29	; 62
    4966:	0f be       	out	0x3f, r0	; 63
    4968:	cd bf       	out	0x3d, r28	; 61
    496a:	09 94       	ijmp

0000496c <__epilogue_restores__>:
    496c:	2a 88       	ldd	r2, Y+18	; 0x12
    496e:	39 88       	ldd	r3, Y+17	; 0x11
    4970:	48 88       	ldd	r4, Y+16	; 0x10
    4972:	5f 84       	ldd	r5, Y+15	; 0x0f
    4974:	6e 84       	ldd	r6, Y+14	; 0x0e
    4976:	7d 84       	ldd	r7, Y+13	; 0x0d
    4978:	8c 84       	ldd	r8, Y+12	; 0x0c
    497a:	9b 84       	ldd	r9, Y+11	; 0x0b
    497c:	aa 84       	ldd	r10, Y+10	; 0x0a
    497e:	b9 84       	ldd	r11, Y+9	; 0x09
    4980:	c8 84       	ldd	r12, Y+8	; 0x08
    4982:	df 80       	ldd	r13, Y+7	; 0x07
    4984:	ee 80       	ldd	r14, Y+6	; 0x06
    4986:	fd 80       	ldd	r15, Y+5	; 0x05
    4988:	0c 81       	ldd	r16, Y+4	; 0x04
    498a:	1b 81       	ldd	r17, Y+3	; 0x03
    498c:	aa 81       	ldd	r26, Y+2	; 0x02
    498e:	b9 81       	ldd	r27, Y+1	; 0x01
    4990:	ce 0f       	add	r28, r30
    4992:	d1 1d       	adc	r29, r1
    4994:	0f b6       	in	r0, 0x3f	; 63
    4996:	f8 94       	cli
    4998:	de bf       	out	0x3e, r29	; 62
    499a:	0f be       	out	0x3f, r0	; 63
    499c:	cd bf       	out	0x3d, r28	; 61
    499e:	ed 01       	movw	r28, r26
    49a0:	08 95       	ret

000049a2 <_exit>:
    49a2:	f8 94       	cli

000049a4 <__stop_program>:
    49a4:	ff cf       	rjmp	.-2      	; 0x49a4 <__stop_program>
