
DS1307_RTC_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00002e2e  00002ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000ba  008000ba  00002f1c  2**0
                  ALLOC
  3 .stab         00002c34  00000000  00000000  00002f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000179e  00000000  00000000  00005b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000072ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000744e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000075dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009622  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a723  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b828  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000baea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b9 14 	call	0x2972	; 0x2972 <main>
      8a:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ea       	ldi	r26, 0xA9	; 169
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ea       	ldi	r24, 0xA9	; 169
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 ea       	ldi	r22, 0xA9	; 169
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TWI_voidMasterInit>:
#include "TWI_privite.h"
#include "TWI_config.h"


void TWI_voidMasterInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* 2- Enable the ACK */
	/* 3- Enable the TWI peripheral */
	
	/* Assign the PRE-scaler with 0*/
	#if TWI_PRESCALLER == PRESCALLER_BY_1
		CLR_BIT(TWI_TWSR_REG,TWPS1);
     ca6:	a1 e2       	ldi	r26, 0x21	; 33
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e1 e2       	ldi	r30, 0x21	; 33
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8d 7f       	andi	r24, 0xFD	; 253
     cb2:	8c 93       	st	X, r24
		CLR_BIT(TWI_TWSR_REG,TWPS0);
     cb4:	a1 e2       	ldi	r26, 0x21	; 33
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e1 e2       	ldi	r30, 0x21	; 33
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	8c 93       	st	X, r24
	#endif 		
	
	/* Assign the value of bit rate */
	//TWI_TWBR_REG = (u8) (((F_CPU/TWI_SCL_BIT_RATE)-16) / (2*TWI_PRESCALLER));
	/* for 100K bit rate TWI_TWBR_REG  = 32 for 400 K WI_TWBR_REG  = 2 */
	TWI_TWBR_REG = 2 ;
     cc2:	e0 e2       	ldi	r30, 0x20	; 32
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	80 83       	st	Z, r24
	
	
	/* Enable ACK*/
	SET_BIT(TWI_TWCR_REG,TWEA);
     cca:	a6 e5       	ldi	r26, 0x56	; 86
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e6 e5       	ldi	r30, 0x56	; 86
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	80 64       	ori	r24, 0x40	; 64
     cd6:	8c 93       	st	X, r24
	
	/* Enable TWI */
	SET_BIT(TWI_TWCR_REG,TWEN);
     cd8:	a6 e5       	ldi	r26, 0x56	; 86
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e6 e5       	ldi	r30, 0x56	; 86
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	84 60       	ori	r24, 0x04	; 4
     ce4:	8c 93       	st	X, r24
	
}
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <TWI_u8SlaveInit>:

void TWI_u8SlaveInit(u8 Copy_u8Adress)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	89 83       	std	Y+1, r24	; 0x01

	/* 1- Set the address of the slave */
	/* 2- Enable the ACK */
	/* 3- Enable the TWI peripheral */
	
	if ( (Copy_u8Adress > 0) &&  (Copy_u8Adress < 127) )
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	88 23       	and	r24, r24
     cfc:	b1 f0       	breq	.+44     	; 0xd2a <TWI_u8SlaveInit+0x3e>
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	8f 37       	cpi	r24, 0x7F	; 127
     d02:	98 f4       	brcc	.+38     	; 0xd2a <TWI_u8SlaveInit+0x3e>
	{
		/* set the address if the MCU is a slave in the system*/
		/* the slave address loaded at the 7 MSB of TWAR REG */
		/* Make sure that the address not start with 1111xxx*/
		TWI_TWAR_REG = (Copy_u8Adress << 1); /* shifted one to loaded at the 7 MSB */
     d04:	e3 e2       	ldi	r30, 0x23	; 35
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	88 0f       	add	r24, r24
     d0c:	80 83       	st	Z, r24
		
		/* Enable ACK*/
	 	SET_BIT(TWI_TWCR_REG,TWEA);
     d0e:	a6 e5       	ldi	r26, 0x56	; 86
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e6 e5       	ldi	r30, 0x56	; 86
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	8c 93       	st	X, r24
		
		/* Enable TWI */
		SET_BIT(TWI_TWCR_REG,TWEN);
     d1c:	a6 e5       	ldi	r26, 0x56	; 86
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e6 e5       	ldi	r30, 0x56	; 86
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	84 60       	ori	r24, 0x04	; 4
     d28:	8c 93       	st	X, r24

	
	}
	
	
}
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <TWI_u8MasterStartCond>:



TWI_enuErrorsState TWI_u8MasterStartCond (void)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <TWI_u8MasterStartCond+0x6>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
	TWI_enuErrorsState Local_enuErrorState = StartConditionErr ;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
	/* 3- check the TWSR ACK Code for start condition*/
	/* 4- Clear the TWSTA bit */
	
	
	/* initiate the Start condition */
	SET_BIT(TWI_TWCR_REG,TWSTA);
     d40:	a6 e5       	ldi	r26, 0x56	; 86
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 e5       	ldi	r30, 0x56	; 86
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 62       	ori	r24, 0x20	; 32
     d4c:	8c 93       	st	X, r24
	
	/*clear the flag to previous operation*/
	SET_BIT(TWI_TWCR_REG,TWINT) ;
     d4e:	a6 e5       	ldi	r26, 0x56	; 86
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e5       	ldi	r30, 0x56	; 86
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	8c 93       	st	X, r24
	
	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
     d5c:	e6 e5       	ldi	r30, 0x56	; 86
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 23       	and	r24, r24
     d64:	dc f7       	brge	.-10     	; 0xd5c <TWI_u8MasterStartCond+0x2a>
	
	/*  check the TWSR ACK Code for start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_START_COND_SENT)
     d66:	e1 e2       	ldi	r30, 0x21	; 33
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	88 7f       	andi	r24, 0xF8	; 248
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	88 30       	cpi	r24, 0x08	; 8
     d76:	91 05       	cpc	r25, r1
     d78:	21 f4       	brne	.+8      	; 0xd82 <TWI_u8MasterStartCond+0x50>
	{
		Local_enuErrorState = NoError ;
     d7a:	19 82       	std	Y+1, r1	; 0x01
		
//		/* Clear the TWSTA bit */
//		CLR_BIT(TWI_TWCR_REG,TWSTA);
		
		return Local_enuErrorState ;
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	8a 83       	std	Y+2, r24	; 0x02
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <TWI_u8MasterStartCond+0x54>
	}
	
	
	return Local_enuErrorState ;
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	8a 83       	std	Y+2, r24	; 0x02
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
	
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <TWI_u8MasterSendSlaveAdressWrite>:



TWI_enuErrorsState TWI_u8MasterSendSlaveAdressWrite (u8 Copy_u8Adress)

{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	00 d0       	rcall	.+0      	; 0xd98 <TWI_u8MasterSendSlaveAdressWrite+0x6>
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_enuErrorsState Local_enuErrorState = SlaveAddressWithWriteErr ;
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	89 83       	std	Y+1, r24	; 0x01
	/* 2- clear the flag to end the address*/
	/* 3- wait until the flag rise */
	/* 4- check the ACK code of the operation */
	
	/*load the address of the slave */
	TWI_TWDR_REG = (Copy_u8Adress << 1);
     da2:	e3 e2       	ldi	r30, 0x23	; 35
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	88 0f       	add	r24, r24
     daa:	80 83       	st	Z, r24
	** TWDR used for data loaded and (slave address loaded in the 7 MSB)
	** LSB in slave agree loaded used to control the operation send to slave
	** LSB = 0 for write operation (Dominant bit) , LSB = 1 for read operation
	*/

	CLR_BIT(TWI_TWDR_REG,TWD0);
     dac:	a3 e2       	ldi	r26, 0x23	; 35
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e3 e2       	ldi	r30, 0x23	; 35
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	8c 93       	st	X, r24
	
	/* Clear the TWSTA bit */
	CLR_BIT(TWI_TWCR_REG,TWSTA);
     dba:	a6 e5       	ldi	r26, 0x56	; 86
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e6 e5       	ldi	r30, 0x56	; 86
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	8f 7d       	andi	r24, 0xDF	; 223
     dc6:	8c 93       	st	X, r24

	/*clear the flag to send the address*/
	SET_BIT(TWI_TWCR_REG,TWINT) ;
     dc8:	a6 e5       	ldi	r26, 0x56	; 86
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e6 e5       	ldi	r30, 0x56	; 86
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	80 68       	ori	r24, 0x80	; 128
     dd4:	8c 93       	st	X, r24
	
	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
     dd6:	e6 e5       	ldi	r30, 0x56	; 86
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	88 23       	and	r24, r24
     dde:	dc f7       	brge	.-10     	; 0xdd6 <TWI_u8MasterSendSlaveAdressWrite+0x44>
	
	/*  check the TWSR ACK Code for start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_SLA_W_SENT)
     de0:	e1 e2       	ldi	r30, 0x21	; 33
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	88 7f       	andi	r24, 0xF8	; 248
     dec:	90 70       	andi	r25, 0x00	; 0
     dee:	88 31       	cpi	r24, 0x18	; 24
     df0:	91 05       	cpc	r25, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <TWI_u8MasterSendSlaveAdressWrite+0x64>
	{
		Local_enuErrorState = NoError ;
     df4:	19 82       	std	Y+1, r1	; 0x01
		
	}
	
	
	return Local_enuErrorState ;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
}
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <TWI_u8MasterSendSlaveAdressRead>:
TWI_enuErrorsState TWI_u8MasterSendSlaveAdressRead (u8 Copy_u8Adress)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <TWI_u8MasterSendSlaveAdressRead+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_enuErrorsState Local_enuErrorState = SlaveAddressWithReadErr ;
     e0e:	84 e0       	ldi	r24, 0x04	; 4
     e10:	89 83       	std	Y+1, r24	; 0x01
	/* 2- clear the flag to and the address*/
	/* 3- wait until the flag rise */
	/* 4- check the ACK code of the operation */
	
	/*load the address of the slave */
	TWI_TWDR_REG = (Copy_u8Adress << 1);
     e12:	e3 e2       	ldi	r30, 0x23	; 35
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	88 0f       	add	r24, r24
     e1a:	80 83       	st	Z, r24
	/* Read operation loaded
	** TWDR used for data loaded and (slave address loaded in the 7 MSB)
	** LSB in slave address loaded used to control the operation send to slave
	** LSB = 0 for write operation (Dominant bit) , LSB = 1 for read operation
	*/
	SET_BIT(TWI_TWDR_REG,TWD0);
     e1c:	a3 e2       	ldi	r26, 0x23	; 35
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e3 e2       	ldi	r30, 0x23	; 35
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8c 93       	st	X, r24
	
	/* Clear the TWSTA bit */
	CLR_BIT(TWI_TWCR_REG,TWSTA);
     e2a:	a6 e5       	ldi	r26, 0x56	; 86
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e6 e5       	ldi	r30, 0x56	; 86
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8f 7d       	andi	r24, 0xDF	; 223
     e36:	8c 93       	st	X, r24


	/*clear the flag to end the address*/
	SET_BIT(TWI_TWCR_REG,TWINT) ;
     e38:	a6 e5       	ldi	r26, 0x56	; 86
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e6 e5       	ldi	r30, 0x56	; 86
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	80 68       	ori	r24, 0x80	; 128
     e44:	8c 93       	st	X, r24
	


	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
     e46:	e6 e5       	ldi	r30, 0x56	; 86
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	88 23       	and	r24, r24
     e4e:	dc f7       	brge	.-10     	; 0xe46 <TWI_u8MasterSendSlaveAdressRead+0x44>
	
	/*  check the TWSR ACK Code for start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_SLA_R_SENT)
     e50:	e1 e2       	ldi	r30, 0x21	; 33
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	88 7f       	andi	r24, 0xF8	; 248
     e5c:	90 70       	andi	r25, 0x00	; 0
     e5e:	80 34       	cpi	r24, 0x40	; 64
     e60:	91 05       	cpc	r25, r1
     e62:	09 f4       	brne	.+2      	; 0xe66 <TWI_u8MasterSendSlaveAdressRead+0x64>
	{
		Local_enuErrorState = NoError ;
     e64:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return Local_enuErrorState ;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
		
}
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <TWI_u8MasterSendData>:

TWI_enuErrorsState TWI_u8MasterSendData (u8 Copy_u8Data)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	00 d0       	rcall	.+0      	; 0xe78 <TWI_u8MasterSendData+0x6>
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_enuErrorsState Local_enuErrorState = MasterWriteByteErr ;
     e7e:	85 e0       	ldi	r24, 0x05	; 5
     e80:	89 83       	std	Y+1, r24	; 0x01
	/* 2- Clear the flag */
	/* 3- wait until the flag being set*/
	/* 4- check the ACK received */
	
	/* Load the data to TWDR */
	TWI_TWDR_REG = Copy_u8Data ; 
     e82:	e3 e2       	ldi	r30, 0x23	; 35
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	80 83       	st	Z, r24
	
	/*clear the flag to and the data*/
	SET_BIT(TWI_TWCR_REG,TWINT) ;
     e8a:	a6 e5       	ldi	r26, 0x56	; 86
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e5       	ldi	r30, 0x56	; 86
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24
	
	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
     e98:	e6 e5       	ldi	r30, 0x56	; 86
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	88 23       	and	r24, r24
     ea0:	dc f7       	brge	.-10     	; 0xe98 <TWI_u8MasterSendData+0x26>
	
	/*  check the TWSR ACK Code for start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_MASTER_DATA_SENT)
     ea2:	e1 e2       	ldi	r30, 0x21	; 33
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	88 7f       	andi	r24, 0xF8	; 248
     eae:	90 70       	andi	r25, 0x00	; 0
     eb0:	88 32       	cpi	r24, 0x28	; 40
     eb2:	91 05       	cpc	r25, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <TWI_u8MasterSendData+0x46>
	{
		Local_enuErrorState = NoError ;
     eb6:	19 82       	std	Y+1, r1	; 0x01
		
	}
	
	return Local_enuErrorState  ;
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <TWI_u8MasterRecData>:

TWI_enuErrorsState TWI_u8MasterRecData (u8 *Copy_pu8Data)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <TWI_u8MasterRecData+0x6>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9b 83       	std	Y+3, r25	; 0x03
     ed2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_enuErrorsState Local_enuErrorState = MasterReadByteErr ;
     ed4:	86 e0       	ldi	r24, 0x06	; 6
     ed6:	89 83       	std	Y+1, r24	; 0x01
	/* 3- check the ACK for received data */
	/* 4- Read the data from TWDR */
	
	
	/*clear the flag */
	SET_BIT(TWI_TWCR_REG,TWINT) ;
     ed8:	a6 e5       	ldi	r26, 0x56	; 86
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e5       	ldi	r30, 0x56	; 86
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	80 68       	ori	r24, 0x80	; 128
     ee4:	8c 93       	st	X, r24
	
	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
     ee6:	e6 e5       	ldi	r30, 0x56	; 86
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 23       	and	r24, r24
     eee:	dc f7       	brge	.-10     	; 0xee6 <TWI_u8MasterRecData+0x22>
	
	/*  check the TWSR ACK Code for start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_MASTER_DATA_REC)
     ef0:	e1 e2       	ldi	r30, 0x21	; 33
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	88 2f       	mov	r24, r24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	88 7f       	andi	r24, 0xF8	; 248
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	80 35       	cpi	r24, 0x50	; 80
     f00:	91 05       	cpc	r25, r1
     f02:	39 f4       	brne	.+14     	; 0xf12 <TWI_u8MasterRecData+0x4e>
	{
		/*Read the data from TWDR */
		*Copy_pu8Data = TWI_TWDR_REG ;
     f04:	e3 e2       	ldi	r30, 0x23	; 35
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	ea 81       	ldd	r30, Y+2	; 0x02
     f0c:	fb 81       	ldd	r31, Y+3	; 0x03
     f0e:	80 83       	st	Z, r24
		
		Local_enuErrorState = NoError ;
     f10:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_enuErrorState  ;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <TWI_u8MasterRecDataVersion2>:

/* this function implemented just for the RTC */
u8 TWI_u8MasterRecDataVersion2 ()
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ValueRec = MasterReadByteErr ;
     f2a:	86 e0       	ldi	r24, 0x06	; 6
     f2c:	89 83       	std	Y+1, r24	; 0x01
	/* 2- Waiting the flag to set */
	/* 3- check the ACK for received data */
	/* 4- Read the data from TWDR */

	/* Enable the ACK bit*/
	SET_BIT(TWI_TWCR_REG,TWEA);
     f2e:	a6 e5       	ldi	r26, 0x56	; 86
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 e5       	ldi	r30, 0x56	; 86
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 64       	ori	r24, 0x40	; 64
     f3a:	8c 93       	st	X, r24


	/*clear the flag */
	SET_BIT(TWI_TWCR_REG,TWINT) ;
     f3c:	a6 e5       	ldi	r26, 0x56	; 86
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e6 e5       	ldi	r30, 0x56	; 86
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	80 68       	ori	r24, 0x80	; 128
     f48:	8c 93       	st	X, r24

	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
     f4a:	e6 e5       	ldi	r30, 0x56	; 86
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	88 23       	and	r24, r24
     f52:	dc f7       	brge	.-10     	; 0xf4a <TWI_u8MasterRecDataVersion2+0x2a>

	/*  check the TWSR ACK Code for start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_MASTER_DATA_REC)
     f54:	e1 e2       	ldi	r30, 0x21	; 33
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	88 2f       	mov	r24, r24
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	88 7f       	andi	r24, 0xF8	; 248
     f60:	90 70       	andi	r25, 0x00	; 0
     f62:	80 35       	cpi	r24, 0x50	; 80
     f64:	91 05       	cpc	r25, r1
     f66:	21 f4       	brne	.+8      	; 0xf70 <TWI_u8MasterRecDataVersion2+0x50>
	{
		/*Read the data from TWDR */
		Local_u8ValueRec = TWI_TWDR_REG ;
     f68:	e3 e2       	ldi	r30, 0x23	; 35
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ValueRec  ;
     f70:	89 81       	ldd	r24, Y+1	; 0x01

}
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <TWI_u8MasterRecDataNotAck>:

u8 TWI_u8MasterRecDataNotAck ()
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ValueRec = MasterReadByteErr ;
     f84:	86 e0       	ldi	r24, 0x06	; 6
     f86:	89 83       	std	Y+1, r24	; 0x01
	/* 2- Waiting the flag to set */
	/* 3- check the ACK for received data */
	/* 4- Read the data from TWDR */

	/* Enable ACK*/
	CLR_BIT(TWI_TWCR_REG,TWEA);
     f88:	a6 e5       	ldi	r26, 0x56	; 86
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e6 e5       	ldi	r30, 0x56	; 86
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8f 7b       	andi	r24, 0xBF	; 191
     f94:	8c 93       	st	X, r24

	/*clear the flag */
	SET_BIT(TWI_TWCR_REG,TWINT) ;
     f96:	a6 e5       	ldi	r26, 0x56	; 86
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e6 e5       	ldi	r30, 0x56	; 86
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 68       	ori	r24, 0x80	; 128
     fa2:	8c 93       	st	X, r24

	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
     fa4:	e6 e5       	ldi	r30, 0x56	; 86
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	88 23       	and	r24, r24
     fac:	dc f7       	brge	.-10     	; 0xfa4 <TWI_u8MasterRecDataNotAck+0x2a>

	/*Read the data from TWDR */
	Local_u8ValueRec = TWI_TWDR_REG ;
     fae:	e3 e2       	ldi	r30, 0x23	; 35
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	89 83       	std	Y+1, r24	; 0x01
//	{
//		/*Read the data from TWDR */
//		Local_u8ValueRec = TWI_TWDR_REG ;
//	}

	return Local_u8ValueRec  ;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01

}
     fb8:	0f 90       	pop	r0
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <TWI_u8MasterRepetedStartCond>:



TWI_enuErrorsState TWI_u8MasterRepetedStartCond (void)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	TWI_enuErrorsState Local_enuErrorState = RepeatedStartError ;
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	89 83       	std	Y+1, r24	; 0x01
	/* 3- wait till the flag set  */
	/* 4- check the TWSR ACK Code for Start condition*/
	/* 5- Clear the TWSTA bit */
	
	/* initiate the Start condition */
	SET_BIT(TWI_TWCR_REG,TWSTA);
     fce:	a6 e5       	ldi	r26, 0x56	; 86
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 62       	ori	r24, 0x20	; 32
     fda:	8c 93       	st	X, r24
	
	/*clear the flag */
	SET_BIT(TWI_TWCR_REG,TWINT) ;
     fdc:	a6 e5       	ldi	r26, 0x56	; 86
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e6 e5       	ldi	r30, 0x56	; 86
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	8c 93       	st	X, r24
	
	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
     fea:	e6 e5       	ldi	r30, 0x56	; 86
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 23       	and	r24, r24
     ff2:	dc f7       	brge	.-10     	; 0xfea <TWI_u8MasterRepetedStartCond+0x2a>
	
	/*  check the TWSR ACK Code for Start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_START_COND_SENT)
     ff4:	e1 e2       	ldi	r30, 0x21	; 33
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	88 7f       	andi	r24, 0xF8	; 248
    1000:	90 70       	andi	r25, 0x00	; 0
    1002:	88 30       	cpi	r24, 0x08	; 8
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <TWI_u8MasterRepetedStartCond+0x4a>
	{
		/* Clear the TWSTA bit */
//		CLR_BIT(TWI_TWCR_REG,TWSTA);
		
		Local_enuErrorState = NoError ;
    1008:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_enuErrorState ;	
    100a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <TWI_u8MasterStopCond>:

void TWI_u8MasterStopCond (void)
{
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
 
	/* 1- send stop conditon */
	SET_BIT(TWI_TWCR_REG,TWSTO);
    101c:	a6 e5       	ldi	r26, 0x56	; 86
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e6 e5       	ldi	r30, 0x56	; 86
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 61       	ori	r24, 0x10	; 16
    1028:	8c 93       	st	X, r24
	
	/* 2-clear the flag of the interrupt */
	SET_BIT(TWI_TWCR_REG,TWINT) ;
    102a:	a6 e5       	ldi	r26, 0x56	; 86
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e6 e5       	ldi	r30, 0x56	; 86
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	8c 93       	st	X, r24
	
}
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <TWI_u8SlaveSendData>:

TWI_enuErrorsState TWI_u8SlaveSendData (u8 Copy_u8Data)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <TWI_u8SlaveSendData+0x6>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	8a 83       	std	Y+2, r24	; 0x02
	TWI_enuErrorsState Local_enuErrorState = SlaveWriteByteErr ;
    104a:	87 e0       	ldi	r24, 0x07	; 7
    104c:	89 83       	std	Y+1, r24	; 0x01
	/* 2- Clear the flag to send the data  */
	/* 3- wait the flag to set*/
	/* 4- check the ACK */
	
	/* 1- Load the data to TWDR */
	TWI_TWDR_REG = Copy_u8Data;
    104e:	e3 e2       	ldi	r30, 0x23	; 35
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	80 83       	st	Z, r24
	
	/*clear the flag */
	SET_BIT(TWI_TWCR_REG,TWINT) ;
    1056:	a6 e5       	ldi	r26, 0x56	; 86
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e6 e5       	ldi	r30, 0x56	; 86
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	8c 93       	st	X, r24
	
	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
    1064:	e6 e5       	ldi	r30, 0x56	; 86
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	88 23       	and	r24, r24
    106c:	dc f7       	brge	.-10     	; 0x1064 <TWI_u8SlaveSendData+0x26>
	
	/*  check th TWSR ACK Code for start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_SLAVE_SENT_DATA)
    106e:	e1 e2       	ldi	r30, 0x21	; 33
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 2f       	mov	r24, r24
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	88 7f       	andi	r24, 0xF8	; 248
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	88 3b       	cpi	r24, 0xB8	; 184
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <TWI_u8SlaveSendData+0x46>
	{
		Local_enuErrorState = NoError ;
    1082:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return Local_enuErrorState ;
    1084:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <TWI_u8SlaveRecData>:
TWI_enuErrorsState TWI_u8SlaveRecData (u8 *Copy_Pu8Data)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <TWI_u8SlaveRecData+0x6>
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	9b 83       	std	Y+3, r25	; 0x03
    109e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_enuErrorsState Local_enuErrorState = SlaveReadByteErr ;
    10a0:	88 e0       	ldi	r24, 0x08	; 8
    10a2:	89 83       	std	Y+1, r24	; 0x01
	/* 2- clear the flag */
	/* 3- wait the flag to set */
	/* 4- check the ACK for Data received*/
	
	/*clear the flag */
	SET_BIT(TWI_TWCR_REG,TWINT) ;
    10a4:	a6 e5       	ldi	r26, 0x56	; 86
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e6 e5       	ldi	r30, 0x56	; 86
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 68       	ori	r24, 0x80	; 128
    10b0:	8c 93       	st	X, r24
	
	/* wait till the flag set  */
	while (!(GET_BIT(TWI_TWCR_REG,TWINT)));
    10b2:	e6 e5       	ldi	r30, 0x56	; 86
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	88 23       	and	r24, r24
    10ba:	dc f7       	brge	.-10     	; 0x10b2 <TWI_u8SlaveRecData+0x22>
	
	
	/*  check the TWSR ACK Code for start condition*/
	if ( (TWI_TWSR_REG & TWI_STATUES_REG_MSKING_VALUE) == TWI_SLAVE_REC_DATA)
    10bc:	e1 e2       	ldi	r30, 0x21	; 33
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	88 7f       	andi	r24, 0xF8	; 248
    10c8:	90 70       	andi	r25, 0x00	; 0
    10ca:	80 38       	cpi	r24, 0x80	; 128
    10cc:	91 05       	cpc	r25, r1
    10ce:	39 f4       	brne	.+14     	; 0x10de <TWI_u8SlaveRecData+0x4e>
	{
		*Copy_Pu8Data = TWI_TWDR_REG ;
    10d0:	e3 e2       	ldi	r30, 0x23	; 35
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	ea 81       	ldd	r30, Y+2	; 0x02
    10d8:	fb 81       	ldd	r31, Y+3	; 0x03
    10da:	80 83       	st	Z, r24
		Local_enuErrorState = NoError ;
    10dc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return Local_enuErrorState ;
    10de:	89 81       	ldd	r24, Y+1	; 0x01
	
	
	
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <M_DIO_void_DIOInit>:
 *  Description : This Function Initialize the DIO Pins [ I/P (Pull-up or floating ) - O/P (High or Low) ]
 * ----------------------------------------------------------------------------------------------
 */

void M_DIO_void_DIOInit(void)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
	/* Macros for initial Direction of PORTA */
  DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,
    10f4:	ea e3       	ldi	r30, 0x3A	; 58
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	80 83       	st	Z, r24
		  	  	  	  	 DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
						 DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,
						 DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);
  /* Macros for initial Direction of PORTB */
  DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,
    10fc:	e7 e3       	ldi	r30, 0x37	; 55
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	80 83       	st	Z, r24
		  	  	  	  	 DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
						 DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,
						 DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);
  /* Macros for initial Direction of PORTC */
  DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,
    1104:	e4 e3       	ldi	r30, 0x34	; 52
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	87 ef       	ldi	r24, 0xF7	; 247
    110a:	80 83       	st	Z, r24
		  	  	  	  	 DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
						 DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,
						 DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);
  /* Macros for initial Direction of PORTD */
  DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,
    110c:	e1 e3       	ldi	r30, 0x31	; 49
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	80 83       	st	Z, r24
		  	  	  	  	 DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
						 DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,
						 DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

  /* Macros for initial values of PORTA */
  DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	10 82       	st	Z, r1
		  	  	  	  	  DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
						  DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,
						  DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
  /* Macros for initial values of PORTB */
  DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,
    111a:	e8 e3       	ldi	r30, 0x38	; 56
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	10 82       	st	Z, r1
  		  	  	  	  	  DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
  						  DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,
  						  DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
    /* Macros for initial values of PORTC */
   DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	88 e0       	ldi	r24, 0x08	; 8
    1126:	80 83       	st	Z, r24
    		  	  	  	   DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
    					   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,
    					   DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
      /* Macros for initial values of PORTD */
    DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,
    1128:	e2 e3       	ldi	r30, 0x32	; 50
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	10 82       	st	Z, r1
      		  	  	  	  	DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
      						DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,
      						DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);

}
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <M_DIO_u8_SetPinDirection>:
 /* Return type :(u8 variable)        Error State  (STD_TYPES_NOK, STD_TYPES_OK)
 *  Description : This Function Sets the Direction of a specific pin (I/P - O/P)
 * ----------------------------------------------------------------------------------------------
 */
u8 M_DIO_u8_SetPinDirection(u8 Copy_u8PortNumber , u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	28 97       	sbiw	r28, 0x08	; 8
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	6b 83       	std	Y+3, r22	; 0x03
    114c:	4c 83       	std	Y+4, r20	; 0x04
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
    114e:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number and Pin Number are in the valid range )*/
	if ((Copy_u8PortNumber <= DIO_u8_PORTD) && (Copy_u8PinNumber <= DIO_u8_PIN7))
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	08 f0       	brcs	.+2      	; 0x1158 <M_DIO_u8_SetPinDirection+0x24>
    1156:	f2 c0       	rjmp	.+484    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	08 f0       	brcs	.+2      	; 0x1160 <M_DIO_u8_SetPinDirection+0x2c>
    115e:	ee c0       	rjmp	.+476    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01

		if (Copy_u8Direction == DIO_u8_PIN_OUTPUT_DIRECTION) /* check the direction */
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	88 23       	and	r24, r24
    1168:	09 f0       	breq	.+2      	; 0x116c <M_DIO_u8_SetPinDirection+0x38>
    116a:	6f c0       	rjmp	.+222    	; 0x124a <M_DIO_u8_SetPinDirection+0x116>
		{
			switch (Copy_u8PortNumber) /* check the port Number */
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	38 87       	std	Y+8, r19	; 0x08
    1174:	2f 83       	std	Y+7, r18	; 0x07
    1176:	8f 81       	ldd	r24, Y+7	; 0x07
    1178:	98 85       	ldd	r25, Y+8	; 0x08
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	91 05       	cpc	r25, r1
    117e:	49 f1       	breq	.+82     	; 0x11d2 <M_DIO_u8_SetPinDirection+0x9e>
    1180:	2f 81       	ldd	r18, Y+7	; 0x07
    1182:	38 85       	ldd	r19, Y+8	; 0x08
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <M_DIO_u8_SetPinDirection+0x60>
    118a:	8f 81       	ldd	r24, Y+7	; 0x07
    118c:	98 85       	ldd	r25, Y+8	; 0x08
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 f0       	breq	.+24     	; 0x11aa <M_DIO_u8_SetPinDirection+0x76>
    1192:	d4 c0       	rjmp	.+424    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
    1194:	2f 81       	ldd	r18, Y+7	; 0x07
    1196:	38 85       	ldd	r19, Y+8	; 0x08
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	71 f1       	breq	.+92     	; 0x11fa <M_DIO_u8_SetPinDirection+0xc6>
    119e:	8f 81       	ldd	r24, Y+7	; 0x07
    11a0:	98 85       	ldd	r25, Y+8	; 0x08
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	e9 f1       	breq	.+122    	; 0x1222 <M_DIO_u8_SetPinDirection+0xee>
    11a8:	c9 c0       	rjmp	.+402    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			{
			case DIO_u8_PORTA : SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber) ; break;
    11aa:	aa e3       	ldi	r26, 0x3A	; 58
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ea e3       	ldi	r30, 0x3A	; 58
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <M_DIO_u8_SetPinDirection+0x94>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <M_DIO_u8_SetPinDirection+0x90>
    11cc:	84 2b       	or	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	b5 c0       	rjmp	.+362    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTB : SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber) ; break;
    11d2:	a7 e3       	ldi	r26, 0x37	; 55
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e7 e3       	ldi	r30, 0x37	; 55
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <M_DIO_u8_SetPinDirection+0xbc>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <M_DIO_u8_SetPinDirection+0xb8>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	a1 c0       	rjmp	.+322    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTC : SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber) ; break;
    11fa:	a4 e3       	ldi	r26, 0x34	; 52
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e4 e3       	ldi	r30, 0x34	; 52
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <M_DIO_u8_SetPinDirection+0xe4>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <M_DIO_u8_SetPinDirection+0xe0>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	8d c0       	rjmp	.+282    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTD : SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber) ; break;
    1222:	a1 e3       	ldi	r26, 0x31	; 49
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e1 e3       	ldi	r30, 0x31	; 49
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <M_DIO_u8_SetPinDirection+0x10c>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <M_DIO_u8_SetPinDirection+0x108>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	79 c0       	rjmp	.+242    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			}
		}

		else if (Copy_u8Direction == DIO_u8_PIN_INPUT_DIRECTION) /* check the direction */
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	09 f0       	breq	.+2      	; 0x1252 <M_DIO_u8_SetPinDirection+0x11e>
    1250:	74 c0       	rjmp	.+232    	; 0x133a <M_DIO_u8_SetPinDirection+0x206>
		{
			switch (Copy_u8PortNumber) /* check the port Number */
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3e 83       	std	Y+6, r19	; 0x06
    125a:	2d 83       	std	Y+5, r18	; 0x05
    125c:	8d 81       	ldd	r24, Y+5	; 0x05
    125e:	9e 81       	ldd	r25, Y+6	; 0x06
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	91 05       	cpc	r25, r1
    1264:	59 f1       	breq	.+86     	; 0x12bc <M_DIO_u8_SetPinDirection+0x188>
    1266:	2d 81       	ldd	r18, Y+5	; 0x05
    1268:	3e 81       	ldd	r19, Y+6	; 0x06
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	2c f4       	brge	.+10     	; 0x127a <M_DIO_u8_SetPinDirection+0x146>
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	9e 81       	ldd	r25, Y+6	; 0x06
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	69 f0       	breq	.+26     	; 0x1292 <M_DIO_u8_SetPinDirection+0x15e>
    1278:	61 c0       	rjmp	.+194    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
    127a:	2d 81       	ldd	r18, Y+5	; 0x05
    127c:	3e 81       	ldd	r19, Y+6	; 0x06
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	89 f1       	breq	.+98     	; 0x12e6 <M_DIO_u8_SetPinDirection+0x1b2>
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	91 05       	cpc	r25, r1
    128c:	09 f4       	brne	.+2      	; 0x1290 <M_DIO_u8_SetPinDirection+0x15c>
    128e:	40 c0       	rjmp	.+128    	; 0x1310 <M_DIO_u8_SetPinDirection+0x1dc>
    1290:	55 c0       	rjmp	.+170    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			{
			case DIO_u8_PORTA : CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber) ; break;
    1292:	aa e3       	ldi	r26, 0x3A	; 58
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ea e3       	ldi	r30, 0x3A	; 58
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <M_DIO_u8_SetPinDirection+0x17c>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <M_DIO_u8_SetPinDirection+0x178>
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8c 93       	st	X, r24
    12ba:	40 c0       	rjmp	.+128    	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTB : CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber) ; break;
    12bc:	a7 e3       	ldi	r26, 0x37	; 55
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e7 e3       	ldi	r30, 0x37	; 55
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <M_DIO_u8_SetPinDirection+0x1a6>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <M_DIO_u8_SetPinDirection+0x1a2>
    12de:	80 95       	com	r24
    12e0:	84 23       	and	r24, r20
    12e2:	8c 93       	st	X, r24
    12e4:	2b c0       	rjmp	.+86     	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTC : CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber) ; break;
    12e6:	a4 e3       	ldi	r26, 0x34	; 52
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e4 e3       	ldi	r30, 0x34	; 52
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <M_DIO_u8_SetPinDirection+0x1d0>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <M_DIO_u8_SetPinDirection+0x1cc>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	16 c0       	rjmp	.+44     	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			case DIO_u8_PORTD : CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber) ; break;
    1310:	a1 e3       	ldi	r26, 0x31	; 49
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e1 e3       	ldi	r30, 0x31	; 49
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <M_DIO_u8_SetPinDirection+0x1fa>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <M_DIO_u8_SetPinDirection+0x1f6>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	01 c0       	rjmp	.+2      	; 0x133c <M_DIO_u8_SetPinDirection+0x208>
			}
		}
		else /* Invalid Direction option */
		{
			 Local_u8ErrorState = STD_TYPES_NOK ;
    133a:	19 82       	std	Y+1, r1	; 0x01
		}

	}


	return Local_u8ErrorState;
    133c:	89 81       	ldd	r24, Y+1	; 0x01
}
    133e:	28 96       	adiw	r28, 0x08	; 8
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <M_DIO_u8_SetPinValue>:
 *  Description : This Function Sets the value of a specific pin (HIGH - LOW)
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_SetPinValue (u8 Copy_u8PortNumber , u8 Copy_u8PinNumber, u8 Copy_u8Value)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	28 97       	sbiw	r28, 0x08	; 8
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	8a 83       	std	Y+2, r24	; 0x02
    1366:	6b 83       	std	Y+3, r22	; 0x03
    1368:	4c 83       	std	Y+4, r20	; 0x04
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
    136a:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number and Pin Number are in the valid range )*/
	if ((Copy_u8PortNumber <= DIO_u8_PORTD) && (Copy_u8PinNumber <= DIO_u8_PIN7))
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	08 f0       	brcs	.+2      	; 0x1374 <M_DIO_u8_SetPinValue+0x24>
    1372:	f2 c0       	rjmp	.+484    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	88 30       	cpi	r24, 0x08	; 8
    1378:	08 f0       	brcs	.+2      	; 0x137c <M_DIO_u8_SetPinValue+0x2c>
    137a:	ee c0       	rjmp	.+476    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
	{

		Local_u8ErrorState = STD_TYPES_OK;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01

		if (Copy_u8Value == DIO_u8_PIN_VALUE_HIGH) /* check the direction */
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	09 f0       	breq	.+2      	; 0x1388 <M_DIO_u8_SetPinValue+0x38>
    1386:	6f c0       	rjmp	.+222    	; 0x1466 <M_DIO_u8_SetPinValue+0x116>
		{
			switch (Copy_u8PortNumber) /* check the port Number */
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	38 87       	std	Y+8, r19	; 0x08
    1390:	2f 83       	std	Y+7, r18	; 0x07
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	98 85       	ldd	r25, Y+8	; 0x08
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	49 f1       	breq	.+82     	; 0x13ee <M_DIO_u8_SetPinValue+0x9e>
    139c:	2f 81       	ldd	r18, Y+7	; 0x07
    139e:	38 85       	ldd	r19, Y+8	; 0x08
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <M_DIO_u8_SetPinValue+0x60>
    13a6:	8f 81       	ldd	r24, Y+7	; 0x07
    13a8:	98 85       	ldd	r25, Y+8	; 0x08
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <M_DIO_u8_SetPinValue+0x76>
    13ae:	d4 c0       	rjmp	.+424    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
    13b0:	2f 81       	ldd	r18, Y+7	; 0x07
    13b2:	38 85       	ldd	r19, Y+8	; 0x08
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	71 f1       	breq	.+92     	; 0x1416 <M_DIO_u8_SetPinValue+0xc6>
    13ba:	8f 81       	ldd	r24, Y+7	; 0x07
    13bc:	98 85       	ldd	r25, Y+8	; 0x08
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	e9 f1       	breq	.+122    	; 0x143e <M_DIO_u8_SetPinValue+0xee>
    13c4:	c9 c0       	rjmp	.+402    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			{
			case DIO_u8_PORTA : SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber) ; break;
    13c6:	ab e3       	ldi	r26, 0x3B	; 59
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <M_DIO_u8_SetPinValue+0x94>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <M_DIO_u8_SetPinValue+0x90>
    13e8:	84 2b       	or	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	b5 c0       	rjmp	.+362    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTB : SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber) ; break;
    13ee:	a8 e3       	ldi	r26, 0x38	; 56
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e8 e3       	ldi	r30, 0x38	; 56
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <M_DIO_u8_SetPinValue+0xbc>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <M_DIO_u8_SetPinValue+0xb8>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	a1 c0       	rjmp	.+322    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTC : SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber) ; break;
    1416:	a5 e3       	ldi	r26, 0x35	; 53
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <M_DIO_u8_SetPinValue+0xe4>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <M_DIO_u8_SetPinValue+0xe0>
    1438:	84 2b       	or	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	8d c0       	rjmp	.+282    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTD : SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber) ; break;
    143e:	a2 e3       	ldi	r26, 0x32	; 50
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <M_DIO_u8_SetPinValue+0x10c>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <M_DIO_u8_SetPinValue+0x108>
    1460:	84 2b       	or	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	79 c0       	rjmp	.+242    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			}
		}

		else if (Copy_u8Value == DIO_u8_PIN_VALUE_LOW) /* check the direction */
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	88 23       	and	r24, r24
    146a:	09 f0       	breq	.+2      	; 0x146e <M_DIO_u8_SetPinValue+0x11e>
    146c:	74 c0       	rjmp	.+232    	; 0x1556 <M_DIO_u8_SetPinValue+0x206>
		{
			switch (Copy_u8PortNumber) /* check the port Number */
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3e 83       	std	Y+6, r19	; 0x06
    1476:	2d 83       	std	Y+5, r18	; 0x05
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	59 f1       	breq	.+86     	; 0x14d8 <M_DIO_u8_SetPinValue+0x188>
    1482:	2d 81       	ldd	r18, Y+5	; 0x05
    1484:	3e 81       	ldd	r19, Y+6	; 0x06
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <M_DIO_u8_SetPinValue+0x146>
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	69 f0       	breq	.+26     	; 0x14ae <M_DIO_u8_SetPinValue+0x15e>
    1494:	61 c0       	rjmp	.+194    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	3e 81       	ldd	r19, Y+6	; 0x06
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	89 f1       	breq	.+98     	; 0x1502 <M_DIO_u8_SetPinValue+0x1b2>
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <M_DIO_u8_SetPinValue+0x15c>
    14aa:	40 c0       	rjmp	.+128    	; 0x152c <M_DIO_u8_SetPinValue+0x1dc>
    14ac:	55 c0       	rjmp	.+170    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			{
			case DIO_u8_PORTA : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber) ; break;
    14ae:	ab e3       	ldi	r26, 0x3B	; 59
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e3       	ldi	r30, 0x3B	; 59
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <M_DIO_u8_SetPinValue+0x17c>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <M_DIO_u8_SetPinValue+0x178>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	40 c0       	rjmp	.+128    	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTB : CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber) ; break;
    14d8:	a8 e3       	ldi	r26, 0x38	; 56
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e8 e3       	ldi	r30, 0x38	; 56
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <M_DIO_u8_SetPinValue+0x1a6>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <M_DIO_u8_SetPinValue+0x1a2>
    14fa:	80 95       	com	r24
    14fc:	84 23       	and	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	2b c0       	rjmp	.+86     	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTC : CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber) ; break;
    1502:	a5 e3       	ldi	r26, 0x35	; 53
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e3       	ldi	r30, 0x35	; 53
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <M_DIO_u8_SetPinValue+0x1d0>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <M_DIO_u8_SetPinValue+0x1cc>
    1524:	80 95       	com	r24
    1526:	84 23       	and	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			case DIO_u8_PORTD : CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber) ; break;
    152c:	a2 e3       	ldi	r26, 0x32	; 50
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e2 e3       	ldi	r30, 0x32	; 50
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <M_DIO_u8_SetPinValue+0x1fa>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <M_DIO_u8_SetPinValue+0x1f6>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <M_DIO_u8_SetPinValue+0x208>
			}
		}
		else /* Invalid Direction option */
		{
			Local_u8ErrorState = STD_TYPES_NOK ;
    1556:	19 82       	std	Y+1, r1	; 0x01
		}

	}

	return Local_u8ErrorState;
    1558:	89 81       	ldd	r24, Y+1	; 0x01
}
    155a:	28 96       	adiw	r28, 0x08	; 8
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	08 95       	ret

0000156c <M_DIO_u8_GetPinValue>:
 *  Description : This Function Gets the value of a specific pin (HIGH - LOW)
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_GetPinValue (u8 Copy_u8PortNumber,u8 Copy_u8PinNumber, u8 * Copy_Pu8PinValue)
{
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	27 97       	sbiw	r28, 0x07	; 7
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	8a 83       	std	Y+2, r24	; 0x02
    1582:	6b 83       	std	Y+3, r22	; 0x03
    1584:	5d 83       	std	Y+5, r21	; 0x05
    1586:	4c 83       	std	Y+4, r20	; 0x04
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
    1588:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number and Pin Number are in the valid range && if the user pass a Pointer)*/
	if ((Copy_u8PortNumber <= DIO_u8_PORTD) && (Copy_u8PinNumber <= DIO_u8_PIN7) && (Copy_Pu8PinValue != NULL))
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	84 30       	cpi	r24, 0x04	; 4
    158e:	08 f0       	brcs	.+2      	; 0x1592 <M_DIO_u8_GetPinValue+0x26>
    1590:	7b c0       	rjmp	.+246    	; 0x1688 <M_DIO_u8_GetPinValue+0x11c>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	88 30       	cpi	r24, 0x08	; 8
    1596:	08 f0       	brcs	.+2      	; 0x159a <M_DIO_u8_GetPinValue+0x2e>
    1598:	77 c0       	rjmp	.+238    	; 0x1688 <M_DIO_u8_GetPinValue+0x11c>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <M_DIO_u8_GetPinValue+0x38>
    15a2:	72 c0       	rjmp	.+228    	; 0x1688 <M_DIO_u8_GetPinValue+0x11c>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	89 83       	std	Y+1, r24	; 0x01

		switch (Copy_u8PortNumber)/* check the port Number */
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	3f 83       	std	Y+7, r19	; 0x07
    15b0:	2e 83       	std	Y+6, r18	; 0x06
    15b2:	4e 81       	ldd	r20, Y+6	; 0x06
    15b4:	5f 81       	ldd	r21, Y+7	; 0x07
    15b6:	41 30       	cpi	r20, 0x01	; 1
    15b8:	51 05       	cpc	r21, r1
    15ba:	59 f1       	breq	.+86     	; 0x1612 <M_DIO_u8_GetPinValue+0xa6>
    15bc:	8e 81       	ldd	r24, Y+6	; 0x06
    15be:	9f 81       	ldd	r25, Y+7	; 0x07
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	91 05       	cpc	r25, r1
    15c4:	34 f4       	brge	.+12     	; 0x15d2 <M_DIO_u8_GetPinValue+0x66>
    15c6:	2e 81       	ldd	r18, Y+6	; 0x06
    15c8:	3f 81       	ldd	r19, Y+7	; 0x07
    15ca:	21 15       	cp	r18, r1
    15cc:	31 05       	cpc	r19, r1
    15ce:	69 f0       	breq	.+26     	; 0x15ea <M_DIO_u8_GetPinValue+0x7e>
    15d0:	5b c0       	rjmp	.+182    	; 0x1688 <M_DIO_u8_GetPinValue+0x11c>
    15d2:	4e 81       	ldd	r20, Y+6	; 0x06
    15d4:	5f 81       	ldd	r21, Y+7	; 0x07
    15d6:	42 30       	cpi	r20, 0x02	; 2
    15d8:	51 05       	cpc	r21, r1
    15da:	79 f1       	breq	.+94     	; 0x163a <M_DIO_u8_GetPinValue+0xce>
    15dc:	8e 81       	ldd	r24, Y+6	; 0x06
    15de:	9f 81       	ldd	r25, Y+7	; 0x07
    15e0:	83 30       	cpi	r24, 0x03	; 3
    15e2:	91 05       	cpc	r25, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <M_DIO_u8_GetPinValue+0x7c>
    15e6:	3d c0       	rjmp	.+122    	; 0x1662 <M_DIO_u8_GetPinValue+0xf6>
    15e8:	4f c0       	rjmp	.+158    	; 0x1688 <M_DIO_u8_GetPinValue+0x11c>
		{
			case DIO_u8_PORTA : *Copy_Pu8PinValue =GET_BIT(DIO_u8_PINA_REG,Copy_u8PinNumber);break; /* update the variable with Pin value*/
    15ea:	e9 e3       	ldi	r30, 0x39	; 57
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a9 01       	movw	r20, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <M_DIO_u8_GetPinValue+0x96>
    15fe:	55 95       	asr	r21
    1600:	47 95       	ror	r20
    1602:	8a 95       	dec	r24
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <M_DIO_u8_GetPinValue+0x92>
    1606:	ca 01       	movw	r24, r20
    1608:	81 70       	andi	r24, 0x01	; 1
    160a:	ec 81       	ldd	r30, Y+4	; 0x04
    160c:	fd 81       	ldd	r31, Y+5	; 0x05
    160e:	80 83       	st	Z, r24
    1610:	3b c0       	rjmp	.+118    	; 0x1688 <M_DIO_u8_GetPinValue+0x11c>
			case DIO_u8_PORTB : *Copy_Pu8PinValue =GET_BIT(DIO_u8_PINB_REG,Copy_u8PinNumber);break;  /* update the variable with Pin value*/
    1612:	e6 e3       	ldi	r30, 0x36	; 54
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a9 01       	movw	r20, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <M_DIO_u8_GetPinValue+0xbe>
    1626:	55 95       	asr	r21
    1628:	47 95       	ror	r20
    162a:	8a 95       	dec	r24
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <M_DIO_u8_GetPinValue+0xba>
    162e:	ca 01       	movw	r24, r20
    1630:	81 70       	andi	r24, 0x01	; 1
    1632:	ec 81       	ldd	r30, Y+4	; 0x04
    1634:	fd 81       	ldd	r31, Y+5	; 0x05
    1636:	80 83       	st	Z, r24
    1638:	27 c0       	rjmp	.+78     	; 0x1688 <M_DIO_u8_GetPinValue+0x11c>
			case DIO_u8_PORTC : *Copy_Pu8PinValue =GET_BIT(DIO_u8_PINC_REG,Copy_u8PinNumber);break; /* update the variable with Pin value*/
    163a:	e3 e3       	ldi	r30, 0x33	; 51
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a9 01       	movw	r20, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <M_DIO_u8_GetPinValue+0xe6>
    164e:	55 95       	asr	r21
    1650:	47 95       	ror	r20
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <M_DIO_u8_GetPinValue+0xe2>
    1656:	ca 01       	movw	r24, r20
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	ec 81       	ldd	r30, Y+4	; 0x04
    165c:	fd 81       	ldd	r31, Y+5	; 0x05
    165e:	80 83       	st	Z, r24
    1660:	13 c0       	rjmp	.+38     	; 0x1688 <M_DIO_u8_GetPinValue+0x11c>
			case DIO_u8_PORTD : *Copy_Pu8PinValue =GET_BIT(DIO_u8_PIND_REG,Copy_u8PinNumber);break; /* update the variable with Pin value*/
    1662:	e0 e3       	ldi	r30, 0x30	; 48
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	88 2f       	mov	r24, r24
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a9 01       	movw	r20, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <M_DIO_u8_GetPinValue+0x10e>
    1676:	55 95       	asr	r21
    1678:	47 95       	ror	r20
    167a:	8a 95       	dec	r24
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <M_DIO_u8_GetPinValue+0x10a>
    167e:	ca 01       	movw	r24, r20
    1680:	81 70       	andi	r24, 0x01	; 1
    1682:	ec 81       	ldd	r30, Y+4	; 0x04
    1684:	fd 81       	ldd	r31, Y+5	; 0x05
    1686:	80 83       	st	Z, r24
		}

	}

	return Local_u8ErrorState ;
    1688:	89 81       	ldd	r24, Y+1	; 0x01

}
    168a:	27 96       	adiw	r28, 0x07	; 7
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <M_DIO_u8_TogglePinValue>:
 *  Description : This Function Toggles the value of a specific Pin
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_TogglePinValue (u8 Copy_u8PortNumber,u8 Copy_u8PinNumber)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <M_DIO_u8_TogglePinValue+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <M_DIO_u8_TogglePinValue+0x8>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	8a 83       	std	Y+2, r24	; 0x02
    16ac:	6b 83       	std	Y+3, r22	; 0x03
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
    16ae:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number and Pin Number are in the valid range) */
	if (Copy_u8PortNumber <= DIO_u8_PORTD && Copy_u8PinNumber <= DIO_u8_PIN7)
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <M_DIO_u8_TogglePinValue+0x1c>
    16b6:	74 c0       	rjmp	.+232    	; 0x17a0 <M_DIO_u8_TogglePinValue+0x104>
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	88 30       	cpi	r24, 0x08	; 8
    16bc:	08 f0       	brcs	.+2      	; 0x16c0 <M_DIO_u8_TogglePinValue+0x24>
    16be:	70 c0       	rjmp	.+224    	; 0x17a0 <M_DIO_u8_TogglePinValue+0x104>
	{
		Local_u8ErrorState = STD_TYPES_OK ;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	89 83       	std	Y+1, r24	; 0x01

		switch (Copy_u8PortNumber ) /* check the port Number */
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	3d 83       	std	Y+5, r19	; 0x05
    16cc:	2c 83       	std	Y+4, r18	; 0x04
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	9d 81       	ldd	r25, Y+5	; 0x05
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	49 f1       	breq	.+82     	; 0x172a <M_DIO_u8_TogglePinValue+0x8e>
    16d8:	2c 81       	ldd	r18, Y+4	; 0x04
    16da:	3d 81       	ldd	r19, Y+5	; 0x05
    16dc:	22 30       	cpi	r18, 0x02	; 2
    16de:	31 05       	cpc	r19, r1
    16e0:	2c f4       	brge	.+10     	; 0x16ec <M_DIO_u8_TogglePinValue+0x50>
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	61 f0       	breq	.+24     	; 0x1702 <M_DIO_u8_TogglePinValue+0x66>
    16ea:	5a c0       	rjmp	.+180    	; 0x17a0 <M_DIO_u8_TogglePinValue+0x104>
    16ec:	2c 81       	ldd	r18, Y+4	; 0x04
    16ee:	3d 81       	ldd	r19, Y+5	; 0x05
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	71 f1       	breq	.+92     	; 0x1752 <M_DIO_u8_TogglePinValue+0xb6>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	e9 f1       	breq	.+122    	; 0x177a <M_DIO_u8_TogglePinValue+0xde>
    1700:	4f c0       	rjmp	.+158    	; 0x17a0 <M_DIO_u8_TogglePinValue+0x104>
		{
		case DIO_u8_PORTA : TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break;
    1702:	ab e3       	ldi	r26, 0x3B	; 59
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	eb e3       	ldi	r30, 0x3B	; 59
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <M_DIO_u8_TogglePinValue+0x84>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <M_DIO_u8_TogglePinValue+0x80>
    1724:	84 27       	eor	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	3b c0       	rjmp	.+118    	; 0x17a0 <M_DIO_u8_TogglePinValue+0x104>
		case DIO_u8_PORTB : TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break;
    172a:	a8 e3       	ldi	r26, 0x38	; 56
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 e3       	ldi	r30, 0x38	; 56
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <M_DIO_u8_TogglePinValue+0xac>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <M_DIO_u8_TogglePinValue+0xa8>
    174c:	84 27       	eor	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	27 c0       	rjmp	.+78     	; 0x17a0 <M_DIO_u8_TogglePinValue+0x104>
		case DIO_u8_PORTC : TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break;
    1752:	a5 e3       	ldi	r26, 0x35	; 53
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e3       	ldi	r30, 0x35	; 53
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <M_DIO_u8_TogglePinValue+0xd4>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <M_DIO_u8_TogglePinValue+0xd0>
    1774:	84 27       	eor	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	13 c0       	rjmp	.+38     	; 0x17a0 <M_DIO_u8_TogglePinValue+0x104>
		case DIO_u8_PORTD : TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break;
    177a:	a2 e3       	ldi	r26, 0x32	; 50
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e2 e3       	ldi	r30, 0x32	; 50
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <M_DIO_u8_TogglePinValue+0xfc>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <M_DIO_u8_TogglePinValue+0xf8>
    179c:	84 27       	eor	r24, r20
    179e:	8c 93       	st	X, r24
		}


	}
	return Local_u8ErrorState;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01

}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <M_DIO_u8_SetPortDirection>:
 *  Description : This Function Sets the Direction of a specific PORT (O/P - I/P)
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_SetPortDirection (u8 Copy_u8PortNumber , u8 Copy_u8PortDirection )
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <M_DIO_u8_SetPortDirection+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <M_DIO_u8_SetPortDirection+0x8>
    17ba:	0f 92       	push	r0
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	6b 83       	std	Y+3, r22	; 0x03
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    17c4:	19 82       	std	Y+1, r1	; 0x01
	/* Input validation ( check if the port Number is in the valid range */
	if (Copy_u8PortNumber <= DIO_u8_PORTD )
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	a0 f5       	brcc	.+104    	; 0x1834 <M_DIO_u8_SetPortDirection+0x82>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01

		switch (Copy_u8PortNumber) /* check the port Number */
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3d 83       	std	Y+5, r19	; 0x05
    17d8:	2c 83       	std	Y+4, r18	; 0x04
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	d1 f0       	breq	.+52     	; 0x1818 <M_DIO_u8_SetPortDirection+0x66>
    17e4:	2c 81       	ldd	r18, Y+4	; 0x04
    17e6:	3d 81       	ldd	r19, Y+5	; 0x05
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <M_DIO_u8_SetPortDirection+0x46>
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	9d 81       	ldd	r25, Y+5	; 0x05
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	61 f0       	breq	.+24     	; 0x180e <M_DIO_u8_SetPortDirection+0x5c>
    17f6:	1e c0       	rjmp	.+60     	; 0x1834 <M_DIO_u8_SetPortDirection+0x82>
    17f8:	2c 81       	ldd	r18, Y+4	; 0x04
    17fa:	3d 81       	ldd	r19, Y+5	; 0x05
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	81 f0       	breq	.+32     	; 0x1822 <M_DIO_u8_SetPortDirection+0x70>
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	9d 81       	ldd	r25, Y+5	; 0x05
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	81 f0       	breq	.+32     	; 0x182c <M_DIO_u8_SetPortDirection+0x7a>
    180c:	13 c0       	rjmp	.+38     	; 0x1834 <M_DIO_u8_SetPortDirection+0x82>
		{
			case DIO_u8_PORTA : DIO_u8_DDRA_REG = Copy_u8PortDirection ; break;
    180e:	ea e3       	ldi	r30, 0x3A	; 58
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	80 83       	st	Z, r24
    1816:	0e c0       	rjmp	.+28     	; 0x1834 <M_DIO_u8_SetPortDirection+0x82>
			case DIO_u8_PORTB : DIO_u8_DDRB_REG = Copy_u8PortDirection ; break;
    1818:	e7 e3       	ldi	r30, 0x37	; 55
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	80 83       	st	Z, r24
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <M_DIO_u8_SetPortDirection+0x82>
			case DIO_u8_PORTC : DIO_u8_DDRC_REG = Copy_u8PortDirection ; break;
    1822:	e4 e3       	ldi	r30, 0x34	; 52
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	80 83       	st	Z, r24
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <M_DIO_u8_SetPortDirection+0x82>
			case DIO_u8_PORTD : DIO_u8_DDRD_REG = Copy_u8PortDirection ; break;
    182c:	e1 e3       	ldi	r30, 0x31	; 49
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	80 83       	st	Z, r24
		}

	}
	return Local_u8ErrorState;
    1834:	89 81       	ldd	r24, Y+1	; 0x01

}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <M_DIO_u8_SetPortValue>:
 *  Description : This Function Sets the Value of a specific PORT (HIGH - LOW)
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_SetPortValue (u8 Copy_u8PortNumber , u8 Copy_u8PortValue )
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <M_DIO_u8_SetPortValue+0x6>
    184c:	00 d0       	rcall	.+0      	; 0x184e <M_DIO_u8_SetPortValue+0x8>
    184e:	0f 92       	push	r0
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	8a 83       	std	Y+2, r24	; 0x02
    1856:	6b 83       	std	Y+3, r22	; 0x03
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1858:	19 82       	std	Y+1, r1	; 0x01

	/* Input validation ( check if the port Number is in the valid range */
	if (Copy_u8PortNumber <= DIO_u8_PORTD )
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	84 30       	cpi	r24, 0x04	; 4
    185e:	a0 f5       	brcc	.+104    	; 0x18c8 <M_DIO_u8_SetPortValue+0x82>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	89 83       	std	Y+1, r24	; 0x01

			switch (Copy_u8PortNumber)  /* check the port Number */
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3d 83       	std	Y+5, r19	; 0x05
    186c:	2c 83       	std	Y+4, r18	; 0x04
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	9d 81       	ldd	r25, Y+5	; 0x05
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	91 05       	cpc	r25, r1
    1876:	d1 f0       	breq	.+52     	; 0x18ac <M_DIO_u8_SetPortValue+0x66>
    1878:	2c 81       	ldd	r18, Y+4	; 0x04
    187a:	3d 81       	ldd	r19, Y+5	; 0x05
    187c:	22 30       	cpi	r18, 0x02	; 2
    187e:	31 05       	cpc	r19, r1
    1880:	2c f4       	brge	.+10     	; 0x188c <M_DIO_u8_SetPortValue+0x46>
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	61 f0       	breq	.+24     	; 0x18a2 <M_DIO_u8_SetPortValue+0x5c>
    188a:	1e c0       	rjmp	.+60     	; 0x18c8 <M_DIO_u8_SetPortValue+0x82>
    188c:	2c 81       	ldd	r18, Y+4	; 0x04
    188e:	3d 81       	ldd	r19, Y+5	; 0x05
    1890:	22 30       	cpi	r18, 0x02	; 2
    1892:	31 05       	cpc	r19, r1
    1894:	81 f0       	breq	.+32     	; 0x18b6 <M_DIO_u8_SetPortValue+0x70>
    1896:	8c 81       	ldd	r24, Y+4	; 0x04
    1898:	9d 81       	ldd	r25, Y+5	; 0x05
    189a:	83 30       	cpi	r24, 0x03	; 3
    189c:	91 05       	cpc	r25, r1
    189e:	81 f0       	breq	.+32     	; 0x18c0 <M_DIO_u8_SetPortValue+0x7a>
    18a0:	13 c0       	rjmp	.+38     	; 0x18c8 <M_DIO_u8_SetPortValue+0x82>
			{
				case DIO_u8_PORTA : DIO_u8_PORTA_REG = Copy_u8PortValue ; break;
    18a2:	eb e3       	ldi	r30, 0x3B	; 59
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	80 83       	st	Z, r24
    18aa:	0e c0       	rjmp	.+28     	; 0x18c8 <M_DIO_u8_SetPortValue+0x82>
				case DIO_u8_PORTB : DIO_u8_PORTB_REG = Copy_u8PortValue ; break;
    18ac:	e8 e3       	ldi	r30, 0x38	; 56
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	80 83       	st	Z, r24
    18b4:	09 c0       	rjmp	.+18     	; 0x18c8 <M_DIO_u8_SetPortValue+0x82>
				case DIO_u8_PORTC : DIO_u8_PORTC_REG = Copy_u8PortValue ; break;
    18b6:	e5 e3       	ldi	r30, 0x35	; 53
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	80 83       	st	Z, r24
    18be:	04 c0       	rjmp	.+8      	; 0x18c8 <M_DIO_u8_SetPortValue+0x82>
				case DIO_u8_PORTD : DIO_u8_PORTD_REG = Copy_u8PortValue ; break;
    18c0:	e2 e3       	ldi	r30, 0x32	; 50
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	80 83       	st	Z, r24
			}

	}
	return Local_u8ErrorState;
    18c8:	89 81       	ldd	r24, Y+1	; 0x01


}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <M_DIO_u8_ActivePullupResistor>:
 *  Description : This Function Enables and Disables  the internal Pull-up Resistor on a specific pin
 * ----------------------------------------------------------------------------------------------
 */

u8 M_DIO_u8_ActivePullupResistor (u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber , u8 Copy_u8State)
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	28 97       	sbiw	r28, 0x08	; 8
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	de bf       	out	0x3e, r29	; 62
    18ea:	0f be       	out	0x3f, r0	; 63
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	6b 83       	std	Y+3, r22	; 0x03
    18f2:	4c 83       	std	Y+4, r20	; 0x04
	/* Error State variable  */
	u8 Local_u8ErrorState = STD_TYPES_NOK ;
    18f4:	19 82       	std	Y+1, r1	; 0x01
	/* Input validation ( check if the port Number and Pin Number are in the valid range) */
	if (Copy_u8PortNumber <  DIO_u8_PORTD && Copy_u8PinNumber < DIO_u8_PIN7 )
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <M_DIO_u8_ActivePullupResistor+0x24>
    18fc:	41 c1       	rjmp	.+642    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	87 30       	cpi	r24, 0x07	; 7
    1902:	08 f0       	brcs	.+2      	; 0x1906 <M_DIO_u8_ActivePullupResistor+0x2c>
    1904:	3d c1       	rjmp	.+634    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
	{
		Local_u8ErrorState = STD_TYPES_OK ;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
		/* check the state of the Pull-up*/
		if (Copy_u8State == DIO_u8_PULLUP_RES_EN )
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	09 f0       	breq	.+2      	; 0x1912 <M_DIO_u8_ActivePullupResistor+0x38>
    1910:	be c0       	rjmp	.+380    	; 0x1a8e <M_DIO_u8_ActivePullupResistor+0x1b4>
		{
			switch (Copy_u8PortNumber) /* check the port Number*/
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	38 87       	std	Y+8, r19	; 0x08
    191a:	2f 83       	std	Y+7, r18	; 0x07
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	98 85       	ldd	r25, Y+8	; 0x08
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	91 05       	cpc	r25, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <M_DIO_u8_ActivePullupResistor+0x4e>
    1926:	3e c0       	rjmp	.+124    	; 0x19a4 <M_DIO_u8_ActivePullupResistor+0xca>
    1928:	2f 81       	ldd	r18, Y+7	; 0x07
    192a:	38 85       	ldd	r19, Y+8	; 0x08
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	2c f4       	brge	.+10     	; 0x193c <M_DIO_u8_ActivePullupResistor+0x62>
    1932:	8f 81       	ldd	r24, Y+7	; 0x07
    1934:	98 85       	ldd	r25, Y+8	; 0x08
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	71 f0       	breq	.+28     	; 0x1956 <M_DIO_u8_ActivePullupResistor+0x7c>
    193a:	22 c1       	rjmp	.+580    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
    193c:	2f 81       	ldd	r18, Y+7	; 0x07
    193e:	38 85       	ldd	r19, Y+8	; 0x08
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <M_DIO_u8_ActivePullupResistor+0x6e>
    1946:	55 c0       	rjmp	.+170    	; 0x19f2 <M_DIO_u8_ActivePullupResistor+0x118>
    1948:	8f 81       	ldd	r24, Y+7	; 0x07
    194a:	98 85       	ldd	r25, Y+8	; 0x08
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <M_DIO_u8_ActivePullupResistor+0x7a>
    1952:	76 c0       	rjmp	.+236    	; 0x1a40 <M_DIO_u8_ActivePullupResistor+0x166>
    1954:	15 c1       	rjmp	.+554    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
			{
			case DIO_u8_PORTA :
				CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber);  /*  set the direction of the pin to input */
    1956:	aa e3       	ldi	r26, 0x3A	; 58
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	ea e3       	ldi	r30, 0x3A	; 58
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	48 2f       	mov	r20, r24
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <M_DIO_u8_ActivePullupResistor+0x98>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	2a 95       	dec	r18
    1974:	e2 f7       	brpl	.-8      	; 0x196e <M_DIO_u8_ActivePullupResistor+0x94>
    1976:	80 95       	com	r24
    1978:	84 23       	and	r24, r20
    197a:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); /*  Active the pull-up resistor       */
    197c:	ab e3       	ldi	r26, 0x3B	; 59
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	eb e3       	ldi	r30, 0x3B	; 59
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <M_DIO_u8_ActivePullupResistor+0xc0>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <M_DIO_u8_ActivePullupResistor+0xbc>
    199e:	84 2b       	or	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	ee c0       	rjmp	.+476    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
				break;
			case DIO_u8_PORTB :
				CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber);    /*  set the direction of the pin to input */
    19a4:	a7 e3       	ldi	r26, 0x37	; 55
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e7 e3       	ldi	r30, 0x37	; 55
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <M_DIO_u8_ActivePullupResistor+0xe6>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	2a 95       	dec	r18
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <M_DIO_u8_ActivePullupResistor+0xe2>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber);   /*  Active the pull-up resistor       */
    19ca:	a8 e3       	ldi	r26, 0x38	; 56
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e8 e3       	ldi	r30, 0x38	; 56
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <M_DIO_u8_ActivePullupResistor+0x10e>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <M_DIO_u8_ActivePullupResistor+0x10a>
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	c7 c0       	rjmp	.+398    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
				break;

			case DIO_u8_PORTC :
				CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber);    /*  set the direction of the pin to input */
    19f2:	a4 e3       	ldi	r26, 0x34	; 52
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e4 e3       	ldi	r30, 0x34	; 52
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	48 2f       	mov	r20, r24
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <M_DIO_u8_ActivePullupResistor+0x134>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	2a 95       	dec	r18
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <M_DIO_u8_ActivePullupResistor+0x130>
    1a12:	80 95       	com	r24
    1a14:	84 23       	and	r24, r20
    1a16:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber);   /*  Active the pull-up resistor       */
    1a18:	a5 e3       	ldi	r26, 0x35	; 53
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e5 e3       	ldi	r30, 0x35	; 53
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <M_DIO_u8_ActivePullupResistor+0x15c>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <M_DIO_u8_ActivePullupResistor+0x158>
    1a3a:	84 2b       	or	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	a0 c0       	rjmp	.+320    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
				break;

			case DIO_u8_PORTD :
				CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber);   /*  set the direction of the pin  to input */
    1a40:	a1 e3       	ldi	r26, 0x31	; 49
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e1 e3       	ldi	r30, 0x31	; 49
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <M_DIO_u8_ActivePullupResistor+0x182>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	2a 95       	dec	r18
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <M_DIO_u8_ActivePullupResistor+0x17e>
    1a60:	80 95       	com	r24
    1a62:	84 23       	and	r24, r20
    1a64:	8c 93       	st	X, r24
				SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber);  /*  Active the pull-up resistor       */
    1a66:	a2 e3       	ldi	r26, 0x32	; 50
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e2 e3       	ldi	r30, 0x32	; 50
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <M_DIO_u8_ActivePullupResistor+0x1aa>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <M_DIO_u8_ActivePullupResistor+0x1a6>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
    1a8c:	79 c0       	rjmp	.+242    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
				break;
			}
		}
		else if (Copy_u8State == DIO_u8_PULLUP_RES_DIS ) /* check the state of the Pull-up Resistor */
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	88 23       	and	r24, r24
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <M_DIO_u8_ActivePullupResistor+0x1bc>
    1a94:	74 c0       	rjmp	.+232    	; 0x1b7e <M_DIO_u8_ActivePullupResistor+0x2a4>
		{
			switch (Copy_u8PortNumber)
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3e 83       	std	Y+6, r19	; 0x06
    1a9e:	2d 83       	std	Y+5, r18	; 0x05
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	59 f1       	breq	.+86     	; 0x1b00 <M_DIO_u8_ActivePullupResistor+0x226>
    1aaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1aac:	3e 81       	ldd	r19, Y+6	; 0x06
    1aae:	22 30       	cpi	r18, 0x02	; 2
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	2c f4       	brge	.+10     	; 0x1abe <M_DIO_u8_ActivePullupResistor+0x1e4>
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	69 f0       	breq	.+26     	; 0x1ad6 <M_DIO_u8_ActivePullupResistor+0x1fc>
    1abc:	61 c0       	rjmp	.+194    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
    1abe:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac2:	22 30       	cpi	r18, 0x02	; 2
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	89 f1       	breq	.+98     	; 0x1b2a <M_DIO_u8_ActivePullupResistor+0x250>
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	91 05       	cpc	r25, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <M_DIO_u8_ActivePullupResistor+0x1fa>
    1ad2:	40 c0       	rjmp	.+128    	; 0x1b54 <M_DIO_u8_ActivePullupResistor+0x27a>
    1ad4:	55 c0       	rjmp	.+170    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
			{
			case DIO_u8_PORTA : CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break; /*Disable the pull-up Resistor*/
    1ad6:	ab e3       	ldi	r26, 0x3B	; 59
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	eb e3       	ldi	r30, 0x3B	; 59
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 2e       	mov	r0, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <M_DIO_u8_ActivePullupResistor+0x21a>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	0a 94       	dec	r0
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <M_DIO_u8_ActivePullupResistor+0x216>
    1af8:	80 95       	com	r24
    1afa:	84 23       	and	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	40 c0       	rjmp	.+128    	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
			case DIO_u8_PORTB :	CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break; /*Disable the pull-up Resistor*/
    1b00:	a8 e3       	ldi	r26, 0x38	; 56
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e8 e3       	ldi	r30, 0x38	; 56
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <M_DIO_u8_ActivePullupResistor+0x244>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <M_DIO_u8_ActivePullupResistor+0x240>
    1b22:	80 95       	com	r24
    1b24:	84 23       	and	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	2b c0       	rjmp	.+86     	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
			case DIO_u8_PORTC :	CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break; /*Disable the pull-up Resistor*/
    1b2a:	a5 e3       	ldi	r26, 0x35	; 53
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e5 e3       	ldi	r30, 0x35	; 53
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <M_DIO_u8_ActivePullupResistor+0x26e>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <M_DIO_u8_ActivePullupResistor+0x26a>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	16 c0       	rjmp	.+44     	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
			case DIO_u8_PORTD :	CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break; /*Disable the pull-up Resistor*/
    1b54:	a2 e3       	ldi	r26, 0x32	; 50
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e2 e3       	ldi	r30, 0x32	; 50
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <M_DIO_u8_ActivePullupResistor+0x298>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <M_DIO_u8_ActivePullupResistor+0x294>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <M_DIO_u8_ActivePullupResistor+0x2a6>
			}

		}
		else { Local_u8ErrorState = STD_TYPES_NOK ;	}
    1b7e:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState ;
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b82:	28 96       	adiw	r28, 0x08	; 8
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <H_LCD_void_LCD_Init>:
 *  Description : This Function Initialize the LCD Pins [ 4 bits mode - 8 bits mode ]
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_LCD_Init (void)
{
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	c4 55       	subi	r28, 0x54	; 84
    1ba2:	d0 40       	sbci	r29, 0x00	; 0
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ef 5a       	subi	r30, 0xAF	; 175
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a8 e4       	ldi	r26, 0x48	; 72
    1bba:	b2 e4       	ldi	r27, 0x42	; 66
    1bbc:	80 83       	st	Z, r24
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	a2 83       	std	Z+2, r26	; 0x02
    1bc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	8e 01       	movw	r16, r28
    1bc6:	03 5b       	subi	r16, 0xB3	; 179
    1bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ef 5a       	subi	r30, 0xAF	; 175
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a ef       	ldi	r20, 0xFA	; 250
    1bde:	54 e4       	ldi	r21, 0x44	; 68
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	f8 01       	movw	r30, r16
    1bea:	80 83       	st	Z, r24
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	a2 83       	std	Z+2, r26	; 0x02
    1bf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e3 5b       	subi	r30, 0xB3	; 179
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	44 f4       	brge	.+16     	; 0x1c20 <H_LCD_void_LCD_Init+0x8c>
		__ticks = 1;
    1c10:	fe 01       	movw	r30, r28
    1c12:	e5 5b       	subi	r30, 0xB5	; 181
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	91 83       	std	Z+1, r25	; 0x01
    1c1c:	80 83       	st	Z, r24
    1c1e:	64 c0       	rjmp	.+200    	; 0x1ce8 <H_LCD_void_LCD_Init+0x154>
	else if (__tmp > 65535)
    1c20:	fe 01       	movw	r30, r28
    1c22:	e3 5b       	subi	r30, 0xB3	; 179
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	0c f0       	brlt	.+2      	; 0x1c40 <H_LCD_void_LCD_Init+0xac>
    1c3e:	43 c0       	rjmp	.+134    	; 0x1cc6 <H_LCD_void_LCD_Init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	fe 01       	movw	r30, r28
    1c42:	ef 5a       	subi	r30, 0xAF	; 175
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	8e 01       	movw	r16, r28
    1c60:	05 5b       	subi	r16, 0xB5	; 181
    1c62:	1f 4f       	sbci	r17, 0xFF	; 255
    1c64:	bc 01       	movw	r22, r24
    1c66:	cd 01       	movw	r24, r26
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f8 01       	movw	r30, r16
    1c72:	91 83       	std	Z+1, r25	; 0x01
    1c74:	80 83       	st	Z, r24
    1c76:	1f c0       	rjmp	.+62     	; 0x1cb6 <H_LCD_void_LCD_Init+0x122>
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e7 5b       	subi	r30, 0xB7	; 183
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	88 ec       	ldi	r24, 0xC8	; 200
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c86:	fe 01       	movw	r30, r28
    1c88:	e7 5b       	subi	r30, 0xB7	; 183
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <H_LCD_void_LCD_Init+0xfc>
    1c94:	fe 01       	movw	r30, r28
    1c96:	e7 5b       	subi	r30, 0xB7	; 183
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	de 01       	movw	r26, r28
    1ca0:	a5 5b       	subi	r26, 0xB5	; 181
    1ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e5 5b       	subi	r30, 0xB5	; 181
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	11 96       	adiw	r26, 0x01	; 1
    1cb2:	9c 93       	st	X, r25
    1cb4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e5 5b       	subi	r30, 0xB5	; 181
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	91 81       	ldd	r25, Z+1	; 0x01
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	d1 f6       	brne	.-76     	; 0x1c78 <H_LCD_void_LCD_Init+0xe4>
    1cc4:	27 c0       	rjmp	.+78     	; 0x1d14 <H_LCD_void_LCD_Init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc6:	8e 01       	movw	r16, r28
    1cc8:	05 5b       	subi	r16, 0xB5	; 181
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e3 5b       	subi	r30, 0xB3	; 179
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	80 83       	st	Z, r24
    1ce8:	de 01       	movw	r26, r28
    1cea:	a9 5b       	subi	r26, 0xB9	; 185
    1cec:	bf 4f       	sbci	r27, 0xFF	; 255
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e5 5b       	subi	r30, 0xB5	; 181
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	8d 93       	st	X+, r24
    1cfa:	9c 93       	st	X, r25
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e9 5b       	subi	r30, 0xB9	; 185
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <H_LCD_void_LCD_Init+0x172>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e9 5b       	subi	r30, 0xB9	; 185
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
	/* In 8 bits mode the PINs must be in the same port*/
	M_DIO_u8_SetPortDirection(LCD_u8_Data_PORT,DIO_u8_PORT_DIRECTION_OUTPUT);

#elif LCD_u8_MODE == LCD_u8_4_BIT_MODE                 /* check the MODE of the LCD */
	/* In 4 bits mode the pins can be from any port */
	M_DIO_u8_SetPinDirection(LCD_u8_D7_PORT,LCD_u8_D7_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	63 e0       	ldi	r22, 0x03	; 3
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_D6_PORT,LCD_u8_D6_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_D5_PORT,LCD_u8_D5_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_D4_PORT,LCD_u8_D4_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_DIO_u8_SetPinDirection>

#endif
	/* 2-  Set the direction of LCD control Pins*/
	M_DIO_u8_SetPinDirection(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	64 e0       	ldi	r22, 0x04	; 4
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	65 e0       	ldi	r22, 0x05	; 5
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_DIO_u8_SetPinDirection>
	M_DIO_u8_SetPinDirection(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_PIN_OUTPUT_DIRECTION);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	62 e0       	ldi	r22, 0x02	; 2
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_DIO_u8_SetPinDirection>

	/* 3- LCD initialization sequence */
	H_LCD_void_SendCommand(LCD_u8_LCD_HOME_CMD);  				 /* 3i- Function set Send command */
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	0e 94 15 11 	call	0x222a	; 0x222a <H_LCD_void_SendCommand>
    1d60:	fe 01       	movw	r30, r28
    1d62:	ed 5b       	subi	r30, 0xBD	; 189
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 ef       	ldi	r26, 0xF0	; 240
    1d6c:	b1 e4       	ldi	r27, 0x41	; 65
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d76:	8e 01       	movw	r16, r28
    1d78:	01 5c       	subi	r16, 0xC1	; 193
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 5b       	subi	r30, 0xBD	; 189
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a ef       	ldi	r20, 0xFA	; 250
    1d90:	54 e4       	ldi	r21, 0x44	; 68
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	80 83       	st	Z, r24
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	a2 83       	std	Z+2, r26	; 0x02
    1da2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1da4:	fe 01       	movw	r30, r28
    1da6:	ff 96       	adiw	r30, 0x3f	; 63
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <H_LCD_void_LCD_Init+0x236>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9e af       	std	Y+62, r25	; 0x3e
    1dc6:	8d af       	std	Y+61, r24	; 0x3d
    1dc8:	46 c0       	rjmp	.+140    	; 0x1e56 <H_LCD_void_LCD_Init+0x2c2>
	else if (__tmp > 65535)
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ff 96       	adiw	r30, 0x3f	; 63
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	3f ef       	ldi	r19, 0xFF	; 255
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	57 e4       	ldi	r21, 0x47	; 71
    1dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	64 f5       	brge	.+88     	; 0x1e3e <H_LCD_void_LCD_Init+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	fe 01       	movw	r30, r28
    1de8:	ed 5b       	subi	r30, 0xBD	; 189
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9e af       	std	Y+62, r25	; 0x3e
    1e12:	8d af       	std	Y+61, r24	; 0x3d
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <H_LCD_void_LCD_Init+0x2a0>
    1e16:	88 ec       	ldi	r24, 0xC8	; 200
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	9c af       	std	Y+60, r25	; 0x3c
    1e1c:	8b af       	std	Y+59, r24	; 0x3b
    1e1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e20:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	f1 f7       	brne	.-4      	; 0x1e22 <H_LCD_void_LCD_Init+0x28e>
    1e26:	9c af       	std	Y+60, r25	; 0x3c
    1e28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	9e af       	std	Y+62, r25	; 0x3e
    1e32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	69 f7       	brne	.-38     	; 0x1e16 <H_LCD_void_LCD_Init+0x282>
    1e3c:	16 c0       	rjmp	.+44     	; 0x1e6a <H_LCD_void_LCD_Init+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ff 96       	adiw	r30, 0x3f	; 63
    1e42:	60 81       	ld	r22, Z
    1e44:	71 81       	ldd	r23, Z+1	; 0x01
    1e46:	82 81       	ldd	r24, Z+2	; 0x02
    1e48:	93 81       	ldd	r25, Z+3	; 0x03
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e af       	std	Y+62, r25	; 0x3e
    1e54:	8d af       	std	Y+61, r24	; 0x3d
    1e56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e5a:	9a af       	std	Y+58, r25	; 0x3a
    1e5c:	89 af       	std	Y+57, r24	; 0x39
    1e5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e60:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <H_LCD_void_LCD_Init+0x2ce>
    1e66:	9a af       	std	Y+58, r25	; 0x3a
    1e68:	89 af       	std	Y+57, r24	; 0x39


#if LCD_u8_Mode == LCD_u8_8_BIT_MODE				              /* 3ii- choose the command mode */
	H_LCD_void_SendCommand(LCD_u8_EIGHT_BITS_CMD);
#elif LCD_u8_MODE == LCD_u8_4_BIT_MODE
	H_LCD_void_SendCommand(LCD_u8_FOUR_BITS_CMD);
    1e6a:	88 e2       	ldi	r24, 0x28	; 40
    1e6c:	0e 94 15 11 	call	0x222a	; 0x222a <H_LCD_void_SendCommand>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e8       	ldi	r26, 0x80	; 128
    1e76:	bf e3       	ldi	r27, 0x3F	; 63
    1e78:	8d ab       	std	Y+53, r24	; 0x35
    1e7a:	9e ab       	std	Y+54, r25	; 0x36
    1e7c:	af ab       	std	Y+55, r26	; 0x37
    1e7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	6d a9       	ldd	r22, Y+53	; 0x35
    1e82:	7e a9       	ldd	r23, Y+54	; 0x36
    1e84:	8f a9       	ldd	r24, Y+55	; 0x37
    1e86:	98 ad       	ldd	r25, Y+56	; 0x38
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a ef       	ldi	r20, 0xFA	; 250
    1e8e:	54 e4       	ldi	r21, 0x44	; 68
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	89 ab       	std	Y+49, r24	; 0x31
    1e9a:	9a ab       	std	Y+50, r25	; 0x32
    1e9c:	ab ab       	std	Y+51, r26	; 0x33
    1e9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ea0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <H_LCD_void_LCD_Init+0x32e>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	98 ab       	std	Y+48, r25	; 0x30
    1ebe:	8f a7       	std	Y+47, r24	; 0x2f
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <H_LCD_void_LCD_Init+0x3ac>
	else if (__tmp > 65535)
    1ec2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <H_LCD_void_LCD_Init+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	6d a9       	ldd	r22, Y+53	; 0x35
    1edc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ede:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	98 ab       	std	Y+48, r25	; 0x30
    1f00:	8f a7       	std	Y+47, r24	; 0x2f
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <H_LCD_void_LCD_Init+0x38e>
    1f04:	88 ec       	ldi	r24, 0xC8	; 200
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9e a7       	std	Y+46, r25	; 0x2e
    1f0a:	8d a7       	std	Y+45, r24	; 0x2d
    1f0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <H_LCD_void_LCD_Init+0x37c>
    1f14:	9e a7       	std	Y+46, r25	; 0x2e
    1f16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f24:	98 a9       	ldd	r25, Y+48	; 0x30
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <H_LCD_void_LCD_Init+0x370>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <H_LCD_void_LCD_Init+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f30:	8b a9       	ldd	r24, Y+51	; 0x33
    1f32:	9c a9       	ldd	r25, Y+52	; 0x34
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	98 ab       	std	Y+48, r25	; 0x30
    1f3e:	8f a7       	std	Y+47, r24	; 0x2f
    1f40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f42:	98 a9       	ldd	r25, Y+48	; 0x30
    1f44:	9c a7       	std	Y+44, r25	; 0x2c
    1f46:	8b a7       	std	Y+43, r24	; 0x2b
    1f48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <H_LCD_void_LCD_Init+0x3b8>
    1f50:	9c a7       	std	Y+44, r25	; 0x2c
    1f52:	8b a7       	std	Y+43, r24	; 0x2b
#endif
	_delay_ms(1);


	H_LCD_void_SendCommand(LCD_u8_DISPLAY_ON_OFF_CURSOR_OFF_CMD); /* 3iii- Display on / off control command */
    1f54:	8c e0       	ldi	r24, 0x0C	; 12
    1f56:	0e 94 15 11 	call	0x222a	; 0x222a <H_LCD_void_SendCommand>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e8       	ldi	r26, 0x80	; 128
    1f60:	bf e3       	ldi	r27, 0x3F	; 63
    1f62:	8f a3       	std	Y+39, r24	; 0x27
    1f64:	98 a7       	std	Y+40, r25	; 0x28
    1f66:	a9 a7       	std	Y+41, r26	; 0x29
    1f68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a ef       	ldi	r20, 0xFA	; 250
    1f78:	54 e4       	ldi	r21, 0x44	; 68
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	8b a3       	std	Y+35, r24	; 0x23
    1f84:	9c a3       	std	Y+36, r25	; 0x24
    1f86:	ad a3       	std	Y+37, r26	; 0x25
    1f88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f90:	9e a1       	ldd	r25, Y+38	; 0x26
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	2c f4       	brge	.+10     	; 0x1fac <H_LCD_void_LCD_Init+0x418>
		__ticks = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9a a3       	std	Y+34, r25	; 0x22
    1fa8:	89 a3       	std	Y+33, r24	; 0x21
    1faa:	3f c0       	rjmp	.+126    	; 0x202a <H_LCD_void_LCD_Init+0x496>
	else if (__tmp > 65535)
    1fac:	6b a1       	ldd	r22, Y+35	; 0x23
    1fae:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	3f ef       	ldi	r19, 0xFF	; 255
    1fb8:	4f e7       	ldi	r20, 0x7F	; 127
    1fba:	57 e4       	ldi	r21, 0x47	; 71
    1fbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc0:	18 16       	cp	r1, r24
    1fc2:	4c f5       	brge	.+82     	; 0x2016 <H_LCD_void_LCD_Init+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e2       	ldi	r20, 0x20	; 32
    1fd2:	51 e4       	ldi	r21, 0x41	; 65
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9a a3       	std	Y+34, r25	; 0x22
    1fea:	89 a3       	std	Y+33, r24	; 0x21
    1fec:	0f c0       	rjmp	.+30     	; 0x200c <H_LCD_void_LCD_Init+0x478>
    1fee:	88 ec       	ldi	r24, 0xC8	; 200
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	98 a3       	std	Y+32, r25	; 0x20
    1ff4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ff6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ff8:	98 a1       	ldd	r25, Y+32	; 0x20
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <H_LCD_void_LCD_Init+0x466>
    1ffe:	98 a3       	std	Y+32, r25	; 0x20
    2000:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2002:	89 a1       	ldd	r24, Y+33	; 0x21
    2004:	9a a1       	ldd	r25, Y+34	; 0x22
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	9a a3       	std	Y+34, r25	; 0x22
    200a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200c:	89 a1       	ldd	r24, Y+33	; 0x21
    200e:	9a a1       	ldd	r25, Y+34	; 0x22
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	69 f7       	brne	.-38     	; 0x1fee <H_LCD_void_LCD_Init+0x45a>
    2014:	14 c0       	rjmp	.+40     	; 0x203e <H_LCD_void_LCD_Init+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2016:	6b a1       	ldd	r22, Y+35	; 0x23
    2018:	7c a1       	ldd	r23, Y+36	; 0x24
    201a:	8d a1       	ldd	r24, Y+37	; 0x25
    201c:	9e a1       	ldd	r25, Y+38	; 0x26
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9a a3       	std	Y+34, r25	; 0x22
    2028:	89 a3       	std	Y+33, r24	; 0x21
    202a:	89 a1       	ldd	r24, Y+33	; 0x21
    202c:	9a a1       	ldd	r25, Y+34	; 0x22
    202e:	9e 8f       	std	Y+30, r25	; 0x1e
    2030:	8d 8f       	std	Y+29, r24	; 0x1d
    2032:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2034:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <H_LCD_void_LCD_Init+0x4a2>
    203a:	9e 8f       	std	Y+30, r25	; 0x1e
    203c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);


	H_LCD_void_SendCommand(LCD_u8_DISPLAY_ClEAR_CMD);			/* 3v-  Display clear command */
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	0e 94 15 11 	call	0x222a	; 0x222a <H_LCD_void_SendCommand>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a0 e0       	ldi	r26, 0x00	; 0
    204a:	b0 e4       	ldi	r27, 0x40	; 64
    204c:	89 8f       	std	Y+25, r24	; 0x19
    204e:	9a 8f       	std	Y+26, r25	; 0x1a
    2050:	ab 8f       	std	Y+27, r26	; 0x1b
    2052:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2054:	69 8d       	ldd	r22, Y+25	; 0x19
    2056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a ef       	ldi	r20, 0xFA	; 250
    2062:	54 e4       	ldi	r21, 0x44	; 68
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	8d 8b       	std	Y+21, r24	; 0x15
    206e:	9e 8b       	std	Y+22, r25	; 0x16
    2070:	af 8b       	std	Y+23, r26	; 0x17
    2072:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	2c f4       	brge	.+10     	; 0x2096 <H_LCD_void_LCD_Init+0x502>
		__ticks = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	9c 8b       	std	Y+20, r25	; 0x14
    2092:	8b 8b       	std	Y+19, r24	; 0x13
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <H_LCD_void_LCD_Init+0x580>
	else if (__tmp > 65535)
    2096:	6d 89       	ldd	r22, Y+21	; 0x15
    2098:	7e 89       	ldd	r23, Y+22	; 0x16
    209a:	8f 89       	ldd	r24, Y+23	; 0x17
    209c:	98 8d       	ldd	r25, Y+24	; 0x18
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	4f e7       	ldi	r20, 0x7F	; 127
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	4c f5       	brge	.+82     	; 0x2100 <H_LCD_void_LCD_Init+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	69 8d       	ldd	r22, Y+25	; 0x19
    20b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e2       	ldi	r20, 0x20	; 32
    20bc:	51 e4       	ldi	r21, 0x41	; 65
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9c 8b       	std	Y+20, r25	; 0x14
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <H_LCD_void_LCD_Init+0x562>
    20d8:	88 ec       	ldi	r24, 0xC8	; 200
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9a 8b       	std	Y+18, r25	; 0x12
    20de:	89 8b       	std	Y+17, r24	; 0x11
    20e0:	89 89       	ldd	r24, Y+17	; 0x11
    20e2:	9a 89       	ldd	r25, Y+18	; 0x12
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <H_LCD_void_LCD_Init+0x550>
    20e8:	9a 8b       	std	Y+18, r25	; 0x12
    20ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	8b 89       	ldd	r24, Y+19	; 0x13
    20ee:	9c 89       	ldd	r25, Y+20	; 0x14
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9c 8b       	std	Y+20, r25	; 0x14
    20f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	69 f7       	brne	.-38     	; 0x20d8 <H_LCD_void_LCD_Init+0x544>
    20fe:	14 c0       	rjmp	.+40     	; 0x2128 <H_LCD_void_LCD_Init+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2100:	6d 89       	ldd	r22, Y+21	; 0x15
    2102:	7e 89       	ldd	r23, Y+22	; 0x16
    2104:	8f 89       	ldd	r24, Y+23	; 0x17
    2106:	98 8d       	ldd	r25, Y+24	; 0x18
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 8b       	std	Y+20, r25	; 0x14
    2112:	8b 8b       	std	Y+19, r24	; 0x13
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	98 8b       	std	Y+16, r25	; 0x10
    211a:	8f 87       	std	Y+15, r24	; 0x0f
    211c:	8f 85       	ldd	r24, Y+15	; 0x0f
    211e:	98 89       	ldd	r25, Y+16	; 0x10
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <H_LCD_void_LCD_Init+0x58c>
    2124:	98 8b       	std	Y+16, r25	; 0x10
    2126:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);


	H_LCD_void_SendCommand(LCD_u8_ENTRT_MODE_CMD);				/* 3iv-  Entry mode command */
    2128:	86 e0       	ldi	r24, 0x06	; 6
    212a:	0e 94 15 11 	call	0x222a	; 0x222a <H_LCD_void_SendCommand>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e0       	ldi	r26, 0x00	; 0
    2134:	b0 e4       	ldi	r27, 0x40	; 64
    2136:	8b 87       	std	Y+11, r24	; 0x0b
    2138:	9c 87       	std	Y+12, r25	; 0x0c
    213a:	ad 87       	std	Y+13, r26	; 0x0d
    213c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8f 83       	std	Y+7, r24	; 0x07
    2158:	98 87       	std	Y+8, r25	; 0x08
    215a:	a9 87       	std	Y+9, r26	; 0x09
    215c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <H_LCD_void_LCD_Init+0x5ec>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <H_LCD_void_LCD_Init+0x66a>
	else if (__tmp > 65535)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <H_LCD_void_LCD_Init+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6b 85       	ldd	r22, Y+11	; 0x0b
    219a:	7c 85       	ldd	r23, Y+12	; 0x0c
    219c:	8d 85       	ldd	r24, Y+13	; 0x0d
    219e:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <H_LCD_void_LCD_Init+0x64c>
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <H_LCD_void_LCD_Init+0x63a>
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <H_LCD_void_LCD_Init+0x62e>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <H_LCD_void_LCD_Init+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <H_LCD_void_LCD_Init+0x676>
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2212:	cc 5a       	subi	r28, 0xAC	; 172
    2214:	df 4f       	sbci	r29, 0xFF	; 255
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	08 95       	ret

0000222a <H_LCD_void_SendCommand>:
 *  Description : This Function Send command to LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_SendCommand(u8 Copy_u8Command)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	0f 92       	push	r0
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	89 83       	std	Y+1, r24	; 0x01
	/* select command register ( RS = 0)*/
	M_DIO_u8_SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_PIN_VALUE_LOW);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	64 e0       	ldi	r22, 0x04	; 4
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>

	M_DIO_u8_SetPortValue(LCD_u8_Data_PORT,Copy_u8Command); /* send the command direct to the LCD */
	H_LCD_void_EnableLatch();								/* send latch to LCD */

#elif LCD_u8_MODE == LCD_u8_4_BIT_MODE
	H_LCD_void_4BitHandelCommand(Copy_u8Command);   	/* function Handle the command for 4bits mode*/
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	0e 94 18 12 	call	0x2430	; 0x2430 <H_LCD_void_4BitHandelCommand>


#endif


}
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <H_LCD_void_SendChar>:
 *  Description : This Function Send character to LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_SendChar(u8 Copy_u8Data)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	0f 92       	push	r0
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	89 83       	std	Y+1, r24	; 0x01
	/* select Data register ( RS = 1)*/
	M_DIO_u8_SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_PIN_VALUE_HIGH);
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	64 e0       	ldi	r22, 0x04	; 4
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
#if LCD_u8_Mode == LCD_u8_8_BIT_MODE  		      			/* Check the mode of the operation */
	M_DIO_u8_SetPortValue(LCD_u8_Data_PORT,Copy_u8Data);	/* send the command directly to LCD i 8 bit mode */
	H_LCD_void_EnableLatch();								/* falling edge (latch)*/

#elif LCD_u8_MODE == LCD_u8_4_BIT_MODE
	H_LCD_void_4BitHandelCommand(Copy_u8Data);  /* function handle the data for 4bit mode and send it to LCD */
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	0e 94 18 12 	call	0x2430	; 0x2430 <H_LCD_void_4BitHandelCommand>

#endif

}
    226a:	0f 90       	pop	r0
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <H_LCD_void_SendString>:
 *  Description : This Function Send string to LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_SendString (const u8 * Copy_Pu8String)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	00 d0       	rcall	.+0      	; 0x2278 <H_LCD_void_SendString+0x6>
    2278:	0f 92       	push	r0
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	9b 83       	std	Y+3, r25	; 0x03
    2280:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8StringIterator = 0; /* string iterator*/
    2282:	19 82       	std	Y+1, r1	; 0x01
    2284:	0f c0       	rjmp	.+30     	; 0x22a4 <H_LCD_void_SendString+0x32>
	while (Copy_Pu8String[Local_u8StringIterator] != '\0') /* loop on the string till find the Null character*/
	{
		/* Slice the string into characters and send it character by character*/
		H_LCD_void_SendChar(Copy_Pu8String[Local_u8StringIterator++]); /*Post increment to the string Iterator */
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	9b 81       	ldd	r25, Y+3	; 0x03
    2290:	fc 01       	movw	r30, r24
    2292:	e2 0f       	add	r30, r18
    2294:	f3 1f       	adc	r31, r19
    2296:	90 81       	ld	r25, Z
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	89 2f       	mov	r24, r25
    22a0:	0e 94 27 11 	call	0x224e	; 0x224e <H_LCD_void_SendChar>
 */

void H_LCD_void_SendString (const u8 * Copy_Pu8String)
{
	u8 Local_u8StringIterator = 0; /* string iterator*/
	while (Copy_Pu8String[Local_u8StringIterator] != '\0') /* loop on the string till find the Null character*/
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	28 2f       	mov	r18, r24
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	9b 81       	ldd	r25, Y+3	; 0x03
    22ae:	fc 01       	movw	r30, r24
    22b0:	e2 0f       	add	r30, r18
    22b2:	f3 1f       	adc	r31, r19
    22b4:	80 81       	ld	r24, Z
    22b6:	88 23       	and	r24, r24
    22b8:	31 f7       	brne	.-52     	; 0x2286 <H_LCD_void_SendString+0x14>
	{
		/* Slice the string into characters and send it character by character*/
		H_LCD_void_SendChar(Copy_Pu8String[Local_u8StringIterator++]); /*Post increment to the string Iterator */
	}

}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <H_LCD_void_SendNumber>:
 *  Description : This Function Send Number to LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_SendNumber (s32 Copy_s32Number)
{
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	2f 97       	sbiw	r28, 0x0f	; 15
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	6c 87       	std	Y+12, r22	; 0x0c
    22e0:	7d 87       	std	Y+13, r23	; 0x0d
    22e2:	8e 87       	std	Y+14, r24	; 0x0e
    22e4:	9f 87       	std	Y+15, r25	; 0x0f
	/* Slice the Digits of the Number */
	/* Store every single digit in the array */
	s8 Local_As8NumberDigits[10] = {0};  /*assign the array with initial values = Zeros*/
    22e6:	8a e0       	ldi	r24, 0x0A	; 10
    22e8:	fe 01       	movw	r30, r28
    22ea:	32 96       	adiw	r30, 0x02	; 2
    22ec:	df 01       	movw	r26, r30
    22ee:	98 2f       	mov	r25, r24
    22f0:	1d 92       	st	X+, r1
    22f2:	9a 95       	dec	r25
    22f4:	e9 f7       	brne	.-6      	; 0x22f0 <H_LCD_void_SendNumber+0x2a>
	u8 Local_u8Counter =0; 				/*Array counter to count the digits of the number  */
    22f6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_s32Number < 0)				/* check if the Number id negative */
    22f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    22fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    22fc:	ae 85       	ldd	r26, Y+14	; 0x0e
    22fe:	bf 85       	ldd	r27, Y+15	; 0x0f
    2300:	bb 23       	and	r27, r27
    2302:	94 f4       	brge	.+36     	; 0x2328 <H_LCD_void_SendNumber+0x62>
	{
		/* if negative convert to positive */
		Copy_s32Number *= -1 ;
    2304:	8c 85       	ldd	r24, Y+12	; 0x0c
    2306:	9d 85       	ldd	r25, Y+13	; 0x0d
    2308:	ae 85       	ldd	r26, Y+14	; 0x0e
    230a:	bf 85       	ldd	r27, Y+15	; 0x0f
    230c:	b0 95       	com	r27
    230e:	a0 95       	com	r26
    2310:	90 95       	com	r25
    2312:	81 95       	neg	r24
    2314:	9f 4f       	sbci	r25, 0xFF	; 255
    2316:	af 4f       	sbci	r26, 0xFF	; 255
    2318:	bf 4f       	sbci	r27, 0xFF	; 255
    231a:	8c 87       	std	Y+12, r24	; 0x0c
    231c:	9d 87       	std	Y+13, r25	; 0x0d
    231e:	ae 87       	std	Y+14, r26	; 0x0e
    2320:	bf 87       	std	Y+15, r27	; 0x0f
		/* send char 'a' represent the sign (-)*/
		H_LCD_void_SendChar('-');
    2322:	8d e2       	ldi	r24, 0x2D	; 45
    2324:	0e 94 27 11 	call	0x224e	; 0x224e <H_LCD_void_SendChar>
	}

	do
	{
		/*Slice the Last Digit and Store it in the array*/
		Local_As8NumberDigits[Local_u8Counter] = Copy_s32Number % 10;
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	08 2f       	mov	r16, r24
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2330:	9d 85       	ldd	r25, Y+13	; 0x0d
    2332:	ae 85       	ldd	r26, Y+14	; 0x0e
    2334:	bf 85       	ldd	r27, Y+15	; 0x0f
    2336:	2a e0       	ldi	r18, 0x0A	; 10
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	50 e0       	ldi	r21, 0x00	; 0
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__divmodsi4>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	28 2f       	mov	r18, r24
    234c:	ce 01       	movw	r24, r28
    234e:	02 96       	adiw	r24, 0x02	; 2
    2350:	fc 01       	movw	r30, r24
    2352:	e0 0f       	add	r30, r16
    2354:	f1 1f       	adc	r31, r17
    2356:	20 83       	st	Z, r18
		/*Cut the last digit from the Number */
		Copy_s32Number/= 10;
    2358:	8c 85       	ldd	r24, Y+12	; 0x0c
    235a:	9d 85       	ldd	r25, Y+13	; 0x0d
    235c:	ae 85       	ldd	r26, Y+14	; 0x0e
    235e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2360:	2a e0       	ldi	r18, 0x0A	; 10
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__divmodsi4>
    2370:	da 01       	movw	r26, r20
    2372:	c9 01       	movw	r24, r18
    2374:	8c 87       	std	Y+12, r24	; 0x0c
    2376:	9d 87       	std	Y+13, r25	; 0x0d
    2378:	ae 87       	std	Y+14, r26	; 0x0e
    237a:	bf 87       	std	Y+15, r27	; 0x0f
		/* increment the Digits counter */
		Local_u8Counter++;
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	8f 5f       	subi	r24, 0xFF	; 255
    2380:	89 83       	std	Y+1, r24	; 0x01
	}
	while (Copy_s32Number != 0); /* check if the rest Digits of the Number */
    2382:	8c 85       	ldd	r24, Y+12	; 0x0c
    2384:	9d 85       	ldd	r25, Y+13	; 0x0d
    2386:	ae 85       	ldd	r26, Y+14	; 0x0e
    2388:	bf 85       	ldd	r27, Y+15	; 0x0f
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	a1 05       	cpc	r26, r1
    238e:	b1 05       	cpc	r27, r1
    2390:	59 f6       	brne	.-106    	; 0x2328 <H_LCD_void_SendNumber+0x62>
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <H_LCD_void_SendNumber+0xec>

	while (Local_u8Counter > 0)
	{
		/* send the Digits to The LCD in reverse */
		H_LCD_void_SendChar(Local_As8NumberDigits[--Local_u8Counter] + 48 );
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	81 50       	subi	r24, 0x01	; 1
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	ce 01       	movw	r24, r28
    23a2:	02 96       	adiw	r24, 0x02	; 2
    23a4:	fc 01       	movw	r30, r24
    23a6:	e2 0f       	add	r30, r18
    23a8:	f3 1f       	adc	r31, r19
    23aa:	80 81       	ld	r24, Z
    23ac:	80 5d       	subi	r24, 0xD0	; 208
    23ae:	0e 94 27 11 	call	0x224e	; 0x224e <H_LCD_void_SendChar>
		/* increment the Digits counter */
		Local_u8Counter++;
	}
	while (Copy_s32Number != 0); /* check if the rest Digits of the Number */

	while (Local_u8Counter > 0)
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	88 23       	and	r24, r24
    23b6:	71 f7       	brne	.-36     	; 0x2394 <H_LCD_void_SendNumber+0xce>
	}



 */
}
    23b8:	2f 96       	adiw	r28, 0x0f	; 15
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	08 95       	ret

000023ce <H_LCD_void_ClearScreen>:
 *  Description : This Function Clear the LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_ClearScreen (void)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
	/* the LCD_u8_DISPLAY_ClEAR_CMD clear the Screen of the LCD */
	H_LCD_void_SendCommand(LCD_u8_DISPLAY_ClEAR_CMD);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	0e 94 15 11 	call	0x222a	; 0x222a <H_LCD_void_SendCommand>

}
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <H_LCD_voidGoToXY>:
 *  Description : This Function Go to a specific position on LCD ( for 2 * 16 and 4 * 20 LCD)
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_voidGoToXY (u8 Copy_u8Row,u8 Copy_u8Col)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <H_LCD_voidGoToXY+0x6>
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <H_LCD_voidGoToXY+0x8>
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <H_LCD_voidGoToXY+0xa>
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	6e 83       	std	Y+6, r22	; 0x06
	/* Array holding the positions of the Starting point for every row */
	u8 Copy_Au8Rows[4] ={LCD_u8_R0_CMD,LCD_u8_R1_CMD,LCD_u8_R2_CMD,LCD_u8_R3_CMD} ;
    23f4:	80 e8       	ldi	r24, 0x80	; 128
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	80 ec       	ldi	r24, 0xC0	; 192
    23fa:	8a 83       	std	Y+2, r24	; 0x02
    23fc:	84 e9       	ldi	r24, 0x94	; 148
    23fe:	8b 83       	std	Y+3, r24	; 0x03
    2400:	84 ed       	ldi	r24, 0xD4	; 212
    2402:	8c 83       	std	Y+4, r24	; 0x04

	H_LCD_void_SendCommand(Copy_Au8Rows[Copy_u8Row] + Copy_u8Col);
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	ce 01       	movw	r24, r28
    240c:	01 96       	adiw	r24, 0x01	; 1
    240e:	fc 01       	movw	r30, r24
    2410:	e2 0f       	add	r30, r18
    2412:	f3 1f       	adc	r31, r19
    2414:	90 81       	ld	r25, Z
    2416:	8e 81       	ldd	r24, Y+6	; 0x06
    2418:	89 0f       	add	r24, r25
    241a:	0e 94 15 11 	call	0x222a	; 0x222a <H_LCD_void_SendCommand>

}
    241e:	26 96       	adiw	r28, 0x06	; 6
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <H_LCD_void_4BitHandelCommand>:
 *  Description : This Function Handle 4bit Mode instructions
 * ----------------------------------------------------------------------------------------------
 */

static void H_LCD_void_4BitHandelCommand (u8 Copy_u8Command)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	0f 92       	push	r0
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	89 83       	std	Y+1, r24	; 0x01
	/* Get the 4 MSB bits of the command and send it to the LCD */
	M_DIO_u8_SetPinValue(LCD_u8_D7_PORT,LCD_u8_D7_PIN,GET_BIT(Copy_u8Command,7));
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	98 2f       	mov	r25, r24
    2440:	99 1f       	adc	r25, r25
    2442:	99 27       	eor	r25, r25
    2444:	99 1f       	adc	r25, r25
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	63 e0       	ldi	r22, 0x03	; 3
    244a:	49 2f       	mov	r20, r25
    244c:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D6_PORT,LCD_u8_D6_PIN,GET_BIT(Copy_u8Command,6));
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	82 95       	swap	r24
    2454:	86 95       	lsr	r24
    2456:	86 95       	lsr	r24
    2458:	83 70       	andi	r24, 0x03	; 3
    245a:	98 2f       	mov	r25, r24
    245c:	91 70       	andi	r25, 0x01	; 1
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	62 e0       	ldi	r22, 0x02	; 2
    2462:	49 2f       	mov	r20, r25
    2464:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D5_PORT,LCD_u8_D5_PIN,GET_BIT(Copy_u8Command,5));
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	82 95       	swap	r24
    246c:	86 95       	lsr	r24
    246e:	87 70       	andi	r24, 0x07	; 7
    2470:	98 2f       	mov	r25, r24
    2472:	91 70       	andi	r25, 0x01	; 1
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	49 2f       	mov	r20, r25
    247a:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D4_PORT,LCD_u8_D4_PIN,GET_BIT(Copy_u8Command,4));
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	82 95       	swap	r24
    2482:	8f 70       	andi	r24, 0x0F	; 15
    2484:	98 2f       	mov	r25, r24
    2486:	91 70       	andi	r25, 0x01	; 1
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	49 2f       	mov	r20, r25
    248e:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
	/*Falling edge */
	H_LCD_void_EnableLatch();
    2492:	0e 94 77 12 	call	0x24ee	; 0x24ee <H_LCD_void_EnableLatch>
	/* get the LSB of the command and Send it to the LCD */
	M_DIO_u8_SetPinValue(LCD_u8_D7_PORT,LCD_u8_D7_PIN,GET_BIT(Copy_u8Command,3));
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	86 95       	lsr	r24
    249a:	86 95       	lsr	r24
    249c:	86 95       	lsr	r24
    249e:	98 2f       	mov	r25, r24
    24a0:	91 70       	andi	r25, 0x01	; 1
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	63 e0       	ldi	r22, 0x03	; 3
    24a6:	49 2f       	mov	r20, r25
    24a8:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D6_PORT,LCD_u8_D6_PIN,GET_BIT(Copy_u8Command,2));
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	86 95       	lsr	r24
    24b0:	86 95       	lsr	r24
    24b2:	98 2f       	mov	r25, r24
    24b4:	91 70       	andi	r25, 0x01	; 1
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	62 e0       	ldi	r22, 0x02	; 2
    24ba:	49 2f       	mov	r20, r25
    24bc:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D5_PORT,LCD_u8_D5_PIN,GET_BIT(Copy_u8Command,1));
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	86 95       	lsr	r24
    24c4:	98 2f       	mov	r25, r24
    24c6:	91 70       	andi	r25, 0x01	; 1
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	61 e0       	ldi	r22, 0x01	; 1
    24cc:	49 2f       	mov	r20, r25
    24ce:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
	M_DIO_u8_SetPinValue(LCD_u8_D4_PORT,LCD_u8_D4_PIN,GET_BIT(Copy_u8Command,0));
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	98 2f       	mov	r25, r24
    24d6:	91 70       	andi	r25, 0x01	; 1
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	49 2f       	mov	r20, r25
    24de:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
	/* Falling edge*/
	H_LCD_void_EnableLatch();
    24e2:	0e 94 77 12 	call	0x24ee	; 0x24ee <H_LCD_void_EnableLatch>

}
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <H_LCD_void_EnableLatch>:
 *  Description : This Function Generate Latch on the LCD
 * ----------------------------------------------------------------------------------------------
 */

void H_LCD_void_EnableLatch(void)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	68 97       	sbiw	r28, 0x18	; 24
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
	/* Making latch on LCD EN PIN */
	/* Set the pin on High, making delay then bring back to Low */
	M_DIO_u8_SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_PIN_VALUE_HIGH);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	65 e0       	ldi	r22, 0x05	; 5
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a6 e9       	ldi	r26, 0x96	; 150
    2512:	b3 e4       	ldi	r27, 0x43	; 67
    2514:	8d 8b       	std	Y+21, r24	; 0x15
    2516:	9e 8b       	std	Y+22, r25	; 0x16
    2518:	af 8b       	std	Y+23, r26	; 0x17
    251a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    251c:	6d 89       	ldd	r22, Y+21	; 0x15
    251e:	7e 89       	ldd	r23, Y+22	; 0x16
    2520:	8f 89       	ldd	r24, Y+23	; 0x17
    2522:	98 8d       	ldd	r25, Y+24	; 0x18
    2524:	2b ea       	ldi	r18, 0xAB	; 171
    2526:	3a ea       	ldi	r19, 0xAA	; 170
    2528:	4a e2       	ldi	r20, 0x2A	; 42
    252a:	50 e4       	ldi	r21, 0x40	; 64
    252c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	89 8b       	std	Y+17, r24	; 0x11
    2536:	9a 8b       	std	Y+18, r25	; 0x12
    2538:	ab 8b       	std	Y+19, r26	; 0x13
    253a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    253c:	69 89       	ldd	r22, Y+17	; 0x11
    253e:	7a 89       	ldd	r23, Y+18	; 0x12
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	1c f4       	brge	.+6      	; 0x255a <H_LCD_void_EnableLatch+0x6c>
		__ticks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	88 8b       	std	Y+16, r24	; 0x10
    2558:	91 c0       	rjmp	.+290    	; 0x267c <H_LCD_void_EnableLatch+0x18e>
	else if (__tmp > 255)
    255a:	69 89       	ldd	r22, Y+17	; 0x11
    255c:	7a 89       	ldd	r23, Y+18	; 0x12
    255e:	8b 89       	ldd	r24, Y+19	; 0x13
    2560:	9c 89       	ldd	r25, Y+20	; 0x14
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	53 e4       	ldi	r21, 0x43	; 67
    256a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	0c f0       	brlt	.+2      	; 0x2574 <H_LCD_void_EnableLatch+0x86>
    2572:	7b c0       	rjmp	.+246    	; 0x266a <H_LCD_void_EnableLatch+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2574:	6d 89       	ldd	r22, Y+21	; 0x15
    2576:	7e 89       	ldd	r23, Y+22	; 0x16
    2578:	8f 89       	ldd	r24, Y+23	; 0x17
    257a:	98 8d       	ldd	r25, Y+24	; 0x18
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a e7       	ldi	r20, 0x7A	; 122
    2582:	54 e4       	ldi	r21, 0x44	; 68
    2584:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8c 87       	std	Y+12, r24	; 0x0c
    258e:	9d 87       	std	Y+13, r25	; 0x0d
    2590:	ae 87       	std	Y+14, r26	; 0x0e
    2592:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	6c 85       	ldd	r22, Y+12	; 0x0c
    2596:	7d 85       	ldd	r23, Y+13	; 0x0d
    2598:	8e 85       	ldd	r24, Y+14	; 0x0e
    259a:	9f 85       	ldd	r25, Y+15	; 0x0f
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a ef       	ldi	r20, 0xFA	; 250
    25a2:	54 e4       	ldi	r21, 0x44	; 68
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	88 87       	std	Y+8, r24	; 0x08
    25ae:	99 87       	std	Y+9, r25	; 0x09
    25b0:	aa 87       	std	Y+10, r26	; 0x0a
    25b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25b4:	68 85       	ldd	r22, Y+8	; 0x08
    25b6:	79 85       	ldd	r23, Y+9	; 0x09
    25b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <H_LCD_void_EnableLatch+0xe8>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9f 83       	std	Y+7, r25	; 0x07
    25d2:	8e 83       	std	Y+6, r24	; 0x06
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <H_LCD_void_EnableLatch+0x166>
	else if (__tmp > 65535)
    25d6:	68 85       	ldd	r22, Y+8	; 0x08
    25d8:	79 85       	ldd	r23, Y+9	; 0x09
    25da:	8a 85       	ldd	r24, Y+10	; 0x0a
    25dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <H_LCD_void_EnableLatch+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    25f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    25f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9f 83       	std	Y+7, r25	; 0x07
    2614:	8e 83       	std	Y+6, r24	; 0x06
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <H_LCD_void_EnableLatch+0x148>
    2618:	88 ec       	ldi	r24, 0xC8	; 200
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9d 83       	std	Y+5, r25	; 0x05
    261e:	8c 83       	std	Y+4, r24	; 0x04
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	9d 81       	ldd	r25, Y+5	; 0x05
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <H_LCD_void_EnableLatch+0x136>
    2628:	9d 83       	std	Y+5, r25	; 0x05
    262a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8e 81       	ldd	r24, Y+6	; 0x06
    262e:	9f 81       	ldd	r25, Y+7	; 0x07
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9f 83       	std	Y+7, r25	; 0x07
    2634:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8e 81       	ldd	r24, Y+6	; 0x06
    2638:	9f 81       	ldd	r25, Y+7	; 0x07
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <H_LCD_void_EnableLatch+0x12a>
    263e:	24 c0       	rjmp	.+72     	; 0x2688 <H_LCD_void_EnableLatch+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	68 85       	ldd	r22, Y+8	; 0x08
    2642:	79 85       	ldd	r23, Y+9	; 0x09
    2644:	8a 85       	ldd	r24, Y+10	; 0x0a
    2646:	9b 85       	ldd	r25, Y+11	; 0x0b
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9f 83       	std	Y+7, r25	; 0x07
    2652:	8e 83       	std	Y+6, r24	; 0x06
    2654:	8e 81       	ldd	r24, Y+6	; 0x06
    2656:	9f 81       	ldd	r25, Y+7	; 0x07
    2658:	9b 83       	std	Y+3, r25	; 0x03
    265a:	8a 83       	std	Y+2, r24	; 0x02
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	9b 81       	ldd	r25, Y+3	; 0x03
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <H_LCD_void_EnableLatch+0x172>
    2664:	9b 83       	std	Y+3, r25	; 0x03
    2666:	8a 83       	std	Y+2, r24	; 0x02
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <H_LCD_void_EnableLatch+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    266a:	69 89       	ldd	r22, Y+17	; 0x11
    266c:	7a 89       	ldd	r23, Y+18	; 0x12
    266e:	8b 89       	ldd	r24, Y+19	; 0x13
    2670:	9c 89       	ldd	r25, Y+20	; 0x14
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	88 8b       	std	Y+16, r24	; 0x10
    267c:	88 89       	ldd	r24, Y+16	; 0x10
    267e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	8a 95       	dec	r24
    2684:	f1 f7       	brne	.-4      	; 0x2682 <H_LCD_void_EnableLatch+0x194>
    2686:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(300);
	M_DIO_u8_SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_PIN_VALUE_LOW);
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	65 e0       	ldi	r22, 0x05	; 5
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 a8 09 	call	0x1350	; 0x1350 <M_DIO_u8_SetPinValue>
}
    2692:	68 96       	adiw	r28, 0x18	; 24
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <RTC_enuSetClock>:
#include "../../MCAL/TWI/TWI_interface.h"


/********* Setting functions *********/
RTC_Errors_enu RTC_enuSetClock (RTC_Clock_st * Copy_PstClock )
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <RTC_enuSetClock+0x6>
    26aa:	0f 92       	push	r0
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9b 83       	std	Y+3, r25	; 0x03
    26b2:	8a 83       	std	Y+2, r24	; 0x02
	RTC_Errors_enu Local_enuClockError = RTC_SetClock_Ok;
    26b4:	19 82       	std	Y+1, r1	; 0x01

	/* Handle the Hours Mode*/
	Copy_PstClock->RTC_u8Hours = RTC_enuConvertDecToBCD(Copy_PstClock->RTC_u8Hours);
    26b6:	ea 81       	ldd	r30, Y+2	; 0x02
    26b8:	fb 81       	ldd	r31, Y+3	; 0x03
    26ba:	81 81       	ldd	r24, Z+1	; 0x01
    26bc:	0e 94 e5 13 	call	0x27ca	; 0x27ca <RTC_enuConvertDecToBCD>
    26c0:	ea 81       	ldd	r30, Y+2	; 0x02
    26c2:	fb 81       	ldd	r31, Y+3	; 0x03
    26c4:	81 83       	std	Z+1, r24	; 0x01

	if (Copy_PstClock->RTC_u8HoursMode == _24_HOURS_MODE)
    26c6:	ea 81       	ldd	r30, Y+2	; 0x02
    26c8:	fb 81       	ldd	r31, Y+3	; 0x03
    26ca:	80 81       	ld	r24, Z
    26cc:	88 23       	and	r24, r24
    26ce:	41 f4       	brne	.+16     	; 0x26e0 <RTC_enuSetClock+0x3c>
	{
		CLR_BIT(Copy_PstClock->RTC_u8Hours,6);
    26d0:	ea 81       	ldd	r30, Y+2	; 0x02
    26d2:	fb 81       	ldd	r31, Y+3	; 0x03
    26d4:	81 81       	ldd	r24, Z+1	; 0x01
    26d6:	8f 7b       	andi	r24, 0xBF	; 191
    26d8:	ea 81       	ldd	r30, Y+2	; 0x02
    26da:	fb 81       	ldd	r31, Y+3	; 0x03
    26dc:	81 83       	std	Z+1, r24	; 0x01
    26de:	1b c0       	rjmp	.+54     	; 0x2716 <RTC_enuSetClock+0x72>
	}
	else
	{
		SET_BIT(Copy_PstClock->RTC_u8Hours,6);
    26e0:	ea 81       	ldd	r30, Y+2	; 0x02
    26e2:	fb 81       	ldd	r31, Y+3	; 0x03
    26e4:	81 81       	ldd	r24, Z+1	; 0x01
    26e6:	80 64       	ori	r24, 0x40	; 64
    26e8:	ea 81       	ldd	r30, Y+2	; 0x02
    26ea:	fb 81       	ldd	r31, Y+3	; 0x03
    26ec:	81 83       	std	Z+1, r24	; 0x01

		if (Copy_PstClock->RTC_u8HoursMode == _12_HOURS_MODE_AM)
    26ee:	ea 81       	ldd	r30, Y+2	; 0x02
    26f0:	fb 81       	ldd	r31, Y+3	; 0x03
    26f2:	80 81       	ld	r24, Z
    26f4:	82 30       	cpi	r24, 0x02	; 2
    26f6:	41 f4       	brne	.+16     	; 0x2708 <RTC_enuSetClock+0x64>
		{
			CLR_BIT(Copy_PstClock->RTC_u8Hours,5);
    26f8:	ea 81       	ldd	r30, Y+2	; 0x02
    26fa:	fb 81       	ldd	r31, Y+3	; 0x03
    26fc:	81 81       	ldd	r24, Z+1	; 0x01
    26fe:	8f 7d       	andi	r24, 0xDF	; 223
    2700:	ea 81       	ldd	r30, Y+2	; 0x02
    2702:	fb 81       	ldd	r31, Y+3	; 0x03
    2704:	81 83       	std	Z+1, r24	; 0x01
    2706:	07 c0       	rjmp	.+14     	; 0x2716 <RTC_enuSetClock+0x72>
		}
		else
		{
			SET_BIT(Copy_PstClock->RTC_u8Hours,5);
    2708:	ea 81       	ldd	r30, Y+2	; 0x02
    270a:	fb 81       	ldd	r31, Y+3	; 0x03
    270c:	81 81       	ldd	r24, Z+1	; 0x01
    270e:	80 62       	ori	r24, 0x20	; 32
    2710:	ea 81       	ldd	r30, Y+2	; 0x02
    2712:	fb 81       	ldd	r31, Y+3	; 0x03
    2714:	81 83       	std	Z+1, r24	; 0x01
		}
	}

	/* send start condition */
	TWI_u8MasterStartCond();
    2716:	0e 94 99 06 	call	0xd32	; 0xd32 <TWI_u8MasterStartCond>

	/* send the RTC address with write operation  */
	TWI_u8MasterSendSlaveAdressWrite(0b01101000);
    271a:	88 e6       	ldi	r24, 0x68	; 104
    271c:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_u8MasterSendSlaveAdressWrite>

	/* send the start register address to writ which is the seconds */
	/* the address will be sent as sending data */
	TWI_u8MasterSendData(RTC_SECONDS_REG);
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* send the Seconds value */
	/* be aware that the MSB must be zero to enable the CH (clock hat) */
	TWI_u8MasterSendData(RTC_enuConvertDecToBCD(Copy_PstClock->RTC_u8Senconds));
    2726:	ea 81       	ldd	r30, Y+2	; 0x02
    2728:	fb 81       	ldd	r31, Y+3	; 0x03
    272a:	83 81       	ldd	r24, Z+3	; 0x03
    272c:	0e 94 e5 13 	call	0x27ca	; 0x27ca <RTC_enuConvertDecToBCD>
    2730:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* send the Minutes */
	TWI_u8MasterSendData(RTC_enuConvertDecToBCD(Copy_PstClock->RTC_u8Minutes));
    2734:	ea 81       	ldd	r30, Y+2	; 0x02
    2736:	fb 81       	ldd	r31, Y+3	; 0x03
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <RTC_enuConvertDecToBCD>
    273e:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* send the Hours   */
	TWI_u8MasterSendData(Copy_PstClock->RTC_u8Hours);
    2742:	ea 81       	ldd	r30, Y+2	; 0x02
    2744:	fb 81       	ldd	r31, Y+3	; 0x03
    2746:	81 81       	ldd	r24, Z+1	; 0x01
    2748:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* Send stop condition */
	TWI_u8MasterStopCond();
    274c:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_u8MasterStopCond>

	return Local_enuClockError;
    2750:	89 81       	ldd	r24, Y+1	; 0x01
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <RTC_enuSetDate>:
//
//
//}

RTC_Errors_enu RTC_enuSetDate (RTC_Date_st * Copy_PstDate)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <RTC_enuSetDate+0x6>
    2764:	0f 92       	push	r0
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	9b 83       	std	Y+3, r25	; 0x03
    276c:	8a 83       	std	Y+2, r24	; 0x02
	RTC_Errors_enu Local_enuClockError = RTC_SetClock_Ok;
    276e:	19 82       	std	Y+1, r1	; 0x01

	/* send start condition */
	TWI_u8MasterStartCond();
    2770:	0e 94 99 06 	call	0xd32	; 0xd32 <TWI_u8MasterStartCond>

	/* send the RTC address with write operation  */
	TWI_u8MasterSendSlaveAdressWrite(0b01101000);
    2774:	88 e6       	ldi	r24, 0x68	; 104
    2776:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_u8MasterSendSlaveAdressWrite>

	/* send the start register address to writ which is the Day */
	/* the address will be sent as sending data */
	TWI_u8MasterSendData(RTC_DAYS_REG);
    277a:	83 e0       	ldi	r24, 0x03	; 3
    277c:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* send the Day value */
	/* be aware that the MSB must be zero to enable the CH (clock hat) */
	TWI_u8MasterSendData(RTC_enuConvertDecToBCD(Copy_PstDate->RTC_u8Day));
    2780:	ea 81       	ldd	r30, Y+2	; 0x02
    2782:	fb 81       	ldd	r31, Y+3	; 0x03
    2784:	80 81       	ld	r24, Z
    2786:	0e 94 e5 13 	call	0x27ca	; 0x27ca <RTC_enuConvertDecToBCD>
    278a:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* Send the Date*/
	TWI_u8MasterSendData(RTC_enuConvertDecToBCD(Copy_PstDate->RTC_u8Date));
    278e:	ea 81       	ldd	r30, Y+2	; 0x02
    2790:	fb 81       	ldd	r31, Y+3	; 0x03
    2792:	81 81       	ldd	r24, Z+1	; 0x01
    2794:	0e 94 e5 13 	call	0x27ca	; 0x27ca <RTC_enuConvertDecToBCD>
    2798:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* send the Month */
	TWI_u8MasterSendData(RTC_enuConvertDecToBCD(Copy_PstDate->RTC_u8Month));
    279c:	ea 81       	ldd	r30, Y+2	; 0x02
    279e:	fb 81       	ldd	r31, Y+3	; 0x03
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	0e 94 e5 13 	call	0x27ca	; 0x27ca <RTC_enuConvertDecToBCD>
    27a6:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* send the year   */
	TWI_u8MasterSendData(RTC_enuConvertDecToBCD(Copy_PstDate->RTC_u8Year));
    27aa:	ea 81       	ldd	r30, Y+2	; 0x02
    27ac:	fb 81       	ldd	r31, Y+3	; 0x03
    27ae:	83 81       	ldd	r24, Z+3	; 0x03
    27b0:	0e 94 e5 13 	call	0x27ca	; 0x27ca <RTC_enuConvertDecToBCD>
    27b4:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* Send stop condition */
	TWI_u8MasterStopCond();
    27b8:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_u8MasterStopCond>

	return Local_enuClockError;
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <RTC_enuConvertDecToBCD>:

static u8 RTC_enuConvertDecToBCD (u8 Copy_u8DecmialValue)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <RTC_enuConvertDecToBCD+0x6>
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8BCDValue ;

	/* Get the first digit*/
	Local_u8BCDValue = Copy_u8DecmialValue % 10;
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9a e0       	ldi	r25, 0x0A	; 10
    27da:	69 2f       	mov	r22, r25
    27dc:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodqi4>
    27e0:	89 2f       	mov	r24, r25
    27e2:	89 83       	std	Y+1, r24	; 0x01

	/* Remove the first digit */
	Copy_u8DecmialValue/= 10;
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	9a e0       	ldi	r25, 0x0A	; 10
    27e8:	69 2f       	mov	r22, r25
    27ea:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodqi4>
    27ee:	8a 83       	std	Y+2, r24	; 0x02

	Local_u8BCDValue |= (Copy_u8DecmialValue << 4);
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	82 95       	swap	r24
    27f8:	92 95       	swap	r25
    27fa:	90 7f       	andi	r25, 0xF0	; 240
    27fc:	98 27       	eor	r25, r24
    27fe:	80 7f       	andi	r24, 0xF0	; 240
    2800:	98 27       	eor	r25, r24
    2802:	98 2f       	mov	r25, r24
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	89 2b       	or	r24, r25
    2808:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8BCDValue;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
}
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <RTC_u8ConvertBCDToDecimal>:

u8  RTC_u8ConvertBCDToDecimal (u8 Copy_u8BCDvalue )
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	00 d0       	rcall	.+0      	; 0x281c <RTC_u8ConvertBCDToDecimal+0x6>
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	8a 83       	std	Y+2, r24	; 0x02
	u8 Temp_var =0;
    2822:	19 82       	std	Y+1, r1	; 0x01

	/* Get the MSB half*/
	// 							0b 01010000
	Temp_var = Copy_u8BCDvalue & 0b11110000;
    2824:	8a 81       	ldd	r24, Y+2	; 0x02
    2826:	80 7f       	andi	r24, 0xF0	; 240
    2828:	89 83       	std	Y+1, r24	; 0x01

	/* Clear the MSB from the BCD value */
	Copy_u8BCDvalue = Copy_u8BCDvalue & 0b00001111;
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	8f 70       	andi	r24, 0x0F	; 15
    282e:	8a 83       	std	Y+2, r24	; 0x02

	/* Converting Algorithm */
	Temp_var = Copy_u8BCDvalue + ((Temp_var >> 4) * 10);
    2830:	89 81       	ldd	r24, Y+1	; 0x01
    2832:	82 95       	swap	r24
    2834:	8f 70       	andi	r24, 0x0F	; 15
    2836:	88 2f       	mov	r24, r24
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9c 01       	movw	r18, r24
    283c:	22 0f       	add	r18, r18
    283e:	33 1f       	adc	r19, r19
    2840:	c9 01       	movw	r24, r18
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	82 0f       	add	r24, r18
    284c:	93 1f       	adc	r25, r19
    284e:	98 2f       	mov	r25, r24
    2850:	8a 81       	ldd	r24, Y+2	; 0x02
    2852:	89 0f       	add	r24, r25
    2854:	89 83       	std	Y+1, r24	; 0x01



	return Temp_var;
    2856:	89 81       	ldd	r24, Y+1	; 0x01

}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <RTC_enuReadingClock>:

/************ Reading functions ***************************/

RTC_Errors_enu RTC_enuReadingClock (RTC_Clock_st * Copy_PstClock)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	00 d0       	rcall	.+0      	; 0x2868 <RTC_enuReadingClock+0x6>
    2868:	0f 92       	push	r0
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	9b 83       	std	Y+3, r25	; 0x03
    2870:	8a 83       	std	Y+2, r24	; 0x02

	RTC_Errors_enu Local_enuClockError = RTC_SetClock_Ok;
    2872:	19 82       	std	Y+1, r1	; 0x01

	/* send start condition */
	TWI_u8MasterStartCond();
    2874:	0e 94 99 06 	call	0xd32	; 0xd32 <TWI_u8MasterStartCond>

	/*********** Hints in read operations ***************************/
	/* 1- send the slave address with write operation */
	/* send the RTC address with write operation  */
	TWI_u8MasterSendSlaveAdressWrite(0b01101000);
    2878:	88 e6       	ldi	r24, 0x68	; 104
    287a:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_u8MasterSendSlaveAdressWrite>

	/* 2- send the start address you want to start read from */
	/* send the start register address to writ which is the seconds */
	/* the address will be sent as sending data */
	TWI_u8MasterSendData(RTC_SECONDS_REG);
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* 3- send repeat start condition */
	 TWI_u8MasterRepetedStartCond ();
    2884:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TWI_u8MasterRepetedStartCond>

	/* 4- send the same RTC address with read operation */
	 TWI_u8MasterSendSlaveAdressRead (0b01101000);
    2888:	88 e6       	ldi	r24, 0x68	; 104
    288a:	0e 94 01 07 	call	0xe02	; 0xe02 <TWI_u8MasterSendSlaveAdressRead>

	 /* 5- receive the seconds from the slave RTC*/
	 Copy_PstClock->RTC_u8Senconds = TWI_u8MasterRecDataVersion2();
    288e:	0e 94 90 07 	call	0xf20	; 0xf20 <TWI_u8MasterRecDataVersion2>
    2892:	ea 81       	ldd	r30, Y+2	; 0x02
    2894:	fb 81       	ldd	r31, Y+3	; 0x03
    2896:	83 83       	std	Z+3, r24	; 0x03

	 /* 7- receive the minutes from the slave RTC*/
	 Copy_PstClock->RTC_u8Minutes= TWI_u8MasterRecDataVersion2();
    2898:	0e 94 90 07 	call	0xf20	; 0xf20 <TWI_u8MasterRecDataVersion2>
    289c:	ea 81       	ldd	r30, Y+2	; 0x02
    289e:	fb 81       	ldd	r31, Y+3	; 0x03
    28a0:	82 83       	std	Z+2, r24	; 0x02

	 /* 6- receive the hours from the slave RTC*/
	 Copy_PstClock->RTC_u8Hours= TWI_u8MasterRecDataNotAck();
    28a2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <TWI_u8MasterRecDataNotAck>
    28a6:	ea 81       	ldd	r30, Y+2	; 0x02
    28a8:	fb 81       	ldd	r31, Y+3	; 0x03
    28aa:	81 83       	std	Z+1, r24	; 0x01

	/* Send stop condition */
	TWI_u8MasterStopCond();
    28ac:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_u8MasterStopCond>

	/* Handle the Hours Mode */
	if ( GET_BIT(Copy_PstClock->RTC_u8Hours,6) == _24_HOURS_MODE)
    28b0:	ea 81       	ldd	r30, Y+2	; 0x02
    28b2:	fb 81       	ldd	r31, Y+3	; 0x03
    28b4:	81 81       	ldd	r24, Z+1	; 0x01
    28b6:	82 95       	swap	r24
    28b8:	86 95       	lsr	r24
    28ba:	86 95       	lsr	r24
    28bc:	83 70       	andi	r24, 0x03	; 3
    28be:	88 2f       	mov	r24, r24
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	81 70       	andi	r24, 0x01	; 1
    28c4:	90 70       	andi	r25, 0x00	; 0
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	21 f4       	brne	.+8      	; 0x28d2 <RTC_enuReadingClock+0x70>
	{
		Copy_PstClock->RTC_u8HoursMode = _24_HOURS_MODE;
    28ca:	ea 81       	ldd	r30, Y+2	; 0x02
    28cc:	fb 81       	ldd	r31, Y+3	; 0x03
    28ce:	10 82       	st	Z, r1
    28d0:	16 c0       	rjmp	.+44     	; 0x28fe <RTC_enuReadingClock+0x9c>
	}
	else
	{
		if ( GET_BIT(Copy_PstClock->RTC_u8Hours,6) == _12_HOURS_MODE_PM)
    28d2:	ea 81       	ldd	r30, Y+2	; 0x02
    28d4:	fb 81       	ldd	r31, Y+3	; 0x03
    28d6:	81 81       	ldd	r24, Z+1	; 0x01
    28d8:	82 95       	swap	r24
    28da:	86 95       	lsr	r24
    28dc:	86 95       	lsr	r24
    28de:	83 70       	andi	r24, 0x03	; 3
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	81 70       	andi	r24, 0x01	; 1
    28e6:	90 70       	andi	r25, 0x00	; 0
    28e8:	88 23       	and	r24, r24
    28ea:	29 f0       	breq	.+10     	; 0x28f6 <RTC_enuReadingClock+0x94>
		{
			Copy_PstClock->RTC_u8HoursMode = _12_HOURS_MODE_PM;
    28ec:	ea 81       	ldd	r30, Y+2	; 0x02
    28ee:	fb 81       	ldd	r31, Y+3	; 0x03
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	80 83       	st	Z, r24
    28f4:	04 c0       	rjmp	.+8      	; 0x28fe <RTC_enuReadingClock+0x9c>
		}
		else
		{
			Copy_PstClock->RTC_u8HoursMode = _12_HOURS_MODE_AM;
    28f6:	ea 81       	ldd	r30, Y+2	; 0x02
    28f8:	fb 81       	ldd	r31, Y+3	; 0x03
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	80 83       	st	Z, r24
		}

	}


	return Local_enuClockError;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <RTC_enuReadingDate>:

RTC_Errors_enu RTC_enuReadingDate (RTC_Date_st * Copy_PstDate)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <RTC_enuReadingDate+0x6>
    2912:	0f 92       	push	r0
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	9b 83       	std	Y+3, r25	; 0x03
    291a:	8a 83       	std	Y+2, r24	; 0x02

	RTC_Errors_enu Local_enuClockError = RTC_SetClock_Ok;
    291c:	19 82       	std	Y+1, r1	; 0x01

	/* send start condition */
	TWI_u8MasterStartCond();
    291e:	0e 94 99 06 	call	0xd32	; 0xd32 <TWI_u8MasterStartCond>

	/*********** Hints in read operations ***************************/
	/* 1- send the slave address with write operation */
	/* send the RTC address with write operation  */
	TWI_u8MasterSendSlaveAdressWrite(0b01101000);
    2922:	88 e6       	ldi	r24, 0x68	; 104
    2924:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_u8MasterSendSlaveAdressWrite>

	/* 2- send the start address you want to start read from */
	/* send the start register address to writ which is the seconds */
	/* the address will be sent as sending data */
	TWI_u8MasterSendData(RTC_DAYS_REG);
    2928:	83 e0       	ldi	r24, 0x03	; 3
    292a:	0e 94 39 07 	call	0xe72	; 0xe72 <TWI_u8MasterSendData>

	/* 3- send repeat start condition */
	 TWI_u8MasterRepetedStartCond ();
    292e:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TWI_u8MasterRepetedStartCond>

	/* 4- send the same RTC address with read operation */
	 TWI_u8MasterSendSlaveAdressRead (0b01101000);
    2932:	88 e6       	ldi	r24, 0x68	; 104
    2934:	0e 94 01 07 	call	0xe02	; 0xe02 <TWI_u8MasterSendSlaveAdressRead>

	 /* 5- receive the day from the slave RTC*/
	 Copy_PstDate->RTC_u8Day= TWI_u8MasterRecDataVersion2();
    2938:	0e 94 90 07 	call	0xf20	; 0xf20 <TWI_u8MasterRecDataVersion2>
    293c:	ea 81       	ldd	r30, Y+2	; 0x02
    293e:	fb 81       	ldd	r31, Y+3	; 0x03
    2940:	80 83       	st	Z, r24

	 /* 7- receive the date from the slave RTC*/
	 Copy_PstDate->RTC_u8Date= TWI_u8MasterRecDataVersion2();
    2942:	0e 94 90 07 	call	0xf20	; 0xf20 <TWI_u8MasterRecDataVersion2>
    2946:	ea 81       	ldd	r30, Y+2	; 0x02
    2948:	fb 81       	ldd	r31, Y+3	; 0x03
    294a:	81 83       	std	Z+1, r24	; 0x01

	 /* 6- receive the month from the slave RTC*/
	 Copy_PstDate->RTC_u8Month= TWI_u8MasterRecDataVersion2();
    294c:	0e 94 90 07 	call	0xf20	; 0xf20 <TWI_u8MasterRecDataVersion2>
    2950:	ea 81       	ldd	r30, Y+2	; 0x02
    2952:	fb 81       	ldd	r31, Y+3	; 0x03
    2954:	82 83       	std	Z+2, r24	; 0x02

	 /* 8- receive the year from the salve RTC*/
	 Copy_PstDate->RTC_u8Year= TWI_u8MasterRecDataNotAck();
    2956:	0e 94 bd 07 	call	0xf7a	; 0xf7a <TWI_u8MasterRecDataNotAck>
    295a:	ea 81       	ldd	r30, Y+2	; 0x02
    295c:	fb 81       	ldd	r31, Y+3	; 0x03
    295e:	83 83       	std	Z+3, r24	; 0x03



	/* Send stop condition */
	TWI_u8MasterStopCond();
    2960:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_u8MasterStopCond>



	return Local_enuClockError;
    2964:	89 81       	ldd	r24, Y+1	; 0x01

}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <main>:

RTC_Clock_st Clock = { _24_HOURS_MODE , 18 , 50 , 51} ;
RTC_Clock_st Clock_rec ;
RTC_Date_st Date = { MON ,25 , 8 , 22};
int main ()
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	6a 97       	sbiw	r28, 0x1a	; 26
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61

	/* TWI INIT*/
	TWI_voidMasterInit();
    2986:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TWI_voidMasterInit>

	/* LCD */
	H_LCD_void_LCD_Init();
    298a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <H_LCD_void_LCD_Init>

	/* Set the clock*/
	RTC_enuSetClock(&Clock);
    298e:	81 eb       	ldi	r24, 0xB1	; 177
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0e 94 52 13 	call	0x26a4	; 0x26a4 <RTC_enuSetClock>
	/* set the date */
	RTC_enuSetDate(&Date);
    2996:	85 eb       	ldi	r24, 0xB5	; 181
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	0e 94 af 13 	call	0x275e	; 0x275e <RTC_enuSetDate>


	/* Reading the clock*/
	RTC_enuReadingClock(&Clock);
    299e:	81 eb       	ldi	r24, 0xB1	; 177
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 31 14 	call	0x2862	; 0x2862 <RTC_enuReadingClock>
	/* Reading the date*/
	RTC_enuReadingDate(&Date);
    29a6:	85 eb       	ldi	r24, 0xB5	; 181
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 86 14 	call	0x290c	; 0x290c <RTC_enuReadingDate>


	u8 H = (RTC_u8ConvertBCDToDecimal((Clock.RTC_u8Hours)));
    29ae:	80 91 b2 00 	lds	r24, 0x00B2
    29b2:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    29b6:	8e 8b       	std	Y+22, r24	; 0x16
	u8 H_M = (RTC_u8ConvertBCDToDecimal((Clock.RTC_u8HoursMode)));
    29b8:	80 91 b1 00 	lds	r24, 0x00B1
    29bc:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    29c0:	8d 8b       	std	Y+21, r24	; 0x15
	u8 M = (RTC_u8ConvertBCDToDecimal(Clock.RTC_u8Minutes));
    29c2:	80 91 b3 00 	lds	r24, 0x00B3
    29c6:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    29ca:	8c 8b       	std	Y+20, r24	; 0x14
	u8 S = (RTC_u8ConvertBCDToDecimal(Clock.RTC_u8Senconds));
    29cc:	80 91 b4 00 	lds	r24, 0x00B4
    29d0:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    29d4:	8b 8b       	std	Y+19, r24	; 0x13

	u8 D = RTC_u8ConvertBCDToDecimal(Date.RTC_u8Day);
    29d6:	80 91 b5 00 	lds	r24, 0x00B5
    29da:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    29de:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Da = RTC_u8ConvertBCDToDecimal(Date.RTC_u8Date);
    29e0:	80 91 b6 00 	lds	r24, 0x00B6
    29e4:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    29e8:	89 8b       	std	Y+17, r24	; 0x11
	u8 Month = RTC_u8ConvertBCDToDecimal(Date.RTC_u8Month);
    29ea:	80 91 b7 00 	lds	r24, 0x00B7
    29ee:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    29f2:	88 8b       	std	Y+16, r24	; 0x10
	u8 year = (RTC_u8ConvertBCDToDecimal(Date.RTC_u8Year));
    29f4:	80 91 b8 00 	lds	r24, 0x00B8
    29f8:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    29fc:	8f 87       	std	Y+15, r24	; 0x0f



	H_LCD_void_SendString("CLK : ");
    29fe:	80 e6       	ldi	r24, 0x60	; 96
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	H_LCD_void_SendNumber(H);
    2a06:	8e 89       	ldd	r24, Y+22	; 0x16
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e0       	ldi	r26, 0x00	; 0
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>
	H_LCD_void_SendString(":");
    2a18:	87 e6       	ldi	r24, 0x67	; 103
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	H_LCD_void_SendNumber(M);
    2a20:	8c 89       	ldd	r24, Y+20	; 0x14
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	bc 01       	movw	r22, r24
    2a2c:	cd 01       	movw	r24, r26
    2a2e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>
	H_LCD_void_SendString(":");
    2a32:	87 e6       	ldi	r24, 0x67	; 103
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	H_LCD_void_SendNumber(S);
    2a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3c:	88 2f       	mov	r24, r24
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	a0 e0       	ldi	r26, 0x00	; 0
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	bc 01       	movw	r22, r24
    2a46:	cd 01       	movw	r24, r26
    2a48:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>

	switch (H_M)
    2a4c:	8d 89       	ldd	r24, Y+21	; 0x15
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	3a 8f       	std	Y+26, r19	; 0x1a
    2a54:	29 8f       	std	Y+25, r18	; 0x19
    2a56:	89 8d       	ldd	r24, Y+25	; 0x19
    2a58:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	91 05       	cpc	r25, r1
    2a5e:	99 f0       	breq	.+38     	; 0x2a86 <main+0x114>
    2a60:	29 8d       	ldd	r18, Y+25	; 0x19
    2a62:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2a64:	22 30       	cpi	r18, 0x02	; 2
    2a66:	31 05       	cpc	r19, r1
    2a68:	49 f0       	breq	.+18     	; 0x2a7c <main+0x10a>
    2a6a:	89 8d       	ldd	r24, Y+25	; 0x19
    2a6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	71 f4       	brne	.+28     	; 0x2a8e <main+0x11c>
	{
	case _24_HOURS_MODE :H_LCD_void_SendString(" (24)");break;
    2a72:	89 e6       	ldi	r24, 0x69	; 105
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2a7a:	09 c0       	rjmp	.+18     	; 0x2a8e <main+0x11c>
	case _12_HOURS_MODE_AM :H_LCD_void_SendString(" AM");break;
    2a7c:	8f e6       	ldi	r24, 0x6F	; 111
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2a84:	04 c0       	rjmp	.+8      	; 0x2a8e <main+0x11c>
	case _12_HOURS_MODE_PM :H_LCD_void_SendString(" PM");break;
    2a86:	83 e7       	ldi	r24, 0x73	; 115
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	}

	H_LCD_voidGoToXY(1,0);
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <H_LCD_voidGoToXY>
	H_LCD_void_SendString("Day : ");
    2a96:	87 e7       	ldi	r24, 0x77	; 119
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	switch (D)
    2a9e:	8a 89       	ldd	r24, Y+18	; 0x12
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	38 8f       	std	Y+24, r19	; 0x18
    2aa6:	2f 8b       	std	Y+23, r18	; 0x17
    2aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    2aac:	83 30       	cpi	r24, 0x03	; 3
    2aae:	91 05       	cpc	r25, r1
    2ab0:	99 f1       	breq	.+102    	; 0x2b18 <main+0x1a6>
    2ab2:	2f 89       	ldd	r18, Y+23	; 0x17
    2ab4:	38 8d       	ldd	r19, Y+24	; 0x18
    2ab6:	24 30       	cpi	r18, 0x04	; 4
    2ab8:	31 05       	cpc	r19, r1
    2aba:	7c f4       	brge	.+30     	; 0x2ada <main+0x168>
    2abc:	8f 89       	ldd	r24, Y+23	; 0x17
    2abe:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac0:	81 30       	cpi	r24, 0x01	; 1
    2ac2:	91 05       	cpc	r25, r1
    2ac4:	f9 f0       	breq	.+62     	; 0x2b04 <main+0x192>
    2ac6:	2f 89       	ldd	r18, Y+23	; 0x17
    2ac8:	38 8d       	ldd	r19, Y+24	; 0x18
    2aca:	22 30       	cpi	r18, 0x02	; 2
    2acc:	31 05       	cpc	r19, r1
    2ace:	fc f4       	brge	.+62     	; 0x2b0e <main+0x19c>
    2ad0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	89 f0       	breq	.+34     	; 0x2afa <main+0x188>
    2ad8:	32 c0       	rjmp	.+100    	; 0x2b3e <main+0x1cc>
    2ada:	2f 89       	ldd	r18, Y+23	; 0x17
    2adc:	38 8d       	ldd	r19, Y+24	; 0x18
    2ade:	25 30       	cpi	r18, 0x05	; 5
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	21 f1       	breq	.+72     	; 0x2b2c <main+0x1ba>
    2ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae8:	85 30       	cpi	r24, 0x05	; 5
    2aea:	91 05       	cpc	r25, r1
    2aec:	d4 f0       	brlt	.+52     	; 0x2b22 <main+0x1b0>
    2aee:	2f 89       	ldd	r18, Y+23	; 0x17
    2af0:	38 8d       	ldd	r19, Y+24	; 0x18
    2af2:	26 30       	cpi	r18, 0x06	; 6
    2af4:	31 05       	cpc	r19, r1
    2af6:	f9 f0       	breq	.+62     	; 0x2b36 <main+0x1c4>
    2af8:	22 c0       	rjmp	.+68     	; 0x2b3e <main+0x1cc>
	{
	case SAT : H_LCD_void_SendString("SAT"); break;
    2afa:	8e e7       	ldi	r24, 0x7E	; 126
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2b02:	1d c0       	rjmp	.+58     	; 0x2b3e <main+0x1cc>
	case SUN : H_LCD_void_SendString("SUN"); break;
    2b04:	82 e8       	ldi	r24, 0x82	; 130
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2b0c:	18 c0       	rjmp	.+48     	; 0x2b3e <main+0x1cc>
	case MON : H_LCD_void_SendString("MON"); break;
    2b0e:	86 e8       	ldi	r24, 0x86	; 134
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2b16:	13 c0       	rjmp	.+38     	; 0x2b3e <main+0x1cc>
	case TUE : H_LCD_void_SendString("TUE"); break;
    2b18:	8a e8       	ldi	r24, 0x8A	; 138
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2b20:	0e c0       	rjmp	.+28     	; 0x2b3e <main+0x1cc>
	case WED : H_LCD_void_SendString("WED"); break;
    2b22:	8e e8       	ldi	r24, 0x8E	; 142
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2b2a:	09 c0       	rjmp	.+18     	; 0x2b3e <main+0x1cc>
	case THR : H_LCD_void_SendString("THR"); break;
    2b2c:	82 e9       	ldi	r24, 0x92	; 146
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2b34:	04 c0       	rjmp	.+8      	; 0x2b3e <main+0x1cc>
	case FRI : H_LCD_void_SendString("FRI"); break;
    2b36:	86 e9       	ldi	r24, 0x96	; 150
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	}

	H_LCD_voidGoToXY(2,0);
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <H_LCD_voidGoToXY>
	H_LCD_void_SendString("Date :");
    2b46:	8a e9       	ldi	r24, 0x9A	; 154
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	H_LCD_void_SendNumber(Da);
    2b4e:	89 89       	ldd	r24, Y+17	; 0x11
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	a0 e0       	ldi	r26, 0x00	; 0
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>
	H_LCD_void_SendString("/");
    2b60:	81 ea       	ldi	r24, 0xA1	; 161
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	H_LCD_void_SendNumber(Month);
    2b68:	88 89       	ldd	r24, Y+16	; 0x10
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>
	H_LCD_void_SendString("/20");
    2b7a:	83 ea       	ldi	r24, 0xA3	; 163
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
	H_LCD_void_SendNumber(year);
    2b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b84:	88 2f       	mov	r24, r24
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	a0 e0       	ldi	r26, 0x00	; 0
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>



	while (1)
		{
			H = 0,H_M = 0, M = 0 ,S =0;
    2b94:	1e 8a       	std	Y+22, r1	; 0x16
    2b96:	1d 8a       	std	Y+21, r1	; 0x15
    2b98:	1c 8a       	std	Y+20, r1	; 0x14
    2b9a:	1b 8a       	std	Y+19, r1	; 0x13
			/* Reading the clock*/

			 RTC_enuReadingClock(&Clock);
    2b9c:	81 eb       	ldi	r24, 0xB1	; 177
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 31 14 	call	0x2862	; 0x2862 <RTC_enuReadingClock>
			 H = (RTC_u8ConvertBCDToDecimal((Clock.RTC_u8Hours)));
    2ba4:	80 91 b2 00 	lds	r24, 0x00B2
    2ba8:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    2bac:	8e 8b       	std	Y+22, r24	; 0x16
			 H_M = (RTC_u8ConvertBCDToDecimal((Clock.RTC_u8HoursMode)));
    2bae:	80 91 b1 00 	lds	r24, 0x00B1
    2bb2:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    2bb6:	8d 8b       	std	Y+21, r24	; 0x15
			 M = (RTC_u8ConvertBCDToDecimal(Clock.RTC_u8Minutes));
    2bb8:	80 91 b3 00 	lds	r24, 0x00B3
    2bbc:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    2bc0:	8c 8b       	std	Y+20, r24	; 0x14

			 S = (RTC_u8ConvertBCDToDecimal(Clock.RTC_u8Senconds));
    2bc2:	80 91 b4 00 	lds	r24, 0x00B4
    2bc6:	0e 94 0b 14 	call	0x2816	; 0x2816 <RTC_u8ConvertBCDToDecimal>
    2bca:	8b 8b       	std	Y+19, r24	; 0x13

			 H_LCD_voidGoToXY(0,0);
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <H_LCD_voidGoToXY>
				H_LCD_void_SendString("CLK : ");
    2bd4:	80 e6       	ldi	r24, 0x60	; 96
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
				H_LCD_void_SendNumber(H);
    2bdc:	8e 89       	ldd	r24, Y+22	; 0x16
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	a0 e0       	ldi	r26, 0x00	; 0
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>
				H_LCD_void_SendString(":");
    2bee:	87 e6       	ldi	r24, 0x67	; 103
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
				H_LCD_void_SendNumber(M);
    2bf6:	8c 89       	ldd	r24, Y+20	; 0x14
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e0       	ldi	r26, 0x00	; 0
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>
				H_LCD_void_SendString(":");
    2c08:	87 e6       	ldi	r24, 0x67	; 103
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
				if (S < 9)
    2c10:	8b 89       	ldd	r24, Y+19	; 0x13
    2c12:	89 30       	cpi	r24, 0x09	; 9
    2c14:	70 f4       	brcc	.+28     	; 0x2c32 <main+0x2c0>
				{
					H_LCD_void_SendNumber(S);
    2c16:	8b 89       	ldd	r24, Y+19	; 0x13
    2c18:	88 2f       	mov	r24, r24
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	a0 e0       	ldi	r26, 0x00	; 0
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	bc 01       	movw	r22, r24
    2c22:	cd 01       	movw	r24, r26
    2c24:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>
					H_LCD_void_SendString(" ");
    2c28:	87 ea       	ldi	r24, 0xA7	; 167
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 39 11 	call	0x2272	; 0x2272 <H_LCD_void_SendString>
    2c30:	09 c0       	rjmp	.+18     	; 0x2c44 <main+0x2d2>
				}
				else
				{
					H_LCD_void_SendNumber(S);
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a0 e0       	ldi	r26, 0x00	; 0
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 63 11 	call	0x22c6	; 0x22c6 <H_LCD_void_SendNumber>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a8 ec       	ldi	r26, 0xC8	; 200
    2c4a:	b3 e4       	ldi	r27, 0x43	; 67
    2c4c:	8b 87       	std	Y+11, r24	; 0x0b
    2c4e:	9c 87       	std	Y+12, r25	; 0x0c
    2c50:	ad 87       	std	Y+13, r26	; 0x0d
    2c52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	4a ef       	ldi	r20, 0xFA	; 250
    2c62:	54 e4       	ldi	r21, 0x44	; 68
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	8f 83       	std	Y+7, r24	; 0x07
    2c6e:	98 87       	std	Y+8, r25	; 0x08
    2c70:	a9 87       	std	Y+9, r26	; 0x09
    2c72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c74:	6f 81       	ldd	r22, Y+7	; 0x07
    2c76:	78 85       	ldd	r23, Y+8	; 0x08
    2c78:	89 85       	ldd	r24, Y+9	; 0x09
    2c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e8       	ldi	r20, 0x80	; 128
    2c82:	5f e3       	ldi	r21, 0x3F	; 63
    2c84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c88:	88 23       	and	r24, r24
    2c8a:	2c f4       	brge	.+10     	; 0x2c96 <main+0x324>
		__ticks = 1;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05
    2c94:	3f c0       	rjmp	.+126    	; 0x2d14 <main+0x3a2>
	else if (__tmp > 65535)
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	3f ef       	ldi	r19, 0xFF	; 255
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	57 e4       	ldi	r21, 0x47	; 71
    2ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	4c f5       	brge	.+82     	; 0x2d00 <main+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e2       	ldi	r20, 0x20	; 32
    2cbc:	51 e4       	ldi	r21, 0x41	; 65
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	0f c0       	rjmp	.+30     	; 0x2cf6 <main+0x384>
    2cd8:	88 ec       	ldi	r24, 0xC8	; 200
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	9c 83       	std	Y+4, r25	; 0x04
    2cde:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <main+0x372>
    2ce8:	9c 83       	std	Y+4, r25	; 0x04
    2cea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	9e 83       	std	Y+6, r25	; 0x06
    2cf4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	69 f7       	brne	.-38     	; 0x2cd8 <main+0x366>
    2cfe:	4a cf       	rjmp	.-364    	; 0x2b94 <main+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d00:	6f 81       	ldd	r22, Y+7	; 0x07
    2d02:	78 85       	ldd	r23, Y+8	; 0x08
    2d04:	89 85       	ldd	r24, Y+9	; 0x09
    2d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9e 83       	std	Y+6, r25	; 0x06
    2d12:	8d 83       	std	Y+5, r24	; 0x05
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	f1 f7       	brne	.-4      	; 0x2d20 <main+0x3ae>
    2d24:	9a 83       	std	Y+2, r25	; 0x02
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	35 cf       	rjmp	.-406    	; 0x2b94 <main+0x222>

00002d2a <__udivmodqi4>:
    2d2a:	99 1b       	sub	r25, r25
    2d2c:	79 e0       	ldi	r23, 0x09	; 9
    2d2e:	04 c0       	rjmp	.+8      	; 0x2d38 <__udivmodqi4_ep>

00002d30 <__udivmodqi4_loop>:
    2d30:	99 1f       	adc	r25, r25
    2d32:	96 17       	cp	r25, r22
    2d34:	08 f0       	brcs	.+2      	; 0x2d38 <__udivmodqi4_ep>
    2d36:	96 1b       	sub	r25, r22

00002d38 <__udivmodqi4_ep>:
    2d38:	88 1f       	adc	r24, r24
    2d3a:	7a 95       	dec	r23
    2d3c:	c9 f7       	brne	.-14     	; 0x2d30 <__udivmodqi4_loop>
    2d3e:	80 95       	com	r24
    2d40:	08 95       	ret

00002d42 <__divmodsi4>:
    2d42:	97 fb       	bst	r25, 7
    2d44:	09 2e       	mov	r0, r25
    2d46:	05 26       	eor	r0, r21
    2d48:	0e d0       	rcall	.+28     	; 0x2d66 <__divmodsi4_neg1>
    2d4a:	57 fd       	sbrc	r21, 7
    2d4c:	04 d0       	rcall	.+8      	; 0x2d56 <__divmodsi4_neg2>
    2d4e:	14 d0       	rcall	.+40     	; 0x2d78 <__udivmodsi4>
    2d50:	0a d0       	rcall	.+20     	; 0x2d66 <__divmodsi4_neg1>
    2d52:	00 1c       	adc	r0, r0
    2d54:	38 f4       	brcc	.+14     	; 0x2d64 <__divmodsi4_exit>

00002d56 <__divmodsi4_neg2>:
    2d56:	50 95       	com	r21
    2d58:	40 95       	com	r20
    2d5a:	30 95       	com	r19
    2d5c:	21 95       	neg	r18
    2d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d60:	4f 4f       	sbci	r20, 0xFF	; 255
    2d62:	5f 4f       	sbci	r21, 0xFF	; 255

00002d64 <__divmodsi4_exit>:
    2d64:	08 95       	ret

00002d66 <__divmodsi4_neg1>:
    2d66:	f6 f7       	brtc	.-4      	; 0x2d64 <__divmodsi4_exit>
    2d68:	90 95       	com	r25
    2d6a:	80 95       	com	r24
    2d6c:	70 95       	com	r23
    2d6e:	61 95       	neg	r22
    2d70:	7f 4f       	sbci	r23, 0xFF	; 255
    2d72:	8f 4f       	sbci	r24, 0xFF	; 255
    2d74:	9f 4f       	sbci	r25, 0xFF	; 255
    2d76:	08 95       	ret

00002d78 <__udivmodsi4>:
    2d78:	a1 e2       	ldi	r26, 0x21	; 33
    2d7a:	1a 2e       	mov	r1, r26
    2d7c:	aa 1b       	sub	r26, r26
    2d7e:	bb 1b       	sub	r27, r27
    2d80:	fd 01       	movw	r30, r26
    2d82:	0d c0       	rjmp	.+26     	; 0x2d9e <__udivmodsi4_ep>

00002d84 <__udivmodsi4_loop>:
    2d84:	aa 1f       	adc	r26, r26
    2d86:	bb 1f       	adc	r27, r27
    2d88:	ee 1f       	adc	r30, r30
    2d8a:	ff 1f       	adc	r31, r31
    2d8c:	a2 17       	cp	r26, r18
    2d8e:	b3 07       	cpc	r27, r19
    2d90:	e4 07       	cpc	r30, r20
    2d92:	f5 07       	cpc	r31, r21
    2d94:	20 f0       	brcs	.+8      	; 0x2d9e <__udivmodsi4_ep>
    2d96:	a2 1b       	sub	r26, r18
    2d98:	b3 0b       	sbc	r27, r19
    2d9a:	e4 0b       	sbc	r30, r20
    2d9c:	f5 0b       	sbc	r31, r21

00002d9e <__udivmodsi4_ep>:
    2d9e:	66 1f       	adc	r22, r22
    2da0:	77 1f       	adc	r23, r23
    2da2:	88 1f       	adc	r24, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	1a 94       	dec	r1
    2da8:	69 f7       	brne	.-38     	; 0x2d84 <__udivmodsi4_loop>
    2daa:	60 95       	com	r22
    2dac:	70 95       	com	r23
    2dae:	80 95       	com	r24
    2db0:	90 95       	com	r25
    2db2:	9b 01       	movw	r18, r22
    2db4:	ac 01       	movw	r20, r24
    2db6:	bd 01       	movw	r22, r26
    2db8:	cf 01       	movw	r24, r30
    2dba:	08 95       	ret

00002dbc <__prologue_saves__>:
    2dbc:	2f 92       	push	r2
    2dbe:	3f 92       	push	r3
    2dc0:	4f 92       	push	r4
    2dc2:	5f 92       	push	r5
    2dc4:	6f 92       	push	r6
    2dc6:	7f 92       	push	r7
    2dc8:	8f 92       	push	r8
    2dca:	9f 92       	push	r9
    2dcc:	af 92       	push	r10
    2dce:	bf 92       	push	r11
    2dd0:	cf 92       	push	r12
    2dd2:	df 92       	push	r13
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	ca 1b       	sub	r28, r26
    2de6:	db 0b       	sbc	r29, r27
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	09 94       	ijmp

00002df4 <__epilogue_restores__>:
    2df4:	2a 88       	ldd	r2, Y+18	; 0x12
    2df6:	39 88       	ldd	r3, Y+17	; 0x11
    2df8:	48 88       	ldd	r4, Y+16	; 0x10
    2dfa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dfc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dfe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e06:	b9 84       	ldd	r11, Y+9	; 0x09
    2e08:	c8 84       	ldd	r12, Y+8	; 0x08
    2e0a:	df 80       	ldd	r13, Y+7	; 0x07
    2e0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e10:	0c 81       	ldd	r16, Y+4	; 0x04
    2e12:	1b 81       	ldd	r17, Y+3	; 0x03
    2e14:	aa 81       	ldd	r26, Y+2	; 0x02
    2e16:	b9 81       	ldd	r27, Y+1	; 0x01
    2e18:	ce 0f       	add	r28, r30
    2e1a:	d1 1d       	adc	r29, r1
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	ed 01       	movw	r28, r26
    2e28:	08 95       	ret

00002e2a <_exit>:
    2e2a:	f8 94       	cli

00002e2c <__stop_program>:
    2e2c:	ff cf       	rjmp	.-2      	; 0x2e2c <__stop_program>
